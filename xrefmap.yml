### YamlMime:XRefMap
sorted: true
references:
- uid: Microsoft.Extensions.Configuration
  name: Microsoft.Extensions.Configuration
  href: api/Microsoft.Extensions.Configuration.yml
  commentId: N:Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension
  name: ConfigurationExtension
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationExtension
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension
  nameWithType: ConfigurationExtension
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.FeatureFlagsSectionName
  name: FeatureFlagsSectionName
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: F:Microsoft.Extensions.Configuration.ConfigurationExtension.FeatureFlagsSectionName
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.FeatureFlagsSectionName
  nameWithType: ConfigurationExtension.FeatureFlagsSectionName
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String)
  name: GetAppSetting(IConfiguration, string, string)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String)
  name.vb: GetAppSetting(IConfiguration, String, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration, string, string)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration, String, String)
  nameWithType: ConfigurationExtension.GetAppSetting(IConfiguration, string, string)
  nameWithType.vb: ConfigurationExtension.GetAppSetting(IConfiguration, String, String)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name: GetAppSetting(IConfiguration, string)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name.vb: GetAppSetting(IConfiguration, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration, string)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Microsoft.Extensions.Configuration.IConfiguration, String)
  nameWithType: ConfigurationExtension.GetAppSetting(IConfiguration, string)
  nameWithType.vb: ConfigurationExtension.GetAppSetting(IConfiguration, String)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting*
  name: GetAppSetting
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting
  isSpec: "True"
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting
  nameWithType: ConfigurationExtension.GetAppSetting
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)
  name: GetAppSetting<T>(IConfiguration, string, T)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,``0)
  name.vb: GetAppSetting(Of T)(IConfiguration, String, T)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting<T>(Microsoft.Extensions.Configuration.IConfiguration, string, T)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Of T)(Microsoft.Extensions.Configuration.IConfiguration, String, T)
  nameWithType: ConfigurationExtension.GetAppSetting<T>(IConfiguration, string, T)
  nameWithType.vb: ConfigurationExtension.GetAppSetting(Of T)(IConfiguration, String, T)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Func{``0})
  name: GetAppSetting<T>(IConfiguration, string, Func<T>)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Func{``0})
  name.vb: GetAppSetting(Of T)(IConfiguration, String, Func(Of T))
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting<T>(Microsoft.Extensions.Configuration.IConfiguration, string, System.Func<T>)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Of T)(Microsoft.Extensions.Configuration.IConfiguration, String, System.Func(Of T))
  nameWithType: ConfigurationExtension.GetAppSetting<T>(IConfiguration, string, Func<T>)
  nameWithType.vb: ConfigurationExtension.GetAppSetting(Of T)(IConfiguration, String, Func(Of T))
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name: GetAppSetting<T>(IConfiguration, string)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name.vb: GetAppSetting(Of T)(IConfiguration, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting<T>(Microsoft.Extensions.Configuration.IConfiguration, string)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetAppSetting(Of T)(Microsoft.Extensions.Configuration.IConfiguration, String)
  nameWithType: ConfigurationExtension.GetAppSetting<T>(IConfiguration, string)
  nameWithType.vb: ConfigurationExtension.GetAppSetting(Of T)(IConfiguration, String)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name: GetRequiredAppSetting(IConfiguration, string)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting(Microsoft.Extensions.Configuration.IConfiguration,System.String)
  name.vb: GetRequiredAppSetting(IConfiguration, String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting(Microsoft.Extensions.Configuration.IConfiguration, string)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting(Microsoft.Extensions.Configuration.IConfiguration, String)
  nameWithType: ConfigurationExtension.GetRequiredAppSetting(IConfiguration, string)
  nameWithType.vb: ConfigurationExtension.GetRequiredAppSetting(IConfiguration, String)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting*
  name: GetRequiredAppSetting
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting
  isSpec: "True"
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.GetRequiredAppSetting
  nameWithType: ConfigurationExtension.GetRequiredAppSetting
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Boolean)
  name: IsFeatureEnabled(IConfiguration, string, bool)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Boolean)
  name.vb: IsFeatureEnabled(IConfiguration, String, Boolean)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled(Microsoft.Extensions.Configuration.IConfiguration, string, bool)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled(Microsoft.Extensions.Configuration.IConfiguration, String, Boolean)
  nameWithType: ConfigurationExtension.IsFeatureEnabled(IConfiguration, string, bool)
  nameWithType.vb: ConfigurationExtension.IsFeatureEnabled(IConfiguration, String, Boolean)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled*
  name: IsFeatureEnabled
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled
  isSpec: "True"
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.IsFeatureEnabled
  nameWithType: ConfigurationExtension.IsFeatureEnabled
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders(Microsoft.Extensions.Configuration.IConfiguration)
  name: ReplacePlaceholders(IConfiguration)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ConfigurationExtension.ReplacePlaceholders(IConfiguration)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders*
  name: ReplacePlaceholders
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders
  isSpec: "True"
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.ReplacePlaceholders
  nameWithType: ConfigurationExtension.ReplacePlaceholders
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Boolean@)
  name: TryGetFeatureFlagValue(IConfiguration, string, out bool)
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Boolean@)
  name.vb: TryGetFeatureFlagValue(IConfiguration, String, Boolean)
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue(Microsoft.Extensions.Configuration.IConfiguration, string, out bool)
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue(Microsoft.Extensions.Configuration.IConfiguration, String, Boolean)
  nameWithType: ConfigurationExtension.TryGetFeatureFlagValue(IConfiguration, string, out bool)
  nameWithType.vb: ConfigurationExtension.TryGetFeatureFlagValue(IConfiguration, String, Boolean)
- uid: Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue*
  name: TryGetFeatureFlagValue
  href: api/Microsoft.Extensions.Configuration.ConfigurationExtension.yml
  commentId: Overload:Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue
  isSpec: "True"
  fullName: Microsoft.Extensions.Configuration.ConfigurationExtension.TryGetFeatureFlagValue
  nameWithType: ConfigurationExtension.TryGetFeatureFlagValue
- uid: Microsoft.Extensions.DependencyInjection
  name: Microsoft.Extensions.DependencyInjection
  href: api/Microsoft.Extensions.DependencyInjection.yml
  commentId: N:Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.DependencyInjection.IServiceModule
  name: IServiceModule
  href: api/Microsoft.Extensions.DependencyInjection.IServiceModule.yml
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceModule
  fullName: Microsoft.Extensions.DependencyInjection.IServiceModule
  nameWithType: IServiceModule
- uid: Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: ConfigureServices(IServiceCollection)
  href: api/Microsoft.Extensions.DependencyInjection.IServiceModule.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: IServiceModule.ConfigureServices(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices*
  name: ConfigureServices
  href: api/Microsoft.Extensions.DependencyInjection.IServiceModule.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.IServiceModule.ConfigureServices
  nameWithType: IServiceModule.ConfigureServices
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension
  name: ServiceCollectionExtension
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension
  nameWithType: ServiceCollectionExtension
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  name: Decorate(IServiceCollection, Type, Type)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  nameWithType: ServiceCollectionExtension.Decorate(IServiceCollection, Type, Type)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate*
  name: Decorate
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate
  nameWithType: ServiceCollectionExtension.Decorate
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: Decorate<TService, TDecorator>(IServiceCollection)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: Decorate(Of TService, TDecorator)(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate<TService, TDecorator>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.Decorate(Of TService, TDecorator)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtension.Decorate<TService, TDecorator>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtension.Decorate(Of TService, TDecorator)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name: RegisterAssemblyModules(IServiceCollection, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyModules(IServiceCollection, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules(Microsoft.Extensions.DependencyInjection.IServiceCollection, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyModules(IServiceCollection, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyModules(IServiceCollection, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules*
  name: RegisterAssemblyModules
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyModules
  nameWithType: ServiceCollectionExtension.RegisterAssemblyModules
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceCollection, ServiceLifetime, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceCollection, ServiceLifetime, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, ServiceLifetime, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceCollection, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceCollection, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Type, bool>?, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.Type, Boolean), Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceCollection, Func<Type, bool>?, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceCollection, Func(Of Type, Boolean), ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Type, bool>?, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.Type, Boolean), ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, Func<Type, bool>?, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, Func(Of Type, Boolean), ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceCollection, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceCollection, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypes(IServiceCollection, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes*
  name: RegisterAssemblyTypes
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypes
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypes
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ServiceLifetime, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ServiceLifetime, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ServiceLifetime, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Type, bool>?, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.Type, Boolean), Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>?, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Type, bool>?, System.Func<System.Type, bool>?, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.Type, Boolean), System.Func(Of System.Type, Boolean), Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>?, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.Type, bool>, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.Type, Boolean), ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func<Type, bool>, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, Func(Of Type, Boolean), ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, params Assembly[])
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ParamArray Assembly())
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, params System.Reflection.Assembly[])
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, params Assembly[])
  nameWithType.vb: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces(IServiceCollection, ParamArray Assembly())
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces*
  name: RegisterAssemblyTypesAsImplementedInterfaces
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces
  nameWithType: ServiceCollectionExtension.RegisterAssemblyTypesAsImplementedInterfaces
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule*
  name: RegisterModule
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule
  nameWithType: ServiceCollectionExtension.RegisterModule
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  name: RegisterModule<TServiceModule>(IServiceCollection, TServiceModule)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  name.vb: RegisterModule(Of TServiceModule)(IServiceCollection, TServiceModule)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule<TServiceModule>(Microsoft.Extensions.DependencyInjection.IServiceCollection, TServiceModule)
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterModule(Of TServiceModule)(Microsoft.Extensions.DependencyInjection.IServiceCollection, TServiceModule)
  nameWithType: ServiceCollectionExtension.RegisterModule<TServiceModule>(IServiceCollection, TServiceModule)
  nameWithType.vb: ServiceCollectionExtension.RegisterModule(Of TServiceModule)(IServiceCollection, TServiceModule)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, ServiceLifetime)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, ServiceLifetime)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, Func<Type, bool>?, ServiceLifetime)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, Func(Of Type, Boolean), ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.Type, bool>?, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.Type, Boolean), Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, Func<Type, bool>?, ServiceLifetime)
  nameWithType.vb: ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces(IServiceCollection, Type, Func(Of Type, Boolean), ServiceLifetime)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces*
  name: RegisterTypeAsImplementedInterfaces
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.yml
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces
  nameWithType: ServiceCollectionExtension.RegisterTypeAsImplementedInterfaces
- uid: Microsoft.Extensions.Logging
  name: Microsoft.Extensions.Logging
  href: api/Microsoft.Extensions.Logging.yml
  commentId: N:Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider
  name: DelegateLoggerProvider
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: T:Microsoft.Extensions.Logging.DelegateLoggerProvider
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider
  nameWithType: DelegateLoggerProvider
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.#ctor(System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name: DelegateLoggerProvider(Action<string, LogLevel, Exception?, string>)
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: M:Microsoft.Extensions.Logging.DelegateLoggerProvider.#ctor(System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name.vb: New(Action(Of String, LogLevel, Exception, String))
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.DelegateLoggerProvider(System.Action<string, Microsoft.Extensions.Logging.LogLevel, System.Exception?, string>)
  fullName.vb: Microsoft.Extensions.Logging.DelegateLoggerProvider.New(System.Action(Of String, Microsoft.Extensions.Logging.LogLevel, System.Exception, String))
  nameWithType: DelegateLoggerProvider.DelegateLoggerProvider(Action<string, LogLevel, Exception?, string>)
  nameWithType.vb: DelegateLoggerProvider.New(Action(Of String, LogLevel, Exception, String))
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.#ctor*
  name: DelegateLoggerProvider
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: Overload:Microsoft.Extensions.Logging.DelegateLoggerProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.DelegateLoggerProvider
  fullName.vb: Microsoft.Extensions.Logging.DelegateLoggerProvider.New
  nameWithType: DelegateLoggerProvider.DelegateLoggerProvider
  nameWithType.vb: DelegateLoggerProvider.New
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger(System.String)
  name: CreateLogger(string)
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: M:Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger(System.String)
  name.vb: CreateLogger(String)
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger(string)
  fullName.vb: Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger(String)
  nameWithType: DelegateLoggerProvider.CreateLogger(string)
  nameWithType.vb: DelegateLoggerProvider.CreateLogger(String)
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger*
  name: CreateLogger
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: Overload:Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.CreateLogger
  nameWithType: DelegateLoggerProvider.CreateLogger
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose
  name: Dispose()
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: M:Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose()
  nameWithType: DelegateLoggerProvider.Dispose()
- uid: Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose*
  name: Dispose
  href: api/Microsoft.Extensions.Logging.DelegateLoggerProvider.yml
  commentId: Overload:Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.DelegateLoggerProvider.Dispose
  nameWithType: DelegateLoggerProvider.Dispose
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions
  name: Log4NetLoggerFactoryExtensions
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: T:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions
  nameWithType: Log4NetLoggerFactoryExtensions
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory,System.String)
  name: AddLog4Net(ILoggerFactory, string)
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory,System.String)
  name.vb: AddLog4Net(ILoggerFactory, String)
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory, string)
  fullName.vb: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory, String)
  nameWithType: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggerFactory, string)
  nameWithType.vb: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggerFactory, String)
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory)
  name: AddLog4Net(ILoggerFactory)
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory)
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggerFactory)
  nameWithType: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggerFactory)
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  name: AddLog4Net(ILoggingBuilder, string)
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder,System.String)
  name.vb: AddLog4Net(ILoggingBuilder, String)
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder, string)
  fullName.vb: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder, String)
  nameWithType: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggingBuilder, string)
  nameWithType.vb: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggingBuilder, String)
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder)
  name: AddLog4Net(ILoggingBuilder)
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder)
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net(Microsoft.Extensions.Logging.ILoggingBuilder)
  nameWithType: Log4NetLoggerFactoryExtensions.AddLog4Net(ILoggingBuilder)
- uid: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net*
  name: AddLog4Net
  href: api/Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.Log4NetLoggerFactoryExtensions.AddLog4Net
  nameWithType: Log4NetLoggerFactoryExtensions.AddLog4Net
- uid: Microsoft.Extensions.Logging.LoggerExtensions
  name: LoggerExtensions
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: T:Microsoft.Extensions.Logging.LoggerExtensions
  fullName: Microsoft.Extensions.Logging.LoggerExtensions
  nameWithType: LoggerExtensions
- uid: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name: AddDelegateLogger(ILoggerFactory, Action<string, LogLevel, Exception?, string>)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name.vb: AddDelegateLogger(ILoggerFactory, Action(Of String, LogLevel, Exception, String))
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggerFactory, System.Action<string, Microsoft.Extensions.Logging.LogLevel, System.Exception?, string>)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggerFactory, System.Action(Of String, Microsoft.Extensions.Logging.LogLevel, System.Exception, String))
  nameWithType: LoggerExtensions.AddDelegateLogger(ILoggerFactory, Action<string, LogLevel, Exception?, string>)
  nameWithType.vb: LoggerExtensions.AddDelegateLogger(ILoggerFactory, Action(Of String, LogLevel, Exception, String))
- uid: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name: AddDelegateLogger(ILoggingBuilder, Action<string, LogLevel, Exception?, string>)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String})
  name.vb: AddDelegateLogger(ILoggingBuilder, Action(Of String, LogLevel, Exception, String))
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<string, Microsoft.Extensions.Logging.LogLevel, System.Exception?, string>)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action(Of String, Microsoft.Extensions.Logging.LogLevel, System.Exception, String))
  nameWithType: LoggerExtensions.AddDelegateLogger(ILoggingBuilder, Action<string, LogLevel, Exception?, string>)
  nameWithType.vb: LoggerExtensions.AddDelegateLogger(ILoggingBuilder, Action(Of String, LogLevel, Exception, String))
- uid: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger*
  name: AddDelegateLogger
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.AddDelegateLogger
  nameWithType: LoggerExtensions.AddDelegateLogger
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Debug(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Debug(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Debug(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Debug(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Exception)
  name: Debug(ILogger, Exception)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Exception)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger, System.Exception)
  nameWithType: LoggerExtensions.Debug(ILogger, Exception)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Debug(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Debug(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Debug(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Debug(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Debug*
  name: Debug
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Debug
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Debug
  nameWithType: LoggerExtensions.Debug
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Error(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Error(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Error(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Error(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception)
  name: Error(ILogger, Exception)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger, System.Exception)
  nameWithType: LoggerExtensions.Error(ILogger, Exception)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Error(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Error(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Error(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Error(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Error*
  name: Error
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Error
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Error
  nameWithType: LoggerExtensions.Error
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Fatal(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Fatal(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Fatal(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Fatal(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.Exception)
  name: Fatal(ILogger, Exception)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.Exception)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger, System.Exception)
  nameWithType: LoggerExtensions.Fatal(ILogger, Exception)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Fatal(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Fatal(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Fatal(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Fatal(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Fatal(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Fatal*
  name: Fatal
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Fatal
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Fatal
  nameWithType: LoggerExtensions.Fatal
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Info(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Info(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Info(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Info(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Info(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Info(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Info(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Info(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Info(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Info*
  name: Info
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Info
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Info
  nameWithType: LoggerExtensions.Info
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Trace(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Trace(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Trace(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Trace(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Exception)
  name: Trace(ILogger, Exception)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Exception)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger, System.Exception)
  nameWithType: LoggerExtensions.Trace(ILogger, Exception)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Trace(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Trace(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Trace(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Trace(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Trace*
  name: Trace
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Trace
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Trace
  nameWithType: LoggerExtensions.Trace
- uid: Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{WeihanLi.Common.Logging.GenericLoggerOptions})
  name: UseCustomGenericLogger(ILoggingBuilder, Action<GenericLoggerOptions>)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{WeihanLi.Common.Logging.GenericLoggerOptions})
  name.vb: UseCustomGenericLogger(ILoggingBuilder, Action(Of GenericLoggerOptions))
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action<WeihanLi.Common.Logging.GenericLoggerOptions>)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger(Microsoft.Extensions.Logging.ILoggingBuilder, System.Action(Of WeihanLi.Common.Logging.GenericLoggerOptions))
  nameWithType: LoggerExtensions.UseCustomGenericLogger(ILoggingBuilder, Action<GenericLoggerOptions>)
  nameWithType.vb: LoggerExtensions.UseCustomGenericLogger(ILoggingBuilder, Action(Of GenericLoggerOptions))
- uid: Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger*
  name: UseCustomGenericLogger
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.UseCustomGenericLogger
  nameWithType: LoggerExtensions.UseCustomGenericLogger
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name: Warn(ILogger, Exception, string)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String)
  name.vb: Warn(ILogger, Exception, String)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger, System.Exception, string)
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger, System.Exception, String)
  nameWithType: LoggerExtensions.Warn(ILogger, Exception, string)
  nameWithType.vb: LoggerExtensions.Warn(ILogger, Exception, String)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Exception)
  name: Warn(ILogger, Exception)
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.Exception)
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger, System.Exception)
  nameWithType: LoggerExtensions.Warn(ILogger, Exception)
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name: Warn(ILogger, string, params object[])
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: M:Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])
  name.vb: Warn(ILogger, String, ParamArray Object())
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger, string, params object[])
  fullName.vb: Microsoft.Extensions.Logging.LoggerExtensions.Warn(Microsoft.Extensions.Logging.ILogger, String, ParamArray Object())
  nameWithType: LoggerExtensions.Warn(ILogger, string, params object[])
  nameWithType.vb: LoggerExtensions.Warn(ILogger, String, ParamArray Object())
- uid: Microsoft.Extensions.Logging.LoggerExtensions.Warn*
  name: Warn
  href: api/Microsoft.Extensions.Logging.LoggerExtensions.yml
  commentId: Overload:Microsoft.Extensions.Logging.LoggerExtensions.Warn
  isSpec: "True"
  fullName: Microsoft.Extensions.Logging.LoggerExtensions.Warn
  nameWithType: LoggerExtensions.Warn
- uid: WeihanLi.Common
  name: WeihanLi.Common
  href: api/WeihanLi.Common.yml
  commentId: N:WeihanLi.Common
  fullName: WeihanLi.Common
  nameWithType: WeihanLi.Common
- uid: WeihanLi.Common.Abstractions
  name: WeihanLi.Common.Abstractions
  href: api/WeihanLi.Common.Abstractions.yml
  commentId: N:WeihanLi.Common.Abstractions
  fullName: WeihanLi.Common.Abstractions
  nameWithType: WeihanLi.Common.Abstractions
- uid: WeihanLi.Common.Abstractions.IProperties
  name: IProperties
  href: api/WeihanLi.Common.Abstractions.IProperties.yml
  commentId: T:WeihanLi.Common.Abstractions.IProperties
  fullName: WeihanLi.Common.Abstractions.IProperties
  nameWithType: IProperties
- uid: WeihanLi.Common.Abstractions.IProperties.Properties
  name: Properties
  href: api/WeihanLi.Common.Abstractions.IProperties.yml
  commentId: P:WeihanLi.Common.Abstractions.IProperties.Properties
  fullName: WeihanLi.Common.Abstractions.IProperties.Properties
  nameWithType: IProperties.Properties
- uid: WeihanLi.Common.Abstractions.IProperties.Properties*
  name: Properties
  href: api/WeihanLi.Common.Abstractions.IProperties.yml
  commentId: Overload:WeihanLi.Common.Abstractions.IProperties.Properties
  isSpec: "True"
  fullName: WeihanLi.Common.Abstractions.IProperties.Properties
  nameWithType: IProperties.Properties
- uid: WeihanLi.Common.Aspect
  name: WeihanLi.Common.Aspect
  href: api/WeihanLi.Common.Aspect.yml
  commentId: N:WeihanLi.Common.Aspect
  fullName: WeihanLi.Common.Aspect
  nameWithType: WeihanLi.Common.Aspect
- uid: WeihanLi.Common.Aspect.AbstractInterceptor
  name: AbstractInterceptor
  href: api/WeihanLi.Common.Aspect.AbstractInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.AbstractInterceptor
  fullName: WeihanLi.Common.Aspect.AbstractInterceptor
  nameWithType: AbstractInterceptor
- uid: WeihanLi.Common.Aspect.AbstractInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name: Invoke(IInvocation, Func<Task>)
  href: api/WeihanLi.Common.Aspect.AbstractInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.AbstractInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name.vb: Invoke(IInvocation, Func(Of Task))
  fullName: WeihanLi.Common.Aspect.AbstractInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.AbstractInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task))
  nameWithType: AbstractInterceptor.Invoke(IInvocation, Func<Task>)
  nameWithType.vb: AbstractInterceptor.Invoke(IInvocation, Func(Of Task))
- uid: WeihanLi.Common.Aspect.AbstractInterceptor.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.AbstractInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.AbstractInterceptor.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AbstractInterceptor.Invoke
  nameWithType: AbstractInterceptor.Invoke
- uid: WeihanLi.Common.Aspect.AspectCore
  name: WeihanLi.Common.Aspect.AspectCore
  href: api/WeihanLi.Common.Aspect.AspectCore.yml
  commentId: N:WeihanLi.Common.Aspect.AspectCore
  fullName: WeihanLi.Common.Aspect.AspectCore
  nameWithType: WeihanLi.Common.Aspect.AspectCore
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor
  name: AspectCoreFluentAspectInterceptor
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor
  nameWithType: AspectCoreFluentAspectInterceptor
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple
  name: AllowMultiple
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: P:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple
  nameWithType: AspectCoreFluentAspectInterceptor.AllowMultiple
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple*
  name: AllowMultiple
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.AllowMultiple
  nameWithType: AspectCoreFluentAspectInterceptor.AllowMultiple
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited
  name: Inherited
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: P:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited
  nameWithType: AspectCoreFluentAspectInterceptor.Inherited
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited*
  name: Inherited
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Inherited
  nameWithType: AspectCoreFluentAspectInterceptor.Inherited
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate)
  name: Invoke(AspectContext, AspectDelegate)
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke(AspectCore.DynamicProxy.AspectContext,AspectCore.DynamicProxy.AspectDelegate)
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke(AspectCore.DynamicProxy.AspectContext, AspectCore.DynamicProxy.AspectDelegate)
  nameWithType: AspectCoreFluentAspectInterceptor.Invoke(AspectContext, AspectDelegate)
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Invoke
  nameWithType: AspectCoreFluentAspectInterceptor.Invoke
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order
  name: Order
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: P:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order
  nameWithType: AspectCoreFluentAspectInterceptor.Order
- uid: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order*
  name: Order
  href: api/WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectCore.AspectCoreFluentAspectInterceptor.Order
  nameWithType: AspectCoreFluentAspectInterceptor.Order
- uid: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions
  name: FluentAspectBuilderExtensions
  href: api/WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions
  fullName: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions
  nameWithType: FluentAspectBuilderExtensions
- uid: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  name: UseAspectCoreProxy(IFluentAspectsBuilder)
  href: api/WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  fullName: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  nameWithType: FluentAspectBuilderExtensions.UseAspectCoreProxy(IFluentAspectsBuilder)
- uid: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  name: UseAspectCoreProxy(IFluentAspectsServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  nameWithType: FluentAspectBuilderExtensions.UseAspectCoreProxy(IFluentAspectsServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy*
  name: UseAspectCoreProxy
  href: api/WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectCore.FluentAspectBuilderExtensions.UseAspectCoreProxy
  nameWithType: FluentAspectBuilderExtensions.UseAspectCoreProxy
- uid: WeihanLi.Common.Aspect.AspectDelegate
  name: AspectDelegate
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: T:WeihanLi.Common.Aspect.AspectDelegate
  fullName: WeihanLi.Common.Aspect.AspectDelegate
  nameWithType: AspectDelegate
- uid: WeihanLi.Common.Aspect.AspectDelegate.Invoke(WeihanLi.Common.Aspect.IInvocation)
  name: Invoke(IInvocation)
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: M:WeihanLi.Common.Aspect.AspectDelegate.Invoke(WeihanLi.Common.Aspect.IInvocation)
  fullName: WeihanLi.Common.Aspect.AspectDelegate.Invoke(WeihanLi.Common.Aspect.IInvocation)
  nameWithType: AspectDelegate.Invoke(IInvocation)
- uid: WeihanLi.Common.Aspect.AspectDelegate.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectDelegate.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectDelegate.Invoke
  nameWithType: AspectDelegate.Invoke
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal(WeihanLi.Common.Aspect.IInvocation,System.Collections.Generic.IReadOnlyList{WeihanLi.Common.Aspect.IInterceptor},System.Func{WeihanLi.Common.Aspect.IInvocation,System.Threading.Tasks.Task})
  name: InvokeInternal(IInvocation, IReadOnlyList<IInterceptor>?, Func<IInvocation, Task>?)
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: M:WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal(WeihanLi.Common.Aspect.IInvocation,System.Collections.Generic.IReadOnlyList{WeihanLi.Common.Aspect.IInterceptor},System.Func{WeihanLi.Common.Aspect.IInvocation,System.Threading.Tasks.Task})
  name.vb: InvokeInternal(IInvocation, IReadOnlyList(Of IInterceptor), Func(Of IInvocation, Task))
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal(WeihanLi.Common.Aspect.IInvocation, System.Collections.Generic.IReadOnlyList<WeihanLi.Common.Aspect.IInterceptor>?, System.Func<WeihanLi.Common.Aspect.IInvocation, System.Threading.Tasks.Task>?)
  fullName.vb: WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal(WeihanLi.Common.Aspect.IInvocation, System.Collections.Generic.IReadOnlyList(Of WeihanLi.Common.Aspect.IInterceptor), System.Func(Of WeihanLi.Common.Aspect.IInvocation, System.Threading.Tasks.Task))
  nameWithType: AspectDelegate.InvokeInternal(IInvocation, IReadOnlyList<IInterceptor>?, Func<IInvocation, Task>?)
  nameWithType.vb: AspectDelegate.InvokeInternal(IInvocation, IReadOnlyList(Of IInterceptor), Func(Of IInvocation, Task))
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal*
  name: InvokeInternal
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeInternal
  nameWithType: AspectDelegate.InvokeInternal
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc(WeihanLi.Common.Aspect.IInvocation,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Threading.Tasks.Task})
  name: InvokeWithCompleteFunc(IInvocation, Func<IInvocation, Task>?)
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: M:WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc(WeihanLi.Common.Aspect.IInvocation,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Threading.Tasks.Task})
  name.vb: InvokeWithCompleteFunc(IInvocation, Func(Of IInvocation, Task))
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc(WeihanLi.Common.Aspect.IInvocation, System.Func<WeihanLi.Common.Aspect.IInvocation, System.Threading.Tasks.Task>?)
  fullName.vb: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc(WeihanLi.Common.Aspect.IInvocation, System.Func(Of WeihanLi.Common.Aspect.IInvocation, System.Threading.Tasks.Task))
  nameWithType: AspectDelegate.InvokeWithCompleteFunc(IInvocation, Func<IInvocation, Task>?)
  nameWithType.vb: AspectDelegate.InvokeWithCompleteFunc(IInvocation, Func(Of IInvocation, Task))
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc*
  name: InvokeWithCompleteFunc
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithCompleteFunc
  nameWithType: AspectDelegate.InvokeWithCompleteFunc
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors(WeihanLi.Common.Aspect.IInvocation,System.Collections.Generic.IReadOnlyList{WeihanLi.Common.Aspect.IInterceptor})
  name: InvokeWithInterceptors(IInvocation, IReadOnlyList<IInterceptor>?)
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: M:WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors(WeihanLi.Common.Aspect.IInvocation,System.Collections.Generic.IReadOnlyList{WeihanLi.Common.Aspect.IInterceptor})
  name.vb: InvokeWithInterceptors(IInvocation, IReadOnlyList(Of IInterceptor))
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors(WeihanLi.Common.Aspect.IInvocation, System.Collections.Generic.IReadOnlyList<WeihanLi.Common.Aspect.IInterceptor>?)
  fullName.vb: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors(WeihanLi.Common.Aspect.IInvocation, System.Collections.Generic.IReadOnlyList(Of WeihanLi.Common.Aspect.IInterceptor))
  nameWithType: AspectDelegate.InvokeWithInterceptors(IInvocation, IReadOnlyList<IInterceptor>?)
  nameWithType.vb: AspectDelegate.InvokeWithInterceptors(IInvocation, IReadOnlyList(Of IInterceptor))
- uid: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors*
  name: InvokeWithInterceptors
  href: api/WeihanLi.Common.Aspect.AspectDelegate.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectDelegate.InvokeWithInterceptors
  nameWithType: AspectDelegate.InvokeWithInterceptors
- uid: WeihanLi.Common.Aspect.AspectInvocation
  name: AspectInvocation
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: T:WeihanLi.Common.Aspect.AspectInvocation
  fullName: WeihanLi.Common.Aspect.AspectInvocation
  nameWithType: AspectInvocation
- uid: WeihanLi.Common.Aspect.AspectInvocation.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object,System.Object,System.Object[])
  name: AspectInvocation(MethodInfo, MethodInfo?, object, object?, object[])
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: M:WeihanLi.Common.Aspect.AspectInvocation.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object,System.Object,System.Object[])
  name.vb: New(MethodInfo, MethodInfo, Object, Object, Object())
  fullName: WeihanLi.Common.Aspect.AspectInvocation.AspectInvocation(System.Reflection.MethodInfo, System.Reflection.MethodInfo?, object, object?, object[])
  fullName.vb: WeihanLi.Common.Aspect.AspectInvocation.New(System.Reflection.MethodInfo, System.Reflection.MethodInfo, Object, Object, Object())
  nameWithType: AspectInvocation.AspectInvocation(MethodInfo, MethodInfo?, object, object?, object[])
  nameWithType.vb: AspectInvocation.New(MethodInfo, MethodInfo, Object, Object, Object())
- uid: WeihanLi.Common.Aspect.AspectInvocation.#ctor*
  name: AspectInvocation
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Aspect.AspectInvocation.AspectInvocation
  fullName.vb: WeihanLi.Common.Aspect.AspectInvocation.New
  nameWithType: AspectInvocation.AspectInvocation
  nameWithType.vb: AspectInvocation.New
- uid: WeihanLi.Common.Aspect.AspectInvocation.Arguments
  name: Arguments
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.Arguments
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Arguments
  nameWithType: AspectInvocation.Arguments
- uid: WeihanLi.Common.Aspect.AspectInvocation.Arguments*
  name: Arguments
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.Arguments
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Arguments
  nameWithType: AspectInvocation.Arguments
- uid: WeihanLi.Common.Aspect.AspectInvocation.GenericArguments
  name: GenericArguments
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.GenericArguments
  fullName: WeihanLi.Common.Aspect.AspectInvocation.GenericArguments
  nameWithType: AspectInvocation.GenericArguments
- uid: WeihanLi.Common.Aspect.AspectInvocation.GenericArguments*
  name: GenericArguments
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.GenericArguments
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.GenericArguments
  nameWithType: AspectInvocation.GenericArguments
- uid: WeihanLi.Common.Aspect.AspectInvocation.Method
  name: Method
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.Method
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Method
  nameWithType: AspectInvocation.Method
- uid: WeihanLi.Common.Aspect.AspectInvocation.Method*
  name: Method
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.Method
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Method
  nameWithType: AspectInvocation.Method
- uid: WeihanLi.Common.Aspect.AspectInvocation.Properties
  name: Properties
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.Properties
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Properties
  nameWithType: AspectInvocation.Properties
- uid: WeihanLi.Common.Aspect.AspectInvocation.Properties*
  name: Properties
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.Properties
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Properties
  nameWithType: AspectInvocation.Properties
- uid: WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod
  name: ProxyMethod
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod
  nameWithType: AspectInvocation.ProxyMethod
- uid: WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod*
  name: ProxyMethod
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ProxyMethod
  nameWithType: AspectInvocation.ProxyMethod
- uid: WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget
  name: ProxyTarget
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget
  nameWithType: AspectInvocation.ProxyTarget
- uid: WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget*
  name: ProxyTarget
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ProxyTarget
  nameWithType: AspectInvocation.ProxyTarget
- uid: WeihanLi.Common.Aspect.AspectInvocation.ReturnValue
  name: ReturnValue
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.ReturnValue
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ReturnValue
  nameWithType: AspectInvocation.ReturnValue
- uid: WeihanLi.Common.Aspect.AspectInvocation.ReturnValue*
  name: ReturnValue
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.ReturnValue
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.ReturnValue
  nameWithType: AspectInvocation.ReturnValue
- uid: WeihanLi.Common.Aspect.AspectInvocation.Target
  name: Target
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvocation.Target
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Target
  nameWithType: AspectInvocation.Target
- uid: WeihanLi.Common.Aspect.AspectInvocation.Target*
  name: Target
  href: api/WeihanLi.Common.Aspect.AspectInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvocation.Target
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvocation.Target
  nameWithType: AspectInvocation.Target
- uid: WeihanLi.Common.Aspect.AspectInvokeException
  name: AspectInvokeException
  href: api/WeihanLi.Common.Aspect.AspectInvokeException.yml
  commentId: T:WeihanLi.Common.Aspect.AspectInvokeException
  fullName: WeihanLi.Common.Aspect.AspectInvokeException
  nameWithType: AspectInvokeException
- uid: WeihanLi.Common.Aspect.AspectInvokeException.#ctor(WeihanLi.Common.Aspect.IInvocation,System.Exception)
  name: AspectInvokeException(IInvocation, Exception)
  href: api/WeihanLi.Common.Aspect.AspectInvokeException.yml
  commentId: M:WeihanLi.Common.Aspect.AspectInvokeException.#ctor(WeihanLi.Common.Aspect.IInvocation,System.Exception)
  name.vb: New(IInvocation, Exception)
  fullName: WeihanLi.Common.Aspect.AspectInvokeException.AspectInvokeException(WeihanLi.Common.Aspect.IInvocation, System.Exception)
  fullName.vb: WeihanLi.Common.Aspect.AspectInvokeException.New(WeihanLi.Common.Aspect.IInvocation, System.Exception)
  nameWithType: AspectInvokeException.AspectInvokeException(IInvocation, Exception)
  nameWithType.vb: AspectInvokeException.New(IInvocation, Exception)
- uid: WeihanLi.Common.Aspect.AspectInvokeException.#ctor*
  name: AspectInvokeException
  href: api/WeihanLi.Common.Aspect.AspectInvokeException.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvokeException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Aspect.AspectInvokeException.AspectInvokeException
  fullName.vb: WeihanLi.Common.Aspect.AspectInvokeException.New
  nameWithType: AspectInvokeException.AspectInvokeException
  nameWithType.vb: AspectInvokeException.New
- uid: WeihanLi.Common.Aspect.AspectInvokeException.Invocation
  name: Invocation
  href: api/WeihanLi.Common.Aspect.AspectInvokeException.yml
  commentId: P:WeihanLi.Common.Aspect.AspectInvokeException.Invocation
  fullName: WeihanLi.Common.Aspect.AspectInvokeException.Invocation
  nameWithType: AspectInvokeException.Invocation
- uid: WeihanLi.Common.Aspect.AspectInvokeException.Invocation*
  name: Invocation
  href: api/WeihanLi.Common.Aspect.AspectInvokeException.yml
  commentId: Overload:WeihanLi.Common.Aspect.AspectInvokeException.Invocation
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AspectInvokeException.Invocation
  nameWithType: AspectInvokeException.Invocation
- uid: WeihanLi.Common.Aspect.AttributeInterceptorResolver
  name: AttributeInterceptorResolver
  href: api/WeihanLi.Common.Aspect.AttributeInterceptorResolver.yml
  commentId: T:WeihanLi.Common.Aspect.AttributeInterceptorResolver
  fullName: WeihanLi.Common.Aspect.AttributeInterceptorResolver
  nameWithType: AttributeInterceptorResolver
- uid: WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  name: ResolveInterceptors(IInvocation)
  href: api/WeihanLi.Common.Aspect.AttributeInterceptorResolver.yml
  commentId: M:WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  fullName: WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  nameWithType: AttributeInterceptorResolver.ResolveInterceptors(IInvocation)
- uid: WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors*
  name: ResolveInterceptors
  href: api/WeihanLi.Common.Aspect.AttributeInterceptorResolver.yml
  commentId: Overload:WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.AttributeInterceptorResolver.ResolveInterceptors
  nameWithType: AttributeInterceptorResolver.ResolveInterceptors
- uid: WeihanLi.Common.Aspect.Castle
  name: WeihanLi.Common.Aspect.Castle
  href: api/WeihanLi.Common.Aspect.Castle.yml
  commentId: N:WeihanLi.Common.Aspect.Castle
  fullName: WeihanLi.Common.Aspect.Castle
  nameWithType: WeihanLi.Common.Aspect.Castle
- uid: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor
  name: CastleFluentAspectInterceptor
  href: api/WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor
  fullName: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor
  nameWithType: CastleFluentAspectInterceptor
- uid: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept(Castle.DynamicProxy.IInvocation)
  name: Intercept(IInvocation)
  href: api/WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept(Castle.DynamicProxy.IInvocation)
  fullName: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept(Castle.DynamicProxy.IInvocation)
  nameWithType: CastleFluentAspectInterceptor.Intercept(IInvocation)
- uid: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept*
  name: Intercept
  href: api/WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.Castle.CastleFluentAspectInterceptor.Intercept
  nameWithType: CastleFluentAspectInterceptor.Intercept
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions
  name: FluentAspectBuilderExtensions
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions
  nameWithType: FluentAspectBuilderExtensions
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  name: UseCastleProxy(IFluentAspectsBuilder)
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsBuilder)
  nameWithType: FluentAspectBuilderExtensions.UseCastleProxy(IFluentAspectsBuilder)
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  name: UseCastleProxy(IFluentAspectsServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy(WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder)
  nameWithType: FluentAspectBuilderExtensions.UseCastleProxy(IFluentAspectsServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy*
  name: UseCastleProxy
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectBuilderExtensions.UseCastleProxy
  nameWithType: FluentAspectBuilderExtensions.UseCastleProxy
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector
  name: FluentAspectInterceptorSelector
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.yml
  commentId: T:WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector
  nameWithType: FluentAspectInterceptorSelector
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Castle.DynamicProxy.IInterceptor[])
  name: SelectInterceptors(Type, MethodInfo, IInterceptor[])
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.yml
  commentId: M:WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Castle.DynamicProxy.IInterceptor[])
  name.vb: SelectInterceptors(Type, MethodInfo, IInterceptor())
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors(System.Type, System.Reflection.MethodInfo, Castle.DynamicProxy.IInterceptor[])
  fullName.vb: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors(System.Type, System.Reflection.MethodInfo, Castle.DynamicProxy.IInterceptor())
  nameWithType: FluentAspectInterceptorSelector.SelectInterceptors(Type, MethodInfo, IInterceptor[])
  nameWithType.vb: FluentAspectInterceptorSelector.SelectInterceptors(Type, MethodInfo, IInterceptor())
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors*
  name: SelectInterceptors
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.yml
  commentId: Overload:WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectInterceptorSelector.SelectInterceptors
  nameWithType: FluentAspectInterceptorSelector.SelectInterceptors
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension
  name: FluentAspectOptionsExtension
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.yml
  commentId: T:WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension
  nameWithType: FluentAspectOptionsExtension
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: UseCastleProxy(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.yml
  commentId: M:WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtension.UseCastleProxy(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy*
  name: UseCastleProxy
  href: api/WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.yml
  commentId: Overload:WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.Castle.FluentAspectOptionsExtension.UseCastleProxy
  nameWithType: FluentAspectOptionsExtension.UseCastleProxy
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory
  name: DefaultProxyFactory
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: T:WeihanLi.Common.Aspect.DefaultProxyFactory
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory
  nameWithType: DefaultProxyFactory
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.#ctor(WeihanLi.Common.Aspect.IProxyTypeFactory,System.IServiceProvider)
  name: DefaultProxyFactory(IProxyTypeFactory, IServiceProvider?)
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyFactory.#ctor(WeihanLi.Common.Aspect.IProxyTypeFactory,System.IServiceProvider)
  name.vb: New(IProxyTypeFactory, IServiceProvider)
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.DefaultProxyFactory(WeihanLi.Common.Aspect.IProxyTypeFactory, System.IServiceProvider?)
  fullName.vb: WeihanLi.Common.Aspect.DefaultProxyFactory.New(WeihanLi.Common.Aspect.IProxyTypeFactory, System.IServiceProvider)
  nameWithType: DefaultProxyFactory.DefaultProxyFactory(IProxyTypeFactory, IServiceProvider?)
  nameWithType.vb: DefaultProxyFactory.New(IProxyTypeFactory, IServiceProvider)
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.#ctor*
  name: DefaultProxyFactory
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.DefaultProxyFactory.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.DefaultProxyFactory
  fullName.vb: WeihanLi.Common.Aspect.DefaultProxyFactory.New
  nameWithType: DefaultProxyFactory.DefaultProxyFactory
  nameWithType.vb: DefaultProxyFactory.New
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type,System.Object[])
  name: CreateProxy(Type, object?[])
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type,System.Object[])
  name.vb: CreateProxy(Type, Object())
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type, object?[])
  fullName.vb: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type, Object())
  nameWithType: DefaultProxyFactory.CreateProxy(Type, object?[])
  nameWithType.vb: DefaultProxyFactory.CreateProxy(Type, Object())
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type,System.Type,System.Object[])
  name: CreateProxy(Type, Type, params object?[])
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type,System.Type,System.Object[])
  name.vb: CreateProxy(Type, Type, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type, System.Type, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy(System.Type, System.Type, ParamArray Object())
  nameWithType: DefaultProxyFactory.CreateProxy(Type, Type, params object?[])
  nameWithType.vb: DefaultProxyFactory.CreateProxy(Type, Type, ParamArray Object())
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy*
  name: CreateProxy
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxy
  nameWithType: DefaultProxyFactory.CreateProxy
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget(System.Type,System.Object,System.Object[])
  name: CreateProxyWithTarget(Type, object, object?[])
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget(System.Type,System.Object,System.Object[])
  name.vb: CreateProxyWithTarget(Type, Object, Object())
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget(System.Type, object, object?[])
  fullName.vb: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget(System.Type, Object, Object())
  nameWithType: DefaultProxyFactory.CreateProxyWithTarget(Type, object, object?[])
  nameWithType.vb: DefaultProxyFactory.CreateProxyWithTarget(Type, Object, Object())
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget*
  name: CreateProxyWithTarget
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.CreateProxyWithTarget
  nameWithType: DefaultProxyFactory.CreateProxyWithTarget
- uid: WeihanLi.Common.Aspect.DefaultProxyFactory.Instance
  name: Instance
  href: api/WeihanLi.Common.Aspect.DefaultProxyFactory.yml
  commentId: F:WeihanLi.Common.Aspect.DefaultProxyFactory.Instance
  fullName: WeihanLi.Common.Aspect.DefaultProxyFactory.Instance
  nameWithType: DefaultProxyFactory.Instance
- uid: WeihanLi.Common.Aspect.DefaultProxyTypeFactory
  name: DefaultProxyTypeFactory
  href: api/WeihanLi.Common.Aspect.DefaultProxyTypeFactory.yml
  commentId: T:WeihanLi.Common.Aspect.DefaultProxyTypeFactory
  fullName: WeihanLi.Common.Aspect.DefaultProxyTypeFactory
  nameWithType: DefaultProxyTypeFactory
- uid: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type,System.Type)
  name: CreateProxyType(Type, Type)
  href: api/WeihanLi.Common.Aspect.DefaultProxyTypeFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type,System.Type)
  fullName: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type, System.Type)
  nameWithType: DefaultProxyTypeFactory.CreateProxyType(Type, Type)
- uid: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type)
  name: CreateProxyType(Type)
  href: api/WeihanLi.Common.Aspect.DefaultProxyTypeFactory.yml
  commentId: M:WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type)
  fullName: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType(System.Type)
  nameWithType: DefaultProxyTypeFactory.CreateProxyType(Type)
- uid: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType*
  name: CreateProxyType
  href: api/WeihanLi.Common.Aspect.DefaultProxyTypeFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.CreateProxyType
  nameWithType: DefaultProxyTypeFactory.CreateProxyType
- uid: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.Instance
  name: Instance
  href: api/WeihanLi.Common.Aspect.DefaultProxyTypeFactory.yml
  commentId: F:WeihanLi.Common.Aspect.DefaultProxyTypeFactory.Instance
  fullName: WeihanLi.Common.Aspect.DefaultProxyTypeFactory.Instance
  nameWithType: DefaultProxyTypeFactory.Instance
- uid: WeihanLi.Common.Aspect.DelegateInterceptor
  name: DelegateInterceptor
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.DelegateInterceptor
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor
  nameWithType: DelegateInterceptor
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.#ctor(System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: DelegateInterceptor(Func<IInvocation, Func<Task>, Task>)
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.DelegateInterceptor.#ctor(System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: New(Func(Of IInvocation, Func(Of Task), Task))
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.DelegateInterceptor(System.Func<WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.DelegateInterceptor.New(System.Func(Of WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: DelegateInterceptor.DelegateInterceptor(Func<IInvocation, Func<Task>, Task>)
  nameWithType.vb: DelegateInterceptor.New(Func(Of IInvocation, Func(Of Task), Task))
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.#ctor*
  name: DelegateInterceptor
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.DelegateInterceptor.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.DelegateInterceptor
  fullName.vb: WeihanLi.Common.Aspect.DelegateInterceptor.New
  nameWithType: DelegateInterceptor.DelegateInterceptor
  nameWithType.vb: DelegateInterceptor.New
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate(System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: FromDelegate(Func<IInvocation, Func<Task>, Task>)
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate(System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: FromDelegate(Func(Of IInvocation, Func(Of Task), Task))
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate(System.Func<WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate(System.Func(Of WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: DelegateInterceptor.FromDelegate(Func<IInvocation, Func<Task>, Task>)
  nameWithType.vb: DelegateInterceptor.FromDelegate(Func(Of IInvocation, Func(Of Task), Task))
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate*
  name: FromDelegate
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.FromDelegate
  nameWithType: DelegateInterceptor.FromDelegate
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name: Invoke(IInvocation, Func<Task>)
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.DelegateInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name.vb: Invoke(IInvocation, Func(Of Task))
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.DelegateInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task))
  nameWithType: DelegateInterceptor.Invoke(IInvocation, Func<Task>)
  nameWithType.vb: DelegateInterceptor.Invoke(IInvocation, Func(Of Task))
- uid: WeihanLi.Common.Aspect.DelegateInterceptor.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.DelegateInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.DelegateInterceptor.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.DelegateInterceptor.Invoke
  nameWithType: DelegateInterceptor.Invoke
- uid: WeihanLi.Common.Aspect.FluentAspectOptions
  name: FluentAspectOptions
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: T:WeihanLi.Common.Aspect.FluentAspectOptions
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions
  nameWithType: FluentAspectOptions
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers
  name: Enrichers
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: P:WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers
  nameWithType: FluentAspectOptions.Enrichers
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers*
  name: Enrichers
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.Enrichers
  nameWithType: FluentAspectOptions.Enrichers
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptionConfigurations
  name: InterceptionConfigurations
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: F:WeihanLi.Common.Aspect.FluentAspectOptions.InterceptionConfigurations
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptionConfigurations
  nameWithType: FluentAspectOptions.InterceptionConfigurations
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver
  name: InterceptorResolver
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: P:WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver
  nameWithType: FluentAspectOptions.InterceptorResolver
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver*
  name: InterceptorResolver
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.InterceptorResolver
  nameWithType: FluentAspectOptions.InterceptorResolver
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations
  name: NoInterceptionConfigurations
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: P:WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations
  nameWithType: FluentAspectOptions.NoInterceptionConfigurations
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations*
  name: NoInterceptionConfigurations
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.NoInterceptionConfigurations
  nameWithType: FluentAspectOptions.NoInterceptionConfigurations
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory
  name: ProxyFactory
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: P:WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory
  nameWithType: FluentAspectOptions.ProxyFactory
- uid: WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory*
  name: ProxyFactory
  href: api/WeihanLi.Common.Aspect.FluentAspectOptions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptions.ProxyFactory
  nameWithType: FluentAspectOptions.ProxyFactory
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions
  name: FluentAspectOptionsExtensions
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions
  nameWithType: FluentAspectOptionsExtensions
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean})
  name: Intercept(FluentAspectOptions, Func<IInvocation, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean})
  name.vb: Intercept(FluentAspectOptions, Func(Of IInvocation, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<WeihanLi.Common.Aspect.IInvocation, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Boolean))
  nameWithType: FluentAspectOptionsExtensions.Intercept(FluentAspectOptions, Func<IInvocation, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.Intercept(FluentAspectOptions, Func(Of IInvocation, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept*
  name: Intercept
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.Intercept
  nameWithType: FluentAspectOptionsExtensions.Intercept
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: InterceptAll(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.InterceptAll(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll*
  name: InterceptAll
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptAll
  nameWithType: FluentAspectOptionsExtensions.InterceptAll
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Reflection.MethodInfo,System.Boolean})
  name: InterceptMethod(FluentAspectOptions, Func<MethodInfo, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Reflection.MethodInfo,System.Boolean})
  name.vb: InterceptMethod(FluentAspectOptions, Func(Of MethodInfo, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<System.Reflection.MethodInfo, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of System.Reflection.MethodInfo, Boolean))
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod(FluentAspectOptions, Func<MethodInfo, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(FluentAspectOptions, Func(Of MethodInfo, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name: InterceptMethod(FluentAspectOptions, MethodInfo)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod(FluentAspectOptions, MethodInfo)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod*
  name: InterceptMethod
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Action{``0}})
  name: InterceptMethod<T>(FluentAspectOptions, Expression<Action<T>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Action{``0}})
  name.vb: InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Action(Of T)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Action<T>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Action(Of T)))
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod<T>(FluentAspectOptions, Expression<Action<T>>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Action(Of T)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: InterceptMethod<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{System.Reflection.MethodInfo,System.Boolean}})
  name: InterceptMethod<T>(FluentAspectOptions, Expression<Func<MethodInfo, bool>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{System.Reflection.MethodInfo,System.Boolean}})
  name.vb: InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of MethodInfo, Boolean)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<System.Reflection.MethodInfo, bool>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of System.Reflection.MethodInfo, Boolean)))
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod<T>(FluentAspectOptions, Expression<Func<MethodInfo, bool>>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of MethodInfo, Boolean)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.MethodCallExpression)
  name: InterceptMethod<T>(FluentAspectOptions, MethodCallExpression)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.MethodCallExpression)
  name.vb: InterceptMethod(Of T)(FluentAspectOptions, MethodCallExpression)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.MethodCallExpression)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.MethodCallExpression)
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod<T>(FluentAspectOptions, MethodCallExpression)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(Of T)(FluentAspectOptions, MethodCallExpression)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name: InterceptMethod<T>(FluentAspectOptions, MethodInfo)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name.vb: InterceptMethod(Of T)(FluentAspectOptions, MethodInfo)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  nameWithType: FluentAspectOptionsExtensions.InterceptMethod<T>(FluentAspectOptions, MethodInfo)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptMethod(Of T)(FluentAspectOptions, MethodInfo)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter*
  name: InterceptPropertyGetter
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter
  nameWithType: FluentAspectOptionsExtensions.InterceptPropertyGetter
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: InterceptPropertyGetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: InterceptPropertyGetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertyGetter(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.InterceptPropertyGetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptPropertyGetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter*
  name: InterceptPropertySetter
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter
  nameWithType: FluentAspectOptionsExtensions.InterceptPropertySetter
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: InterceptPropertySetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: InterceptPropertySetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptPropertySetter(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.InterceptPropertySetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptPropertySetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Type,System.Boolean})
  name: InterceptType(FluentAspectOptions, Func<Type, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Type,System.Boolean})
  name.vb: InterceptType(FluentAspectOptions, Func(Of Type, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<System.Type, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of System.Type, Boolean))
  nameWithType: FluentAspectOptionsExtensions.InterceptType(FluentAspectOptions, Func<Type, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptType(FluentAspectOptions, Func(Of Type, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType*
  name: InterceptType
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType
  nameWithType: FluentAspectOptionsExtensions.InterceptType
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: InterceptType<T>(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name.vb: InterceptType(Of T)(FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType<T>(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.InterceptType(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.InterceptType<T>(FluentAspectOptions)
  nameWithType.vb: FluentAspectOptionsExtensions.InterceptType(Of T)(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean})
  name: NoIntercept(FluentAspectOptions, Func<IInvocation, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean})
  name.vb: NoIntercept(FluentAspectOptions, Func(Of IInvocation, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<WeihanLi.Common.Aspect.IInvocation, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Boolean))
  nameWithType: FluentAspectOptionsExtensions.NoIntercept(FluentAspectOptions, Func<IInvocation, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoIntercept(FluentAspectOptions, Func(Of IInvocation, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept*
  name: NoIntercept
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoIntercept
  nameWithType: FluentAspectOptionsExtensions.NoIntercept
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Reflection.MethodInfo,System.Boolean})
  name: NoInterceptMethod(FluentAspectOptions, Func<MethodInfo, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Reflection.MethodInfo,System.Boolean})
  name.vb: NoInterceptMethod(FluentAspectOptions, Func(Of MethodInfo, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<System.Reflection.MethodInfo, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of System.Reflection.MethodInfo, Boolean))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod(FluentAspectOptions, Func<MethodInfo, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(FluentAspectOptions, Func(Of MethodInfo, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name: NoInterceptMethod(FluentAspectOptions, MethodInfo)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod(FluentAspectOptions, MethodInfo)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod*
  name: NoInterceptMethod
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Action{``0}})
  name: NoInterceptMethod<T>(FluentAspectOptions, Expression<Action<T>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Action{``0}})
  name.vb: NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Action(Of T)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Action<T>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Action(Of T)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod<T>(FluentAspectOptions, Expression<Action<T>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Action(Of T)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: NoInterceptMethod<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{System.Reflection.MethodInfo,System.Boolean}})
  name: NoInterceptMethod<T>(FluentAspectOptions, Expression<Func<MethodInfo, bool>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{System.Reflection.MethodInfo,System.Boolean}})
  name.vb: NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of MethodInfo, Boolean)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<System.Reflection.MethodInfo, bool>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of System.Reflection.MethodInfo, Boolean)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod<T>(FluentAspectOptions, Expression<Func<MethodInfo, bool>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(FluentAspectOptions, Expression(Of Func(Of MethodInfo, Boolean)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.MethodCallExpression)
  name: NoInterceptMethod<T>(FluentAspectOptions, MethodCallExpression)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.MethodCallExpression)
  name.vb: NoInterceptMethod(Of T)(FluentAspectOptions, MethodCallExpression)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.MethodCallExpression)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.MethodCallExpression)
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod<T>(FluentAspectOptions, MethodCallExpression)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(FluentAspectOptions, MethodCallExpression)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name: NoInterceptMethod<T>(FluentAspectOptions, MethodInfo)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Reflection.MethodInfo)
  name.vb: NoInterceptMethod(Of T)(FluentAspectOptions, MethodInfo)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Reflection.MethodInfo)
  nameWithType: FluentAspectOptionsExtensions.NoInterceptMethod<T>(FluentAspectOptions, MethodInfo)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptMethod(Of T)(FluentAspectOptions, MethodInfo)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty*
  name: NoInterceptProperty
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty
  nameWithType: FluentAspectOptionsExtensions.NoInterceptProperty
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: NoInterceptProperty<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: NoInterceptProperty(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptProperty(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptProperty<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptProperty(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter*
  name: NoInterceptPropertyGetter
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter
  nameWithType: FluentAspectOptionsExtensions.NoInterceptPropertyGetter
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: NoInterceptPropertyGetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: NoInterceptPropertyGetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertyGetter(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptPropertyGetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptPropertyGetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter*
  name: NoInterceptPropertySetter
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter
  nameWithType: FluentAspectOptionsExtensions.NoInterceptPropertySetter
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: NoInterceptPropertySetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: NoInterceptPropertySetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter<T>(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptPropertySetter(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions, System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptPropertySetter<T>(FluentAspectOptions, Expression<Func<T, object>>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptPropertySetter(Of T)(FluentAspectOptions, Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Type,System.Boolean})
  name: NoInterceptType(FluentAspectOptions, Func<Type, bool>)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType(WeihanLi.Common.Aspect.FluentAspectOptions,System.Func{System.Type,System.Boolean})
  name.vb: NoInterceptType(FluentAspectOptions, Func(Of Type, Boolean))
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func<System.Type, bool>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType(WeihanLi.Common.Aspect.FluentAspectOptions, System.Func(Of System.Type, Boolean))
  nameWithType: FluentAspectOptionsExtensions.NoInterceptType(FluentAspectOptions, Func<Type, bool>)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptType(FluentAspectOptions, Func(Of Type, Boolean))
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType*
  name: NoInterceptType
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType
  nameWithType: FluentAspectOptionsExtensions.NoInterceptType
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: NoInterceptType<T>(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name.vb: NoInterceptType(Of T)(FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType<T>(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.NoInterceptType(Of T)(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.NoInterceptType<T>(FluentAspectOptions)
  nameWithType.vb: FluentAspectOptionsExtensions.NoInterceptType(Of T)(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver(WeihanLi.Common.Aspect.FluentAspectOptions,WeihanLi.Common.Aspect.IInterceptorResolver)
  name: UseInterceptorResolver(FluentAspectOptions, IInterceptorResolver)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver(WeihanLi.Common.Aspect.FluentAspectOptions,WeihanLi.Common.Aspect.IInterceptorResolver)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver(WeihanLi.Common.Aspect.FluentAspectOptions, WeihanLi.Common.Aspect.IInterceptorResolver)
  nameWithType: FluentAspectOptionsExtensions.UseInterceptorResolver(FluentAspectOptions, IInterceptorResolver)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver*
  name: UseInterceptorResolver
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver
  nameWithType: FluentAspectOptionsExtensions.UseInterceptorResolver
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: UseInterceptorResolver<TResolver>(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name.vb: UseInterceptorResolver(Of TResolver)(FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver<TResolver>(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseInterceptorResolver(Of TResolver)(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.UseInterceptorResolver<TResolver>(FluentAspectOptions)
  nameWithType.vb: FluentAspectOptionsExtensions.UseInterceptorResolver(Of TResolver)(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory(WeihanLi.Common.Aspect.FluentAspectOptions,WeihanLi.Common.Aspect.IProxyFactory)
  name: UseProxyFactory(FluentAspectOptions, IProxyFactory)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory(WeihanLi.Common.Aspect.FluentAspectOptions,WeihanLi.Common.Aspect.IProxyFactory)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory(WeihanLi.Common.Aspect.FluentAspectOptions, WeihanLi.Common.Aspect.IProxyFactory)
  nameWithType: FluentAspectOptionsExtensions.UseProxyFactory(FluentAspectOptions, IProxyFactory)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory*
  name: UseProxyFactory
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory
  nameWithType: FluentAspectOptionsExtensions.UseProxyFactory
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Object[])
  name: UseProxyFactory<TProxyFactory>(FluentAspectOptions, params object[])
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory``1(WeihanLi.Common.Aspect.FluentAspectOptions,System.Object[])
  name.vb: UseProxyFactory(Of TProxyFactory)(FluentAspectOptions, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory<TProxyFactory>(WeihanLi.Common.Aspect.FluentAspectOptions, params object[])
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory(Of TProxyFactory)(WeihanLi.Common.Aspect.FluentAspectOptions, ParamArray Object())
  nameWithType: FluentAspectOptionsExtensions.UseProxyFactory<TProxyFactory>(FluentAspectOptions, params object[])
  nameWithType.vb: FluentAspectOptionsExtensions.UseProxyFactory(Of TProxyFactory)(FluentAspectOptions, ParamArray Object())
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: UseProxyFactory<TProxyFactory>(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name.vb: UseProxyFactory(Of TProxyFactory)(FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory<TProxyFactory>(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.UseProxyFactory(Of TProxyFactory)(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.UseProxyFactory<TProxyFactory>(FluentAspectOptions)
  nameWithType.vb: FluentAspectOptionsExtensions.UseProxyFactory(Of TProxyFactory)(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher*
  name: WithEnricher
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher
  nameWithType: FluentAspectOptionsExtensions.WithEnricher
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher``1(WeihanLi.Common.Aspect.FluentAspectOptions,``0)
  name: WithEnricher<TEnricher>(FluentAspectOptions, TEnricher)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher``1(WeihanLi.Common.Aspect.FluentAspectOptions,``0)
  name.vb: WithEnricher(Of TEnricher)(FluentAspectOptions, TEnricher)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher<TEnricher>(WeihanLi.Common.Aspect.FluentAspectOptions, TEnricher)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher(Of TEnricher)(WeihanLi.Common.Aspect.FluentAspectOptions, TEnricher)
  nameWithType: FluentAspectOptionsExtensions.WithEnricher<TEnricher>(FluentAspectOptions, TEnricher)
  nameWithType.vb: FluentAspectOptionsExtensions.WithEnricher(Of TEnricher)(FluentAspectOptions, TEnricher)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name: WithEnricher<TEnricher>(FluentAspectOptions)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher``1(WeihanLi.Common.Aspect.FluentAspectOptions)
  name.vb: WithEnricher(Of TEnricher)(FluentAspectOptions)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher<TEnricher>(WeihanLi.Common.Aspect.FluentAspectOptions)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithEnricher(Of TEnricher)(WeihanLi.Common.Aspect.FluentAspectOptions)
  nameWithType: FluentAspectOptionsExtensions.WithEnricher<TEnricher>(FluentAspectOptions)
  nameWithType.vb: FluentAspectOptionsExtensions.WithEnricher(Of TEnricher)(FluentAspectOptions)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions,System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name: WithProperty(FluentAspectOptions, string, Func<IInvocation, object>, bool)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions,System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name.vb: WithProperty(FluentAspectOptions, String, Func(Of IInvocation, Object), Boolean)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions, string, System.Func<WeihanLi.Common.Aspect.IInvocation, object>, bool)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions, String, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Object), Boolean)
  nameWithType: FluentAspectOptionsExtensions.WithProperty(FluentAspectOptions, string, Func<IInvocation, object>, bool)
  nameWithType.vb: FluentAspectOptionsExtensions.WithProperty(FluentAspectOptions, String, Func(Of IInvocation, Object), Boolean)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions,System.String,System.Object,System.Boolean)
  name: WithProperty(FluentAspectOptions, string, object, bool)
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions,System.String,System.Object,System.Boolean)
  name.vb: WithProperty(FluentAspectOptions, String, Object, Boolean)
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions, string, object, bool)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty(WeihanLi.Common.Aspect.FluentAspectOptions, String, Object, Boolean)
  nameWithType: FluentAspectOptionsExtensions.WithProperty(FluentAspectOptions, string, object, bool)
  nameWithType.vb: FluentAspectOptionsExtensions.WithProperty(FluentAspectOptions, String, Object, Boolean)
- uid: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty*
  name: WithProperty
  href: api/WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspectOptionsExtensions.WithProperty
  nameWithType: FluentAspectOptionsExtensions.WithProperty
- uid: WeihanLi.Common.Aspect.FluentAspects
  name: FluentAspects
  href: api/WeihanLi.Common.Aspect.FluentAspects.yml
  commentId: T:WeihanLi.Common.Aspect.FluentAspects
  fullName: WeihanLi.Common.Aspect.FluentAspects
  nameWithType: FluentAspects
- uid: WeihanLi.Common.Aspect.FluentAspects.AspectOptions
  name: AspectOptions
  href: api/WeihanLi.Common.Aspect.FluentAspects.yml
  commentId: F:WeihanLi.Common.Aspect.FluentAspects.AspectOptions
  fullName: WeihanLi.Common.Aspect.FluentAspects.AspectOptions
  nameWithType: FluentAspects.AspectOptions
- uid: WeihanLi.Common.Aspect.FluentAspects.Configure(System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name: Configure(Action<FluentAspectOptions>)
  href: api/WeihanLi.Common.Aspect.FluentAspects.yml
  commentId: M:WeihanLi.Common.Aspect.FluentAspects.Configure(System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name.vb: Configure(Action(Of FluentAspectOptions))
  fullName: WeihanLi.Common.Aspect.FluentAspects.Configure(System.Action<WeihanLi.Common.Aspect.FluentAspectOptions>)
  fullName.vb: WeihanLi.Common.Aspect.FluentAspects.Configure(System.Action(Of WeihanLi.Common.Aspect.FluentAspectOptions))
  nameWithType: FluentAspects.Configure(Action<FluentAspectOptions>)
  nameWithType.vb: FluentAspects.Configure(Action(Of FluentAspectOptions))
- uid: WeihanLi.Common.Aspect.FluentAspects.Configure*
  name: Configure
  href: api/WeihanLi.Common.Aspect.FluentAspects.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentAspects.Configure
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentAspects.Configure
  nameWithType: FluentAspects.Configure
- uid: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver
  name: FluentConfigInterceptorResolver
  href: api/WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.yml
  commentId: T:WeihanLi.Common.Aspect.FluentConfigInterceptorResolver
  fullName: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver
  nameWithType: FluentConfigInterceptorResolver
- uid: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.Instance
  name: Instance
  href: api/WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.yml
  commentId: F:WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.Instance
  fullName: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.Instance
  nameWithType: FluentConfigInterceptorResolver.Instance
- uid: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  name: ResolveInterceptors(IInvocation)
  href: api/WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.yml
  commentId: M:WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  fullName: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  nameWithType: FluentConfigInterceptorResolver.ResolveInterceptors(IInvocation)
- uid: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors*
  name: ResolveInterceptors
  href: api/WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.yml
  commentId: Overload:WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.FluentConfigInterceptorResolver.ResolveInterceptors
  nameWithType: FluentConfigInterceptorResolver.ResolveInterceptors
- uid: WeihanLi.Common.Aspect.IFluentAspectsBuilder
  name: IFluentAspectsBuilder
  href: api/WeihanLi.Common.Aspect.IFluentAspectsBuilder.yml
  commentId: T:WeihanLi.Common.Aspect.IFluentAspectsBuilder
  fullName: WeihanLi.Common.Aspect.IFluentAspectsBuilder
  nameWithType: IFluentAspectsBuilder
- uid: WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services
  name: Services
  href: api/WeihanLi.Common.Aspect.IFluentAspectsBuilder.yml
  commentId: P:WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services
  fullName: WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services
  nameWithType: IFluentAspectsBuilder.Services
- uid: WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services*
  name: Services
  href: api/WeihanLi.Common.Aspect.IFluentAspectsBuilder.yml
  commentId: Overload:WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IFluentAspectsBuilder.Services
  nameWithType: IFluentAspectsBuilder.Services
- uid: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder
  name: IFluentAspectsServiceContainerBuilder
  href: api/WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.yml
  commentId: T:WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder
  fullName: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder
  nameWithType: IFluentAspectsServiceContainerBuilder
- uid: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services
  name: Services
  href: api/WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.yml
  commentId: P:WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services
  fullName: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services
  nameWithType: IFluentAspectsServiceContainerBuilder.Services
- uid: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services*
  name: Services
  href: api/WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder.Services
  nameWithType: IFluentAspectsServiceContainerBuilder.Services
- uid: WeihanLi.Common.Aspect.IInterceptionConfiguration
  name: IInterceptionConfiguration
  href: api/WeihanLi.Common.Aspect.IInterceptionConfiguration.yml
  commentId: T:WeihanLi.Common.Aspect.IInterceptionConfiguration
  fullName: WeihanLi.Common.Aspect.IInterceptionConfiguration
  nameWithType: IInterceptionConfiguration
- uid: WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors
  name: Interceptors
  href: api/WeihanLi.Common.Aspect.IInterceptionConfiguration.yml
  commentId: P:WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors
  fullName: WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors
  nameWithType: IInterceptionConfiguration.Interceptors
- uid: WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors*
  name: Interceptors
  href: api/WeihanLi.Common.Aspect.IInterceptionConfiguration.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInterceptionConfiguration.Interceptors
  nameWithType: IInterceptionConfiguration.Interceptors
- uid: WeihanLi.Common.Aspect.IInterceptor
  name: IInterceptor
  href: api/WeihanLi.Common.Aspect.IInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.IInterceptor
  fullName: WeihanLi.Common.Aspect.IInterceptor
  nameWithType: IInterceptor
- uid: WeihanLi.Common.Aspect.IInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name: Invoke(IInvocation, Func<Task>)
  href: api/WeihanLi.Common.Aspect.IInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.IInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name.vb: Invoke(IInvocation, Func(Of Task))
  fullName: WeihanLi.Common.Aspect.IInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.IInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task))
  nameWithType: IInterceptor.Invoke(IInvocation, Func<Task>)
  nameWithType.vb: IInterceptor.Invoke(IInvocation, Func(Of Task))
- uid: WeihanLi.Common.Aspect.IInterceptor.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.IInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInterceptor.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInterceptor.Invoke
  nameWithType: IInterceptor.Invoke
- uid: WeihanLi.Common.Aspect.IInterceptorResolver
  name: IInterceptorResolver
  href: api/WeihanLi.Common.Aspect.IInterceptorResolver.yml
  commentId: T:WeihanLi.Common.Aspect.IInterceptorResolver
  fullName: WeihanLi.Common.Aspect.IInterceptorResolver
  nameWithType: IInterceptorResolver
- uid: WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  name: ResolveInterceptors(IInvocation)
  href: api/WeihanLi.Common.Aspect.IInterceptorResolver.yml
  commentId: M:WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  fullName: WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors(WeihanLi.Common.Aspect.IInvocation)
  nameWithType: IInterceptorResolver.ResolveInterceptors(IInvocation)
- uid: WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors*
  name: ResolveInterceptors
  href: api/WeihanLi.Common.Aspect.IInterceptorResolver.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInterceptorResolver.ResolveInterceptors
  nameWithType: IInterceptorResolver.ResolveInterceptors
- uid: WeihanLi.Common.Aspect.IInvocation
  name: IInvocation
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: T:WeihanLi.Common.Aspect.IInvocation
  fullName: WeihanLi.Common.Aspect.IInvocation
  nameWithType: IInvocation
- uid: WeihanLi.Common.Aspect.IInvocation.Arguments
  name: Arguments
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.Arguments
  fullName: WeihanLi.Common.Aspect.IInvocation.Arguments
  nameWithType: IInvocation.Arguments
- uid: WeihanLi.Common.Aspect.IInvocation.Arguments*
  name: Arguments
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.Arguments
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.Arguments
  nameWithType: IInvocation.Arguments
- uid: WeihanLi.Common.Aspect.IInvocation.GenericArguments
  name: GenericArguments
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.GenericArguments
  fullName: WeihanLi.Common.Aspect.IInvocation.GenericArguments
  nameWithType: IInvocation.GenericArguments
- uid: WeihanLi.Common.Aspect.IInvocation.GenericArguments*
  name: GenericArguments
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.GenericArguments
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.GenericArguments
  nameWithType: IInvocation.GenericArguments
- uid: WeihanLi.Common.Aspect.IInvocation.Method
  name: Method
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.Method
  fullName: WeihanLi.Common.Aspect.IInvocation.Method
  nameWithType: IInvocation.Method
- uid: WeihanLi.Common.Aspect.IInvocation.Method*
  name: Method
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.Method
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.Method
  nameWithType: IInvocation.Method
- uid: WeihanLi.Common.Aspect.IInvocation.Properties
  name: Properties
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.Properties
  fullName: WeihanLi.Common.Aspect.IInvocation.Properties
  nameWithType: IInvocation.Properties
- uid: WeihanLi.Common.Aspect.IInvocation.Properties*
  name: Properties
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.Properties
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.Properties
  nameWithType: IInvocation.Properties
- uid: WeihanLi.Common.Aspect.IInvocation.ProxyMethod
  name: ProxyMethod
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.ProxyMethod
  fullName: WeihanLi.Common.Aspect.IInvocation.ProxyMethod
  nameWithType: IInvocation.ProxyMethod
- uid: WeihanLi.Common.Aspect.IInvocation.ProxyMethod*
  name: ProxyMethod
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.ProxyMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.ProxyMethod
  nameWithType: IInvocation.ProxyMethod
- uid: WeihanLi.Common.Aspect.IInvocation.ProxyTarget
  name: ProxyTarget
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.ProxyTarget
  fullName: WeihanLi.Common.Aspect.IInvocation.ProxyTarget
  nameWithType: IInvocation.ProxyTarget
- uid: WeihanLi.Common.Aspect.IInvocation.ProxyTarget*
  name: ProxyTarget
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.ProxyTarget
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.ProxyTarget
  nameWithType: IInvocation.ProxyTarget
- uid: WeihanLi.Common.Aspect.IInvocation.ReturnValue
  name: ReturnValue
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.ReturnValue
  fullName: WeihanLi.Common.Aspect.IInvocation.ReturnValue
  nameWithType: IInvocation.ReturnValue
- uid: WeihanLi.Common.Aspect.IInvocation.ReturnValue*
  name: ReturnValue
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.ReturnValue
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.ReturnValue
  nameWithType: IInvocation.ReturnValue
- uid: WeihanLi.Common.Aspect.IInvocation.Target
  name: Target
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: P:WeihanLi.Common.Aspect.IInvocation.Target
  fullName: WeihanLi.Common.Aspect.IInvocation.Target
  nameWithType: IInvocation.Target
- uid: WeihanLi.Common.Aspect.IInvocation.Target*
  name: Target
  href: api/WeihanLi.Common.Aspect.IInvocation.yml
  commentId: Overload:WeihanLi.Common.Aspect.IInvocation.Target
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IInvocation.Target
  nameWithType: IInvocation.Target
- uid: WeihanLi.Common.Aspect.IInvocationEnricher
  name: IInvocationEnricher
  href: api/WeihanLi.Common.Aspect.IInvocationEnricher.yml
  commentId: T:WeihanLi.Common.Aspect.IInvocationEnricher
  fullName: WeihanLi.Common.Aspect.IInvocationEnricher
  nameWithType: IInvocationEnricher
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions
  name: InterceptionConfigurationExtensions
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions
  nameWithType: InterceptionConfigurationExtensions
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: With(IInterceptionConfiguration, Func<IInvocation, Func<Task>, Task>)
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: With(IInterceptionConfiguration, Func(Of IInvocation, Func(Of Task), Task))
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration, System.Func<WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration, System.Func(Of WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: InterceptionConfigurationExtensions.With(IInterceptionConfiguration, Func<IInvocation, Func<Task>, Task>)
  nameWithType.vb: InterceptionConfigurationExtensions.With(IInterceptionConfiguration, Func(Of IInvocation, Func(Of Task), Task))
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration,WeihanLi.Common.Aspect.IInterceptor)
  name: With(IInterceptionConfiguration, IInterceptor)
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration,WeihanLi.Common.Aspect.IInterceptor)
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(WeihanLi.Common.Aspect.IInterceptionConfiguration, WeihanLi.Common.Aspect.IInterceptor)
  nameWithType: InterceptionConfigurationExtensions.With(IInterceptionConfiguration, IInterceptor)
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With*
  name: With
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With
  nameWithType: InterceptionConfigurationExtensions.With
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With``1(WeihanLi.Common.Aspect.IInterceptionConfiguration,System.Object[])
  name: With<TInterceptor>(IInterceptionConfiguration, params object?[])
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With``1(WeihanLi.Common.Aspect.IInterceptionConfiguration,System.Object[])
  name.vb: With(Of TInterceptor)(IInterceptionConfiguration, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With<TInterceptor>(WeihanLi.Common.Aspect.IInterceptionConfiguration, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(Of TInterceptor)(WeihanLi.Common.Aspect.IInterceptionConfiguration, ParamArray Object())
  nameWithType: InterceptionConfigurationExtensions.With<TInterceptor>(IInterceptionConfiguration, params object?[])
  nameWithType.vb: InterceptionConfigurationExtensions.With(Of TInterceptor)(IInterceptionConfiguration, ParamArray Object())
- uid: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With``1(WeihanLi.Common.Aspect.IInterceptionConfiguration)
  name: With<TInterceptor>(IInterceptionConfiguration)
  href: api/WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With``1(WeihanLi.Common.Aspect.IInterceptionConfiguration)
  name.vb: With(Of TInterceptor)(IInterceptionConfiguration)
  fullName: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With<TInterceptor>(WeihanLi.Common.Aspect.IInterceptionConfiguration)
  fullName.vb: WeihanLi.Common.Aspect.InterceptionConfigurationExtensions.With(Of TInterceptor)(WeihanLi.Common.Aspect.IInterceptionConfiguration)
  nameWithType: InterceptionConfigurationExtensions.With<TInterceptor>(IInterceptionConfiguration)
  nameWithType.vb: InterceptionConfigurationExtensions.With(Of TInterceptor)(IInterceptionConfiguration)
- uid: WeihanLi.Common.Aspect.InvocationEnricherExtensions
  name: InvocationEnricherExtensions
  href: api/WeihanLi.Common.Aspect.InvocationEnricherExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.InvocationEnricherExtensions
  fullName: WeihanLi.Common.Aspect.InvocationEnricherExtensions
  nameWithType: InvocationEnricherExtensions
- uid: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation,System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name: AddProperty(IInvocation, string, Func<IInvocation, object?>, bool)
  href: api/WeihanLi.Common.Aspect.InvocationEnricherExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation,System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name.vb: AddProperty(IInvocation, String, Func(Of IInvocation, Object), Boolean)
  fullName: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation, string, System.Func<WeihanLi.Common.Aspect.IInvocation, object?>, bool)
  fullName.vb: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation, String, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Object), Boolean)
  nameWithType: InvocationEnricherExtensions.AddProperty(IInvocation, string, Func<IInvocation, object?>, bool)
  nameWithType.vb: InvocationEnricherExtensions.AddProperty(IInvocation, String, Func(Of IInvocation, Object), Boolean)
- uid: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation,System.String,System.Object,System.Boolean)
  name: AddProperty(IInvocation, string, object, bool)
  href: api/WeihanLi.Common.Aspect.InvocationEnricherExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation,System.String,System.Object,System.Boolean)
  name.vb: AddProperty(IInvocation, String, Object, Boolean)
  fullName: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation, string, object, bool)
  fullName.vb: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty(WeihanLi.Common.Aspect.IInvocation, String, Object, Boolean)
  nameWithType: InvocationEnricherExtensions.AddProperty(IInvocation, string, object, bool)
  nameWithType.vb: InvocationEnricherExtensions.AddProperty(IInvocation, String, Object, Boolean)
- uid: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty*
  name: AddProperty
  href: api/WeihanLi.Common.Aspect.InvocationEnricherExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.InvocationEnricherExtensions.AddProperty
  nameWithType: InvocationEnricherExtensions.AddProperty
- uid: WeihanLi.Common.Aspect.IProxyFactory
  name: IProxyFactory
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: T:WeihanLi.Common.Aspect.IProxyFactory
  fullName: WeihanLi.Common.Aspect.IProxyFactory
  nameWithType: IProxyFactory
- uid: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type,System.Object[])
  name: CreateProxy(Type, object?[])
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type,System.Object[])
  name.vb: CreateProxy(Type, Object())
  fullName: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type, object?[])
  fullName.vb: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type, Object())
  nameWithType: IProxyFactory.CreateProxy(Type, object?[])
  nameWithType.vb: IProxyFactory.CreateProxy(Type, Object())
- uid: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type,System.Type,System.Object[])
  name: CreateProxy(Type, Type, params object?[])
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type,System.Type,System.Object[])
  name.vb: CreateProxy(Type, Type, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type, System.Type, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy(System.Type, System.Type, ParamArray Object())
  nameWithType: IProxyFactory.CreateProxy(Type, Type, params object?[])
  nameWithType.vb: IProxyFactory.CreateProxy(Type, Type, ParamArray Object())
- uid: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy*
  name: CreateProxy
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.IProxyFactory.CreateProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IProxyFactory.CreateProxy
  nameWithType: IProxyFactory.CreateProxy
- uid: WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget(System.Type,System.Object,System.Object[])
  name: CreateProxyWithTarget(Type, object, object?[])
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: M:WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget(System.Type,System.Object,System.Object[])
  name.vb: CreateProxyWithTarget(Type, Object, Object())
  fullName: WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget(System.Type, object, object?[])
  fullName.vb: WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget(System.Type, Object, Object())
  nameWithType: IProxyFactory.CreateProxyWithTarget(Type, object, object?[])
  nameWithType.vb: IProxyFactory.CreateProxyWithTarget(Type, Object, Object())
- uid: WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget*
  name: CreateProxyWithTarget
  href: api/WeihanLi.Common.Aspect.IProxyFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IProxyFactory.CreateProxyWithTarget
  nameWithType: IProxyFactory.CreateProxyWithTarget
- uid: WeihanLi.Common.Aspect.IProxyTypeFactory
  name: IProxyTypeFactory
  href: api/WeihanLi.Common.Aspect.IProxyTypeFactory.yml
  commentId: T:WeihanLi.Common.Aspect.IProxyTypeFactory
  fullName: WeihanLi.Common.Aspect.IProxyTypeFactory
  nameWithType: IProxyTypeFactory
- uid: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type,System.Type)
  name: CreateProxyType(Type, Type)
  href: api/WeihanLi.Common.Aspect.IProxyTypeFactory.yml
  commentId: M:WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type,System.Type)
  fullName: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type, System.Type)
  nameWithType: IProxyTypeFactory.CreateProxyType(Type, Type)
- uid: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type)
  name: CreateProxyType(Type)
  href: api/WeihanLi.Common.Aspect.IProxyTypeFactory.yml
  commentId: M:WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type)
  fullName: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType(System.Type)
  nameWithType: IProxyTypeFactory.CreateProxyType(Type)
- uid: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType*
  name: CreateProxyType
  href: api/WeihanLi.Common.Aspect.IProxyTypeFactory.yml
  commentId: Overload:WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.IProxyTypeFactory.CreateProxyType
  nameWithType: IProxyTypeFactory.CreateProxyType
- uid: WeihanLi.Common.Aspect.NoIntercept
  name: NoIntercept
  href: api/WeihanLi.Common.Aspect.NoIntercept.yml
  commentId: T:WeihanLi.Common.Aspect.NoIntercept
  fullName: WeihanLi.Common.Aspect.NoIntercept
  nameWithType: NoIntercept
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher
  name: PropertyInvocationEnricher
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: T:WeihanLi.Common.Aspect.PropertyInvocationEnricher
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher
  nameWithType: PropertyInvocationEnricher
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name: PropertyInvocationEnricher(string, Func<IInvocation, object>, bool)
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: M:WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Boolean)
  name.vb: New(String, Func(Of IInvocation, Object), Boolean)
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.PropertyInvocationEnricher(string, System.Func<WeihanLi.Common.Aspect.IInvocation, object>, bool)
  fullName.vb: WeihanLi.Common.Aspect.PropertyInvocationEnricher.New(String, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Object), Boolean)
  nameWithType: PropertyInvocationEnricher.PropertyInvocationEnricher(string, Func<IInvocation, object>, bool)
  nameWithType.vb: PropertyInvocationEnricher.New(String, Func(Of IInvocation, Object), Boolean)
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean},System.Boolean)
  name: PropertyInvocationEnricher(string, Func<IInvocation, object>, Func<IInvocation, bool>, bool)
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: M:WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Func{WeihanLi.Common.Aspect.IInvocation,System.Object},System.Func{WeihanLi.Common.Aspect.IInvocation,System.Boolean},System.Boolean)
  name.vb: New(String, Func(Of IInvocation, Object), Func(Of IInvocation, Boolean), Boolean)
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.PropertyInvocationEnricher(string, System.Func<WeihanLi.Common.Aspect.IInvocation, object>, System.Func<WeihanLi.Common.Aspect.IInvocation, bool>, bool)
  fullName.vb: WeihanLi.Common.Aspect.PropertyInvocationEnricher.New(String, System.Func(Of WeihanLi.Common.Aspect.IInvocation, Object), System.Func(Of WeihanLi.Common.Aspect.IInvocation, Boolean), Boolean)
  nameWithType: PropertyInvocationEnricher.PropertyInvocationEnricher(string, Func<IInvocation, object>, Func<IInvocation, bool>, bool)
  nameWithType.vb: PropertyInvocationEnricher.New(String, Func(Of IInvocation, Object), Func(Of IInvocation, Boolean), Boolean)
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Object,System.Boolean)
  name: PropertyInvocationEnricher(string, object, bool)
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: M:WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor(System.String,System.Object,System.Boolean)
  name.vb: New(String, Object, Boolean)
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.PropertyInvocationEnricher(string, object, bool)
  fullName.vb: WeihanLi.Common.Aspect.PropertyInvocationEnricher.New(String, Object, Boolean)
  nameWithType: PropertyInvocationEnricher.PropertyInvocationEnricher(string, object, bool)
  nameWithType.vb: PropertyInvocationEnricher.New(String, Object, Boolean)
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor*
  name: PropertyInvocationEnricher
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: Overload:WeihanLi.Common.Aspect.PropertyInvocationEnricher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.PropertyInvocationEnricher
  fullName.vb: WeihanLi.Common.Aspect.PropertyInvocationEnricher.New
  nameWithType: PropertyInvocationEnricher.PropertyInvocationEnricher
  nameWithType.vb: PropertyInvocationEnricher.New
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction
  name: EnrichAction
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: P:WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction
  nameWithType: PropertyInvocationEnricher.EnrichAction
- uid: WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction*
  name: EnrichAction
  href: api/WeihanLi.Common.Aspect.PropertyInvocationEnricher.yml
  commentId: Overload:WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.PropertyInvocationEnricher.EnrichAction
  nameWithType: PropertyInvocationEnricher.EnrichAction
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions
  name: ProxyFactoryExtensions
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.ProxyFactoryExtensions
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions
  nameWithType: ProxyFactoryExtensions
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy*
  name: CreateClassProxy
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy
  nameWithType: ProxyFactoryExtensions.CreateClassProxy
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name: CreateClassProxy<TClass>(IProxyFactory, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name.vb: CreateClassProxy(Of TClass)(IProxyFactory, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy<TClass>(WeihanLi.Common.Aspect.IProxyFactory, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy(Of TClass)(WeihanLi.Common.Aspect.IProxyFactory, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateClassProxy<TClass>(IProxyFactory, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateClassProxy(Of TClass)(IProxyFactory, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name: CreateClassProxy<TClass, TImplement>(IProxyFactory, TImplement)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name.vb: CreateClassProxy(Of TClass, TImplement)(IProxyFactory, TImplement)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy<TClass, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy(Of TClass, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  nameWithType: ProxyFactoryExtensions.CreateClassProxy<TClass, TImplement>(IProxyFactory, TImplement)
  nameWithType.vb: ProxyFactoryExtensions.CreateClassProxy(Of TClass, TImplement)(IProxyFactory, TImplement)
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name: CreateClassProxy<TClass, TImplement>(IProxyFactory, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name.vb: CreateClassProxy(Of TClass, TImplement)(IProxyFactory, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy<TClass, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateClassProxy(Of TClass, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateClassProxy<TClass, TImplement>(IProxyFactory, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateClassProxy(Of TClass, TImplement)(IProxyFactory, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy*
  name: CreateInterfaceProxy
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy
  nameWithType: ProxyFactoryExtensions.CreateInterfaceProxy
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``1(WeihanLi.Common.Aspect.IProxyFactory)
  name: CreateInterfaceProxy<TInterface>(IProxyFactory)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``1(WeihanLi.Common.Aspect.IProxyFactory)
  name.vb: CreateInterfaceProxy(Of TInterface)(IProxyFactory)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy<TInterface>(WeihanLi.Common.Aspect.IProxyFactory)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface)(WeihanLi.Common.Aspect.IProxyFactory)
  nameWithType: ProxyFactoryExtensions.CreateInterfaceProxy<TInterface>(IProxyFactory)
  nameWithType.vb: ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface)(IProxyFactory)
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name: CreateInterfaceProxy<TInterface, TImplement>(IProxyFactory, TImplement)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name.vb: CreateInterfaceProxy(Of TInterface, TImplement)(IProxyFactory, TImplement)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy<TInterface, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  nameWithType: ProxyFactoryExtensions.CreateInterfaceProxy<TInterface, TImplement>(IProxyFactory, TImplement)
  nameWithType.vb: ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface, TImplement)(IProxyFactory, TImplement)
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name: CreateInterfaceProxy<TInterface, TImplement>(IProxyFactory, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name.vb: CreateInterfaceProxy(Of TInterface, TImplement)(IProxyFactory, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy<TInterface, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateInterfaceProxy<TInterface, TImplement>(IProxyFactory, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateInterfaceProxy(Of TInterface, TImplement)(IProxyFactory, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(WeihanLi.Common.Aspect.IProxyFactory,System.Type,System.Object[])
  name: CreateProxy(IProxyFactory, Type, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(WeihanLi.Common.Aspect.IProxyFactory,System.Type,System.Object[])
  name.vb: CreateProxy(IProxyFactory, Type, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(WeihanLi.Common.Aspect.IProxyFactory, System.Type, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(WeihanLi.Common.Aspect.IProxyFactory, System.Type, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateProxy(IProxyFactory, Type, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateProxy(IProxyFactory, Type, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy*
  name: CreateProxy
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy
  nameWithType: ProxyFactoryExtensions.CreateProxy
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name: CreateProxy<TService>(IProxyFactory, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name.vb: CreateProxy(Of TService)(IProxyFactory, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy<TService>(WeihanLi.Common.Aspect.IProxyFactory, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(Of TService)(WeihanLi.Common.Aspect.IProxyFactory, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateProxy<TService>(IProxyFactory, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateProxy(Of TService)(IProxyFactory, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name: CreateProxy<TService, TImplement>(IProxyFactory, params object?[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy``2(WeihanLi.Common.Aspect.IProxyFactory,System.Object[])
  name.vb: CreateProxy(Of TService, TImplement)(IProxyFactory, ParamArray Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy<TService, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, params object?[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxy(Of TService, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, ParamArray Object())
  nameWithType: ProxyFactoryExtensions.CreateProxy<TService, TImplement>(IProxyFactory, params object?[])
  nameWithType.vb: ProxyFactoryExtensions.CreateProxy(Of TService, TImplement)(IProxyFactory, ParamArray Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(WeihanLi.Common.Aspect.IProxyFactory,System.Type,System.Object)
  name: CreateProxyWithTarget(IProxyFactory, Type, object)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(WeihanLi.Common.Aspect.IProxyFactory,System.Type,System.Object)
  name.vb: CreateProxyWithTarget(IProxyFactory, Type, Object)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(WeihanLi.Common.Aspect.IProxyFactory, System.Type, object)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(WeihanLi.Common.Aspect.IProxyFactory, System.Type, Object)
  nameWithType: ProxyFactoryExtensions.CreateProxyWithTarget(IProxyFactory, Type, object)
  nameWithType.vb: ProxyFactoryExtensions.CreateProxyWithTarget(IProxyFactory, Type, Object)
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget*
  name: CreateProxyWithTarget
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget
  nameWithType: ProxyFactoryExtensions.CreateProxyWithTarget
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object,System.Object[])
  name: CreateProxyWithTarget<TService>(IProxyFactory, object, object[])
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object,System.Object[])
  name.vb: CreateProxyWithTarget(Of TService)(IProxyFactory, Object, Object())
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget<TService>(WeihanLi.Common.Aspect.IProxyFactory, object, object[])
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(Of TService)(WeihanLi.Common.Aspect.IProxyFactory, Object, Object())
  nameWithType: ProxyFactoryExtensions.CreateProxyWithTarget<TService>(IProxyFactory, object, object[])
  nameWithType.vb: ProxyFactoryExtensions.CreateProxyWithTarget(Of TService)(IProxyFactory, Object, Object())
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object)
  name: CreateProxyWithTarget<TService>(IProxyFactory, object)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``1(WeihanLi.Common.Aspect.IProxyFactory,System.Object)
  name.vb: CreateProxyWithTarget(Of TService)(IProxyFactory, Object)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget<TService>(WeihanLi.Common.Aspect.IProxyFactory, object)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(Of TService)(WeihanLi.Common.Aspect.IProxyFactory, Object)
  nameWithType: ProxyFactoryExtensions.CreateProxyWithTarget<TService>(IProxyFactory, object)
  nameWithType.vb: ProxyFactoryExtensions.CreateProxyWithTarget(Of TService)(IProxyFactory, Object)
- uid: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name: CreateProxyWithTarget<TService, TImplement>(IProxyFactory, TImplement)
  href: api/WeihanLi.Common.Aspect.ProxyFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget``2(WeihanLi.Common.Aspect.IProxyFactory,``1)
  name.vb: CreateProxyWithTarget(Of TService, TImplement)(IProxyFactory, TImplement)
  fullName: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget<TService, TImplement>(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  fullName.vb: WeihanLi.Common.Aspect.ProxyFactoryExtensions.CreateProxyWithTarget(Of TService, TImplement)(WeihanLi.Common.Aspect.IProxyFactory, TImplement)
  nameWithType: ProxyFactoryExtensions.CreateProxyWithTarget<TService, TImplement>(IProxyFactory, TImplement)
  nameWithType.vb: ProxyFactoryExtensions.CreateProxyWithTarget(Of TService, TImplement)(IProxyFactory, TImplement)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions
  name: ServiceCollectionExtensions
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.ServiceCollectionExtensions
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name: AddFluentAspects(IServiceCollection, Action<FluentAspectOptions>)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name.vb: AddFluentAspects(IServiceCollection, Action(Of FluentAspectOptions))
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<WeihanLi.Common.Aspect.FluentAspectOptions>)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of WeihanLi.Common.Aspect.FluentAspectOptions))
  nameWithType: ServiceCollectionExtensions.AddFluentAspects(IServiceCollection, Action<FluentAspectOptions>)
  nameWithType.vb: ServiceCollectionExtensions.AddFluentAspects(IServiceCollection, Action(Of FluentAspectOptions))
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddFluentAspects(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddFluentAspects(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects*
  name: AddFluentAspects
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddFluentAspects
  nameWithType: ServiceCollectionExtensions.AddFluentAspects
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService*
  name: AddProxyService
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService
  nameWithType: ServiceCollectionExtensions.AddProxyService
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddProxyService<TService>(IServiceCollection, ServiceLifetime)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: AddProxyService(Of TService)(IServiceCollection, ServiceLifetime)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddProxyService<TService>(IServiceCollection, ServiceLifetime)
  nameWithType.vb: ServiceCollectionExtensions.AddProxyService(Of TService)(IServiceCollection, ServiceLifetime)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddProxyService<TService, TImplement>(IServiceCollection, ServiceLifetime)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: AddProxyService(Of TService, TImplement)(IServiceCollection, ServiceLifetime)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService<TService, TImplement>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddProxyService(Of TService, TImplement)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddProxyService<TService, TImplement>(IServiceCollection, ServiceLifetime)
  nameWithType.vb: ServiceCollectionExtensions.AddProxyService(Of TService, TImplement)(IServiceCollection, ServiceLifetime)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy*
  name: AddScopedProxy
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy
  nameWithType: ServiceCollectionExtensions.AddScopedProxy
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddScopedProxy<TService>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddScopedProxy(Of TService)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddScopedProxy<TService>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddScopedProxy(Of TService)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddScopedProxy<TService, TImplement>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddScopedProxy(Of TService, TImplement)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy<TService, TImplement>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddScopedProxy(Of TService, TImplement)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddScopedProxy<TService, TImplement>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddScopedProxy(Of TService, TImplement)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy*
  name: AddSingletonProxy
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy
  nameWithType: ServiceCollectionExtensions.AddSingletonProxy
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddSingletonProxy<TService>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddSingletonProxy(Of TService)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddSingletonProxy<TService>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddSingletonProxy(Of TService)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddSingletonProxy<TService, TImplement>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddSingletonProxy(Of TService, TImplement)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy<TService, TImplement>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddSingletonProxy(Of TService, TImplement)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddSingletonProxy<TService, TImplement>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddSingletonProxy(Of TService, TImplement)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy*
  name: AddTransientProxy
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy
  nameWithType: ServiceCollectionExtensions.AddTransientProxy
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddTransientProxy<TService>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddTransientProxy(Of TService)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddTransientProxy<TService>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddTransientProxy(Of TService)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddTransientProxy<TService, TImplement>(IServiceCollection)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddTransientProxy(Of TService, TImplement)(IServiceCollection)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy<TService, TImplement>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.AddTransientProxy(Of TService, TImplement)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddTransientProxy<TService, TImplement>(IServiceCollection)
  nameWithType.vb: ServiceCollectionExtensions.AddTransientProxy(Of TService, TImplement)(IServiceCollection)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions},System.Action{WeihanLi.Common.Aspect.IFluentAspectsBuilder},System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}},Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
  name: BuildFluentAspectsProvider(IServiceCollection, Action<FluentAspectOptions>?, Action<IFluentAspectsBuilder>?, Expression<Func<Type, bool>>?, ServiceProviderOptions?)
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions},System.Action{WeihanLi.Common.Aspect.IFluentAspectsBuilder},System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}},Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
  name.vb: BuildFluentAspectsProvider(IServiceCollection, Action(Of FluentAspectOptions), Action(Of IFluentAspectsBuilder), Expression(Of Func(Of Type, Boolean)), ServiceProviderOptions)
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<WeihanLi.Common.Aspect.FluentAspectOptions>?, System.Action<WeihanLi.Common.Aspect.IFluentAspectsBuilder>?, System.Linq.Expressions.Expression<System.Func<System.Type, bool>>?, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions?)
  fullName.vb: WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of WeihanLi.Common.Aspect.FluentAspectOptions), System.Action(Of WeihanLi.Common.Aspect.IFluentAspectsBuilder), System.Linq.Expressions.Expression(Of System.Func(Of System.Type, Boolean)), Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)
  nameWithType: ServiceCollectionExtensions.BuildFluentAspectsProvider(IServiceCollection, Action<FluentAspectOptions>?, Action<IFluentAspectsBuilder>?, Expression<Func<Type, bool>>?, ServiceProviderOptions?)
  nameWithType.vb: ServiceCollectionExtensions.BuildFluentAspectsProvider(IServiceCollection, Action(Of FluentAspectOptions), Action(Of IFluentAspectsBuilder), Expression(Of Func(Of Type, Boolean)), ServiceProviderOptions)
- uid: WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider*
  name: BuildFluentAspectsProvider
  href: api/WeihanLi.Common.Aspect.ServiceCollectionExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceCollectionExtensions.BuildFluentAspectsProvider
  nameWithType: ServiceCollectionExtensions.BuildFluentAspectsProvider
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions
  name: ServiceContainerBuilderExtensions
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: T:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions
  nameWithType: ServiceContainerBuilderExtensions
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name: AddFluentAspects(IServiceContainerBuilder, Action<FluentAspectOptions>)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions})
  name.vb: AddFluentAspects(IServiceContainerBuilder, Action(Of FluentAspectOptions))
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Action<WeihanLi.Common.Aspect.FluentAspectOptions>)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Action(Of WeihanLi.Common.Aspect.FluentAspectOptions))
  nameWithType: ServiceContainerBuilderExtensions.AddFluentAspects(IServiceContainerBuilder, Action<FluentAspectOptions>)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddFluentAspects(IServiceContainerBuilder, Action(Of FluentAspectOptions))
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddFluentAspects(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddFluentAspects(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects*
  name: AddFluentAspects
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddFluentAspects
  nameWithType: ServiceContainerBuilderExtensions.AddFluentAspects
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService*
  name: AddProxyService
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService
  nameWithType: ServiceContainerBuilderExtensions.AddProxyService
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: AddProxyService<TService>(IServiceContainerBuilder, ServiceLifetime)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: AddProxyService(Of TService)(IServiceContainerBuilder, ServiceLifetime)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceContainerBuilderExtensions.AddProxyService<TService>(IServiceContainerBuilder, ServiceLifetime)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddProxyService(Of TService)(IServiceContainerBuilder, ServiceLifetime)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: AddProxyService<TService, TImplement>(IServiceContainerBuilder, ServiceLifetime)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: AddProxyService(Of TService, TImplement)(IServiceContainerBuilder, ServiceLifetime)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService<TService, TImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddProxyService(Of TService, TImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceContainerBuilderExtensions.AddProxyService<TService, TImplement>(IServiceContainerBuilder, ServiceLifetime)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddProxyService(Of TService, TImplement)(IServiceContainerBuilder, ServiceLifetime)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy*
  name: AddScopedProxy
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy
  nameWithType: ServiceContainerBuilderExtensions.AddScopedProxy
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddScopedProxy<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddScopedProxy(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddScopedProxy<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddScopedProxy(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddScopedProxy<TService, TImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddScopedProxy(Of TService, TImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy<TService, TImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddScopedProxy(Of TService, TImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddScopedProxy<TService, TImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddScopedProxy(Of TService, TImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy*
  name: AddSingletonProxy
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy
  nameWithType: ServiceContainerBuilderExtensions.AddSingletonProxy
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddSingletonProxy<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddSingletonProxy(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddSingletonProxy<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingletonProxy(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddSingletonProxy<TService, TImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddSingletonProxy(Of TService, TImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy<TService, TImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddSingletonProxy(Of TService, TImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddSingletonProxy<TService, TImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingletonProxy(Of TService, TImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy*
  name: AddTransientProxy
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy
  nameWithType: ServiceContainerBuilderExtensions.AddTransientProxy
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddTransientProxy<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddTransientProxy(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddTransientProxy<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddTransientProxy(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddTransientProxy<TService, TImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddTransientProxy(Of TService, TImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy<TService, TImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.AddTransientProxy(Of TService, TImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddTransientProxy<TService, TImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddTransientProxy(Of TService, TImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions},System.Action{WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder},System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}})
  name: BuildFluentAspectsContainer(IServiceContainerBuilder, Action<FluentAspectOptions>?, Action<IFluentAspectsServiceContainerBuilder>?, Expression<Func<Type, bool>>?)
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Action{WeihanLi.Common.Aspect.FluentAspectOptions},System.Action{WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder},System.Linq.Expressions.Expression{System.Func{System.Type,System.Boolean}})
  name.vb: BuildFluentAspectsContainer(IServiceContainerBuilder, Action(Of FluentAspectOptions), Action(Of IFluentAspectsServiceContainerBuilder), Expression(Of Func(Of Type, Boolean)))
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Action<WeihanLi.Common.Aspect.FluentAspectOptions>?, System.Action<WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder>?, System.Linq.Expressions.Expression<System.Func<System.Type, bool>>?)
  fullName.vb: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Action(Of WeihanLi.Common.Aspect.FluentAspectOptions), System.Action(Of WeihanLi.Common.Aspect.IFluentAspectsServiceContainerBuilder), System.Linq.Expressions.Expression(Of System.Func(Of System.Type, Boolean)))
  nameWithType: ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(IServiceContainerBuilder, Action<FluentAspectOptions>?, Action<IFluentAspectsServiceContainerBuilder>?, Expression<Func<Type, bool>>?)
  nameWithType.vb: ServiceContainerBuilderExtensions.BuildFluentAspectsContainer(IServiceContainerBuilder, Action(Of FluentAspectOptions), Action(Of IFluentAspectsServiceContainerBuilder), Expression(Of Func(Of Type, Boolean)))
- uid: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer*
  name: BuildFluentAspectsContainer
  href: api/WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.ServiceContainerBuilderExtensions.BuildFluentAspectsContainer
  nameWithType: ServiceContainerBuilderExtensions.BuildFluentAspectsContainer
- uid: WeihanLi.Common.Aspect.TryInvokeInterceptor
  name: TryInvokeInterceptor
  href: api/WeihanLi.Common.Aspect.TryInvokeInterceptor.yml
  commentId: T:WeihanLi.Common.Aspect.TryInvokeInterceptor
  fullName: WeihanLi.Common.Aspect.TryInvokeInterceptor
  nameWithType: TryInvokeInterceptor
- uid: WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name: Invoke(IInvocation, Func<Task>)
  href: api/WeihanLi.Common.Aspect.TryInvokeInterceptor.yml
  commentId: M:WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation,System.Func{System.Threading.Tasks.Task})
  name.vb: Invoke(IInvocation, Func(Of Task))
  fullName: WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke(WeihanLi.Common.Aspect.IInvocation, System.Func(Of System.Threading.Tasks.Task))
  nameWithType: TryInvokeInterceptor.Invoke(IInvocation, Func<Task>)
  nameWithType.vb: TryInvokeInterceptor.Invoke(IInvocation, Func(Of Task))
- uid: WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke*
  name: Invoke
  href: api/WeihanLi.Common.Aspect.TryInvokeInterceptor.yml
  commentId: Overload:WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke
  isSpec: "True"
  fullName: WeihanLi.Common.Aspect.TryInvokeInterceptor.Invoke
  nameWithType: TryInvokeInterceptor.Invoke
- uid: WeihanLi.Common.AsyncLock
  name: AsyncLock
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: T:WeihanLi.Common.AsyncLock
  fullName: WeihanLi.Common.AsyncLock
  nameWithType: AsyncLock
- uid: WeihanLi.Common.AsyncLock.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: M:WeihanLi.Common.AsyncLock.Dispose
  fullName: WeihanLi.Common.AsyncLock.Dispose()
  nameWithType: AsyncLock.Dispose()
- uid: WeihanLi.Common.AsyncLock.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: Overload:WeihanLi.Common.AsyncLock.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.AsyncLock.Dispose
  nameWithType: AsyncLock.Dispose
- uid: WeihanLi.Common.AsyncLock.Lock
  name: Lock()
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: M:WeihanLi.Common.AsyncLock.Lock
  fullName: WeihanLi.Common.AsyncLock.Lock()
  nameWithType: AsyncLock.Lock()
- uid: WeihanLi.Common.AsyncLock.Lock*
  name: Lock
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: Overload:WeihanLi.Common.AsyncLock.Lock
  isSpec: "True"
  fullName: WeihanLi.Common.AsyncLock.Lock
  nameWithType: AsyncLock.Lock
- uid: WeihanLi.Common.AsyncLock.LockAsync
  name: LockAsync()
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: M:WeihanLi.Common.AsyncLock.LockAsync
  fullName: WeihanLi.Common.AsyncLock.LockAsync()
  nameWithType: AsyncLock.LockAsync()
- uid: WeihanLi.Common.AsyncLock.LockAsync(System.Threading.CancellationToken)
  name: LockAsync(CancellationToken)
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: M:WeihanLi.Common.AsyncLock.LockAsync(System.Threading.CancellationToken)
  fullName: WeihanLi.Common.AsyncLock.LockAsync(System.Threading.CancellationToken)
  nameWithType: AsyncLock.LockAsync(CancellationToken)
- uid: WeihanLi.Common.AsyncLock.LockAsync(System.TimeSpan,System.Threading.CancellationToken)
  name: LockAsync(TimeSpan, CancellationToken)
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: M:WeihanLi.Common.AsyncLock.LockAsync(System.TimeSpan,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.AsyncLock.LockAsync(System.TimeSpan, System.Threading.CancellationToken)
  nameWithType: AsyncLock.LockAsync(TimeSpan, CancellationToken)
- uid: WeihanLi.Common.AsyncLock.LockAsync*
  name: LockAsync
  href: api/WeihanLi.Common.AsyncLock.yml
  commentId: Overload:WeihanLi.Common.AsyncLock.LockAsync
  isSpec: "True"
  fullName: WeihanLi.Common.AsyncLock.LockAsync
  nameWithType: AsyncLock.LockAsync
- uid: WeihanLi.Common.CacheUtil
  name: CacheUtil
  href: api/WeihanLi.Common.CacheUtil.yml
  commentId: T:WeihanLi.Common.CacheUtil
  fullName: WeihanLi.Common.CacheUtil
  nameWithType: CacheUtil
- uid: WeihanLi.Common.CacheUtil.GetTypeFields(System.Type)
  name: GetTypeFields(Type)
  href: api/WeihanLi.Common.CacheUtil.yml
  commentId: M:WeihanLi.Common.CacheUtil.GetTypeFields(System.Type)
  fullName: WeihanLi.Common.CacheUtil.GetTypeFields(System.Type)
  nameWithType: CacheUtil.GetTypeFields(Type)
- uid: WeihanLi.Common.CacheUtil.GetTypeFields*
  name: GetTypeFields
  href: api/WeihanLi.Common.CacheUtil.yml
  commentId: Overload:WeihanLi.Common.CacheUtil.GetTypeFields
  isSpec: "True"
  fullName: WeihanLi.Common.CacheUtil.GetTypeFields
  nameWithType: CacheUtil.GetTypeFields
- uid: WeihanLi.Common.CacheUtil.GetTypeProperties(System.Type)
  name: GetTypeProperties(Type)
  href: api/WeihanLi.Common.CacheUtil.yml
  commentId: M:WeihanLi.Common.CacheUtil.GetTypeProperties(System.Type)
  fullName: WeihanLi.Common.CacheUtil.GetTypeProperties(System.Type)
  nameWithType: CacheUtil.GetTypeProperties(Type)
- uid: WeihanLi.Common.CacheUtil.GetTypeProperties*
  name: GetTypeProperties
  href: api/WeihanLi.Common.CacheUtil.yml
  commentId: Overload:WeihanLi.Common.CacheUtil.GetTypeProperties
  isSpec: "True"
  fullName: WeihanLi.Common.CacheUtil.GetTypeProperties
  nameWithType: CacheUtil.GetTypeProperties
- uid: WeihanLi.Common.Compressor
  name: WeihanLi.Common.Compressor
  href: api/WeihanLi.Common.Compressor.yml
  commentId: N:WeihanLi.Common.Compressor
  fullName: WeihanLi.Common.Compressor
  nameWithType: WeihanLi.Common.Compressor
- uid: WeihanLi.Common.Compressor.GZipDataCompressor
  name: GZipDataCompressor
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: T:WeihanLi.Common.Compressor.GZipDataCompressor
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor
  nameWithType: GZipDataCompressor
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.Compress(System.Byte[])
  name: Compress(byte[])
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.GZipDataCompressor.Compress(System.Byte[])
  name.vb: Compress(Byte())
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.Compress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.GZipDataCompressor.Compress(Byte())
  nameWithType: GZipDataCompressor.Compress(byte[])
  nameWithType.vb: GZipDataCompressor.Compress(Byte())
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.Compress*
  name: Compress
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.GZipDataCompressor.Compress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.Compress
  nameWithType: GZipDataCompressor.Compress
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync(System.Byte[])
  name: CompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync(System.Byte[])
  name.vb: CompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync(Byte())
  nameWithType: GZipDataCompressor.CompressAsync(byte[])
  nameWithType.vb: GZipDataCompressor.CompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync*
  name: CompressAsync
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.CompressAsync
  nameWithType: GZipDataCompressor.CompressAsync
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.Decompress(System.Byte[])
  name: Decompress(byte[])
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.GZipDataCompressor.Decompress(System.Byte[])
  name.vb: Decompress(Byte())
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.Decompress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.GZipDataCompressor.Decompress(Byte())
  nameWithType: GZipDataCompressor.Decompress(byte[])
  nameWithType.vb: GZipDataCompressor.Decompress(Byte())
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.Decompress*
  name: Decompress
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.GZipDataCompressor.Decompress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.Decompress
  nameWithType: GZipDataCompressor.Decompress
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync(System.Byte[])
  name: DecompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync(System.Byte[])
  name.vb: DecompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync(Byte())
  nameWithType: GZipDataCompressor.DecompressAsync(byte[])
  nameWithType.vb: GZipDataCompressor.DecompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync*
  name: DecompressAsync
  href: api/WeihanLi.Common.Compressor.GZipDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.GZipDataCompressor.DecompressAsync
  nameWithType: GZipDataCompressor.DecompressAsync
- uid: WeihanLi.Common.Compressor.IDataCompressor
  name: IDataCompressor
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: T:WeihanLi.Common.Compressor.IDataCompressor
  fullName: WeihanLi.Common.Compressor.IDataCompressor
  nameWithType: IDataCompressor
- uid: WeihanLi.Common.Compressor.IDataCompressor.Compress(System.Byte[])
  name: Compress(byte[])
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.IDataCompressor.Compress(System.Byte[])
  name.vb: Compress(Byte())
  fullName: WeihanLi.Common.Compressor.IDataCompressor.Compress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.IDataCompressor.Compress(Byte())
  nameWithType: IDataCompressor.Compress(byte[])
  nameWithType.vb: IDataCompressor.Compress(Byte())
- uid: WeihanLi.Common.Compressor.IDataCompressor.Compress*
  name: Compress
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.IDataCompressor.Compress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.IDataCompressor.Compress
  nameWithType: IDataCompressor.Compress
- uid: WeihanLi.Common.Compressor.IDataCompressor.CompressAsync(System.Byte[])
  name: CompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.IDataCompressor.CompressAsync(System.Byte[])
  name.vb: CompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.IDataCompressor.CompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.IDataCompressor.CompressAsync(Byte())
  nameWithType: IDataCompressor.CompressAsync(byte[])
  nameWithType.vb: IDataCompressor.CompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.IDataCompressor.CompressAsync*
  name: CompressAsync
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.IDataCompressor.CompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.IDataCompressor.CompressAsync
  nameWithType: IDataCompressor.CompressAsync
- uid: WeihanLi.Common.Compressor.IDataCompressor.Decompress(System.Byte[])
  name: Decompress(byte[])
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.IDataCompressor.Decompress(System.Byte[])
  name.vb: Decompress(Byte())
  fullName: WeihanLi.Common.Compressor.IDataCompressor.Decompress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.IDataCompressor.Decompress(Byte())
  nameWithType: IDataCompressor.Decompress(byte[])
  nameWithType.vb: IDataCompressor.Decompress(Byte())
- uid: WeihanLi.Common.Compressor.IDataCompressor.Decompress*
  name: Decompress
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.IDataCompressor.Decompress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.IDataCompressor.Decompress
  nameWithType: IDataCompressor.Decompress
- uid: WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync(System.Byte[])
  name: DecompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync(System.Byte[])
  name.vb: DecompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync(Byte())
  nameWithType: IDataCompressor.DecompressAsync(byte[])
  nameWithType.vb: IDataCompressor.DecompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync*
  name: DecompressAsync
  href: api/WeihanLi.Common.Compressor.IDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.IDataCompressor.DecompressAsync
  nameWithType: IDataCompressor.DecompressAsync
- uid: WeihanLi.Common.Compressor.NullDataCompressor
  name: NullDataCompressor
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: T:WeihanLi.Common.Compressor.NullDataCompressor
  fullName: WeihanLi.Common.Compressor.NullDataCompressor
  nameWithType: NullDataCompressor
- uid: WeihanLi.Common.Compressor.NullDataCompressor.Compress(System.Byte[])
  name: Compress(byte[])
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.NullDataCompressor.Compress(System.Byte[])
  name.vb: Compress(Byte())
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.Compress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.NullDataCompressor.Compress(Byte())
  nameWithType: NullDataCompressor.Compress(byte[])
  nameWithType.vb: NullDataCompressor.Compress(Byte())
- uid: WeihanLi.Common.Compressor.NullDataCompressor.Compress*
  name: Compress
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.NullDataCompressor.Compress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.Compress
  nameWithType: NullDataCompressor.Compress
- uid: WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync(System.Byte[])
  name: CompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync(System.Byte[])
  name.vb: CompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync(Byte())
  nameWithType: NullDataCompressor.CompressAsync(byte[])
  nameWithType.vb: NullDataCompressor.CompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync*
  name: CompressAsync
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.CompressAsync
  nameWithType: NullDataCompressor.CompressAsync
- uid: WeihanLi.Common.Compressor.NullDataCompressor.Decompress(System.Byte[])
  name: Decompress(byte[])
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.NullDataCompressor.Decompress(System.Byte[])
  name.vb: Decompress(Byte())
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.Decompress(byte[])
  fullName.vb: WeihanLi.Common.Compressor.NullDataCompressor.Decompress(Byte())
  nameWithType: NullDataCompressor.Decompress(byte[])
  nameWithType.vb: NullDataCompressor.Decompress(Byte())
- uid: WeihanLi.Common.Compressor.NullDataCompressor.Decompress*
  name: Decompress
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.NullDataCompressor.Decompress
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.Decompress
  nameWithType: NullDataCompressor.Decompress
- uid: WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync(System.Byte[])
  name: DecompressAsync(byte[])
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: M:WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync(System.Byte[])
  name.vb: DecompressAsync(Byte())
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync(byte[])
  fullName.vb: WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync(Byte())
  nameWithType: NullDataCompressor.DecompressAsync(byte[])
  nameWithType.vb: NullDataCompressor.DecompressAsync(Byte())
- uid: WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync*
  name: DecompressAsync
  href: api/WeihanLi.Common.Compressor.NullDataCompressor.yml
  commentId: Overload:WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Compressor.NullDataCompressor.DecompressAsync
  nameWithType: NullDataCompressor.DecompressAsync
- uid: WeihanLi.Common.Data
  name: WeihanLi.Common.Data
  href: api/WeihanLi.Common.Data.yml
  commentId: N:WeihanLi.Common.Data
  fullName: WeihanLi.Common.Data
  nameWithType: WeihanLi.Common.Data
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1
  name: IReadOnlyRepository<TEntity>
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: T:WeihanLi.Common.Data.IReadOnlyRepository`1
  name.vb: IReadOnlyRepository(Of TEntity)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity)
  nameWithType: IReadOnlyRepository<TEntity>
  nameWithType.vb: IReadOnlyRepository(Of TEntity)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Count(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Count(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Count(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IReadOnlyRepository<TEntity>.Count(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Count(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Count*
  name: Count
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Count
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Count
  nameWithType: IReadOnlyRepository<TEntity>.Count
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Count
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.CountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.CountAsync*
  name: CountAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.CountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.CountAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).CountAsync
  nameWithType: IReadOnlyRepository<TEntity>.CountAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).CountAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exist(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Exist(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Exist(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Exist(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IReadOnlyRepository<TEntity>.Exist(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Exist(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Exist*
  name: Exist
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.Exist
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Exist
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Exist
  nameWithType: IReadOnlyRepository<TEntity>.Exist
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Exist
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.ExistAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: ExistAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.ExistAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: ExistAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.ExistAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).ExistAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.ExistAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).ExistAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.ExistAsync*
  name: ExistAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.ExistAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.ExistAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).ExistAsync
  nameWithType: IReadOnlyRepository<TEntity>.ExistAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).ExistAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Fetch(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Fetch(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Fetch(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Fetch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IReadOnlyRepository<TEntity>.Fetch(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Fetch(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch*
  name: Fetch
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Fetch
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Fetch
  nameWithType: IReadOnlyRepository<TEntity>.Fetch
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Fetch
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Fetch<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Fetch(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Fetch<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Fetch(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: IReadOnlyRepository<TEntity>.Fetch<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Fetch(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: FetchAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: FetchAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.FetchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).FetchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.FetchAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).FetchAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync*
  name: FetchAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.FetchAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).FetchAsync
  nameWithType: IReadOnlyRepository<TEntity>.FetchAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).FetchAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: FetchAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.FetchAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.FetchAsync<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).FetchAsync(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.FetchAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).FetchAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: LongCount(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.LongCount(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IReadOnlyRepository<TEntity>.LongCount(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).LongCount(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.LongCount*
  name: LongCount
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.LongCount
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.LongCount
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).LongCount
  nameWithType: IReadOnlyRepository<TEntity>.LongCount
  nameWithType.vb: IReadOnlyRepository(Of TEntity).LongCount
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: LongCountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: LongCountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.LongCountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).LongCountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.LongCountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).LongCountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.LongCountAsync*
  name: LongCountAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.LongCountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.LongCountAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).LongCountAsync
  nameWithType: IReadOnlyRepository<TEntity>.LongCountAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).LongCountAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Paged*
  name: Paged
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.Paged
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Paged
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Paged
  nameWithType: IReadOnlyRepository<TEntity>.Paged
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Paged
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Paged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Paged<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Paged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Paged(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Paged<TProperty>(int, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Paged(Of TProperty)(Integer, Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: IReadOnlyRepository<TEntity>.Paged<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Paged(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.PagedAsync*
  name: PagedAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.PagedAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.PagedAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).PagedAsync
  nameWithType: IReadOnlyRepository<TEntity>.PagedAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).PagedAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.PagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: PagedAsync<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.PagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: PagedAsync(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.PagedAsync<TProperty>(int, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).PagedAsync(Of TProperty)(Integer, Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.PagedAsync<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).PagedAsync(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Select(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Select(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Select(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Select(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IReadOnlyRepository<TEntity>.Select(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Select(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Select*
  name: Select
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.Select
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Select
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Select
  nameWithType: IReadOnlyRepository<TEntity>.Select
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Select
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Select<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Select(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.Select<TProperty>(int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).Select(Of TProperty)(Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: IReadOnlyRepository<TEntity>.Select<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).Select(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: SelectAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: SelectAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.SelectAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).SelectAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.SelectAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).SelectAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync*
  name: SelectAsync
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.SelectAsync
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).SelectAsync
  nameWithType: IReadOnlyRepository<TEntity>.SelectAsync
  nameWithType.vb: IReadOnlyRepository(Of TEntity).SelectAsync
- uid: WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: SelectAsync<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.IReadOnlyRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IReadOnlyRepository`1.SelectAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.IReadOnlyRepository<TEntity>.SelectAsync<TProperty>(int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity).SelectAsync(Of TProperty)(Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: IReadOnlyRepository<TEntity>.SelectAsync<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: IReadOnlyRepository(Of TEntity).SelectAsync(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1
  name: IRepository<TEntity>
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: T:WeihanLi.Common.Data.IRepository`1
  name.vb: IRepository(Of TEntity)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity)
  nameWithType: IRepository<TEntity>
  nameWithType.vb: IRepository(Of TEntity)
- uid: WeihanLi.Common.Data.IRepository`1.Delete(`0)
  name: Delete(TEntity)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Delete(`0)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Delete(TEntity)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Delete(TEntity)
  nameWithType: IRepository<TEntity>.Delete(TEntity)
  nameWithType.vb: IRepository(Of TEntity).Delete(TEntity)
- uid: WeihanLi.Common.Data.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Delete(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Delete(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Delete(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: IRepository<TEntity>.Delete(Expression<Func<TEntity, bool>>)
  nameWithType.vb: IRepository(Of TEntity).Delete(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.IRepository`1.Delete*
  name: Delete
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.Delete
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Delete
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Delete
  nameWithType: IRepository<TEntity>.Delete
  nameWithType.vb: IRepository(Of TEntity).Delete
- uid: WeihanLi.Common.Data.IRepository`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TEntity, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.DeleteAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).DeleteAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.DeleteAsync(TEntity, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).DeleteAsync(TEntity, CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: DeleteAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: DeleteAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.DeleteAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).DeleteAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.DeleteAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).DeleteAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.DeleteAsync*
  name: DeleteAsync
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.DeleteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.DeleteAsync
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).DeleteAsync
  nameWithType: IRepository<TEntity>.DeleteAsync
  nameWithType.vb: IRepository(Of TEntity).DeleteAsync
- uid: WeihanLi.Common.Data.IRepository`1.Insert(`0)
  name: Insert(TEntity)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Insert(`0)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Insert(TEntity)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Insert(TEntity)
  nameWithType: IRepository<TEntity>.Insert(TEntity)
  nameWithType.vb: IRepository(Of TEntity).Insert(TEntity)
- uid: WeihanLi.Common.Data.IRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  name: Insert(IEnumerable<TEntity>)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  name.vb: Insert(IEnumerable(Of TEntity))
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Insert(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Insert(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: IRepository<TEntity>.Insert(IEnumerable<TEntity>)
  nameWithType.vb: IRepository(Of TEntity).Insert(IEnumerable(Of TEntity))
- uid: WeihanLi.Common.Data.IRepository`1.Insert*
  name: Insert
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.Insert
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Insert
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Insert
  nameWithType: IRepository<TEntity>.Insert
  nameWithType.vb: IRepository(Of TEntity).Insert
- uid: WeihanLi.Common.Data.IRepository`1.InsertAsync(`0,System.Threading.CancellationToken)
  name: InsertAsync(TEntity, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.InsertAsync(`0,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.InsertAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).InsertAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.InsertAsync(TEntity, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).InsertAsync(TEntity, CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name: InsertAsync(IEnumerable<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name.vb: InsertAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.InsertAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).InsertAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.InsertAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).InsertAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.InsertAsync*
  name: InsertAsync
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.InsertAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.InsertAsync
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).InsertAsync
  nameWithType: IRepository<TEntity>.InsertAsync
  nameWithType.vb: IRepository(Of TEntity).InsertAsync
- uid: WeihanLi.Common.Data.IRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Update(TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name.vb: Update(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Update(TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Update(TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: IRepository<TEntity>.Update(TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: IRepository(Of TEntity).Update(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.IRepository`1.Update(`0,System.String[])
  name: Update(TEntity, params string[])
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Update(`0,System.String[])
  name.vb: Update(TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Update(TEntity, params string[])
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Update(TEntity, ParamArray String())
  nameWithType: IRepository<TEntity>.Update(TEntity, params string[])
  nameWithType.vb: IRepository(Of TEntity).Update(TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.IRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})
  name: Update(Expression<Func<TEntity, bool>>, IDictionary<string, object?>)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})
  name.vb: Update(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object))
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Update(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Collections.Generic.IDictionary<string, object?>)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Update(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Collections.Generic.IDictionary(Of String, Object))
  nameWithType: IRepository<TEntity>.Update(Expression<Func<TEntity, bool>>, IDictionary<string, object?>)
  nameWithType.vb: IRepository(Of TEntity).Update(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object))
- uid: WeihanLi.Common.Data.IRepository`1.Update*
  name: Update
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.Update
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Update
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Update
  nameWithType: IRepository<TEntity>.Update
  nameWithType.vb: IRepository(Of TEntity).Update
- uid: WeihanLi.Common.Data.IRepository`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
  name: Update<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
  name.vb: Update(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.Update<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, object?)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).Update(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Object)
  nameWithType: IRepository<TEntity>.Update<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?)
  nameWithType.vb: IRepository(Of TEntity).Update(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name: UpdateAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name.vb: UpdateAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateAsync(TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateAsync(TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))(), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateAsync(`0,System.String[],System.Threading.CancellationToken)
  name: UpdateAsync(TEntity, string[], CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateAsync(`0,System.String[],System.Threading.CancellationToken)
  name.vb: UpdateAsync(TEntity, String(), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateAsync(TEntity, string[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateAsync(TEntity, String(), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateAsync(TEntity, string[], CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync(TEntity, String(), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: UpdateAsync(Expression<Func<TEntity, bool>>, IDictionary<string, object?>, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name.vb: UpdateAsync(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Collections.Generic.IDictionary<string, object?>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Collections.Generic.IDictionary(Of String, Object), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateAsync(Expression<Func<TEntity, bool>>, IDictionary<string, object?>, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateAsync*
  name: UpdateAsync
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.UpdateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateAsync
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateAsync
  nameWithType: IRepository<TEntity>.UpdateAsync
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync
- uid: WeihanLi.Common.Data.IRepository`1.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Threading.CancellationToken)
  name: UpdateAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?, CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Threading.CancellationToken)
  name.vb: UpdateAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object, CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateAsync<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateAsync(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Object, System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?, CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object, CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithout(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: UpdateWithout(TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateWithout(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name.vb: UpdateWithout(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithout(TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithout(TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: IRepository<TEntity>.UpdateWithout(TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: IRepository(Of TEntity).UpdateWithout(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithout(`0,System.String[])
  name: UpdateWithout(TEntity, params string[])
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateWithout(`0,System.String[])
  name.vb: UpdateWithout(TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithout(TEntity, params string[])
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithout(TEntity, ParamArray String())
  nameWithType: IRepository<TEntity>.UpdateWithout(TEntity, params string[])
  nameWithType.vb: IRepository(Of TEntity).UpdateWithout(TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithout*
  name: UpdateWithout
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.UpdateWithout
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithout
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithout
  nameWithType: IRepository<TEntity>.UpdateWithout
  nameWithType.vb: IRepository(Of TEntity).UpdateWithout
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name: UpdateWithoutAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name.vb: UpdateWithoutAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithoutAsync(TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithoutAsync(TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))(), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateWithoutAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateWithoutAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync(`0,System.String[],System.Threading.CancellationToken)
  name: UpdateWithoutAsync(TEntity, string[], CancellationToken)
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: M:WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync(`0,System.String[],System.Threading.CancellationToken)
  name.vb: UpdateWithoutAsync(TEntity, String(), CancellationToken)
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithoutAsync(TEntity, string[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithoutAsync(TEntity, String(), System.Threading.CancellationToken)
  nameWithType: IRepository<TEntity>.UpdateWithoutAsync(TEntity, string[], CancellationToken)
  nameWithType.vb: IRepository(Of TEntity).UpdateWithoutAsync(TEntity, String(), CancellationToken)
- uid: WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync*
  name: UpdateWithoutAsync
  href: api/WeihanLi.Common.Data.IRepository-1.yml
  commentId: Overload:WeihanLi.Common.Data.IRepository`1.UpdateWithoutAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IRepository<TEntity>.UpdateWithoutAsync
  fullName.vb: WeihanLi.Common.Data.IRepository(Of TEntity).UpdateWithoutAsync
  nameWithType: IRepository<TEntity>.UpdateWithoutAsync
  nameWithType.vb: IRepository(Of TEntity).UpdateWithoutAsync
- uid: WeihanLi.Common.Data.IUnitOfWork
  name: IUnitOfWork
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: T:WeihanLi.Common.Data.IUnitOfWork
  fullName: WeihanLi.Common.Data.IUnitOfWork
  nameWithType: IUnitOfWork
- uid: WeihanLi.Common.Data.IUnitOfWork.Commit
  name: Commit()
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.IUnitOfWork.Commit
  fullName: WeihanLi.Common.Data.IUnitOfWork.Commit()
  nameWithType: IUnitOfWork.Commit()
- uid: WeihanLi.Common.Data.IUnitOfWork.Commit*
  name: Commit
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.IUnitOfWork.Commit
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IUnitOfWork.Commit
  nameWithType: IUnitOfWork.Commit
- uid: WeihanLi.Common.Data.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  name: CommitAsync(CancellationToken)
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)
  nameWithType: IUnitOfWork.CommitAsync(CancellationToken)
- uid: WeihanLi.Common.Data.IUnitOfWork.CommitAsync*
  name: CommitAsync
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.IUnitOfWork.CommitAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IUnitOfWork.CommitAsync
  nameWithType: IUnitOfWork.CommitAsync
- uid: WeihanLi.Common.Data.IUnitOfWork.Rollback
  name: Rollback()
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.IUnitOfWork.Rollback
  fullName: WeihanLi.Common.Data.IUnitOfWork.Rollback()
  nameWithType: IUnitOfWork.Rollback()
- uid: WeihanLi.Common.Data.IUnitOfWork.Rollback*
  name: Rollback
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.IUnitOfWork.Rollback
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IUnitOfWork.Rollback
  nameWithType: IUnitOfWork.Rollback
- uid: WeihanLi.Common.Data.IUnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  name: RollbackAsync(CancellationToken)
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.IUnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.IUnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  nameWithType: IUnitOfWork.RollbackAsync(CancellationToken)
- uid: WeihanLi.Common.Data.IUnitOfWork.RollbackAsync*
  name: RollbackAsync
  href: api/WeihanLi.Common.Data.IUnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.IUnitOfWork.RollbackAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.IUnitOfWork.RollbackAsync
  nameWithType: IUnitOfWork.RollbackAsync
- uid: WeihanLi.Common.Data.Repository`1
  name: Repository<TEntity>
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: T:WeihanLi.Common.Data.Repository`1
  name.vb: Repository(Of TEntity)
  fullName: WeihanLi.Common.Data.Repository<TEntity>
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity)
  nameWithType: Repository<TEntity>
  nameWithType.vb: Repository(Of TEntity)
- uid: WeihanLi.Common.Data.Repository`1._dbConnection
  name: _dbConnection
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: F:WeihanLi.Common.Data.Repository`1._dbConnection
  fullName: WeihanLi.Common.Data.Repository<TEntity>._dbConnection
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity)._dbConnection
  nameWithType: Repository<TEntity>._dbConnection
  nameWithType.vb: Repository(Of TEntity)._dbConnection
- uid: WeihanLi.Common.Data.Repository`1.#ctor(System.Func{System.Data.Common.DbConnection})
  name: Repository(Func<DbConnection>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.#ctor(System.Func{System.Data.Common.DbConnection})
  name.vb: New(Func(Of DbConnection))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Repository(System.Func<System.Data.Common.DbConnection>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).New(System.Func(Of System.Data.Common.DbConnection))
  nameWithType: Repository<TEntity>.Repository(Func<DbConnection>)
  nameWithType.vb: Repository(Of TEntity).New(Func(Of DbConnection))
- uid: WeihanLi.Common.Data.Repository`1.#ctor*
  name: Repository
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Repository
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).New
  nameWithType: Repository<TEntity>.Repository
  nameWithType.vb: Repository(Of TEntity).New
- uid: WeihanLi.Common.Data.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Count(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Count(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Count(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.Count(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).Count(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.Count*
  name: Count
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Count
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Count
  nameWithType: Repository<TEntity>.Count
  nameWithType.vb: Repository(Of TEntity).Count
- uid: WeihanLi.Common.Data.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.CountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).CountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.CountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).CountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.CountAsync*
  name: CountAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.CountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.CountAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).CountAsync
  nameWithType: Repository<TEntity>.CountAsync
  nameWithType.vb: Repository(Of TEntity).CountAsync
- uid: WeihanLi.Common.Data.Repository`1.Delete(`0)
  name: Delete(TEntity)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Delete(`0)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Delete(TEntity)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Delete(TEntity)
  nameWithType: Repository<TEntity>.Delete(TEntity)
  nameWithType.vb: Repository(Of TEntity).Delete(TEntity)
- uid: WeihanLi.Common.Data.Repository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Delete(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Delete(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Delete(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.Delete(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).Delete(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.Delete*
  name: Delete
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Delete
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Delete
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Delete
  nameWithType: Repository<TEntity>.Delete
  nameWithType.vb: Repository(Of TEntity).Delete
- uid: WeihanLi.Common.Data.Repository`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TEntity, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.DeleteAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).DeleteAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.DeleteAsync(TEntity, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).DeleteAsync(TEntity, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: DeleteAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: DeleteAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.DeleteAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).DeleteAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.DeleteAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).DeleteAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.DeleteAsync*
  name: DeleteAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.DeleteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.DeleteAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).DeleteAsync
  nameWithType: Repository<TEntity>.DeleteAsync
  nameWithType.vb: Repository(Of TEntity).DeleteAsync
- uid: WeihanLi.Common.Data.Repository`1.Execute(System.String,System.Object)
  name: Execute(string, object?)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Execute(System.String,System.Object)
  name.vb: Execute(String, Object)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Execute(string, object?)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Execute(String, Object)
  nameWithType: Repository<TEntity>.Execute(string, object?)
  nameWithType.vb: Repository(Of TEntity).Execute(String, Object)
- uid: WeihanLi.Common.Data.Repository`1.Execute*
  name: Execute
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Execute
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Execute
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Execute
  nameWithType: Repository<TEntity>.Execute
  nameWithType.vb: Repository(Of TEntity).Execute
- uid: WeihanLi.Common.Data.Repository`1.ExecuteAsync(System.String,System.Object,System.Threading.CancellationToken)
  name: ExecuteAsync(string, object?, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.ExecuteAsync(System.String,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(String, Object, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteAsync(string, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteAsync(String, Object, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.ExecuteAsync(string, object?, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).ExecuteAsync(String, Object, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteAsync
  nameWithType: Repository<TEntity>.ExecuteAsync
  nameWithType.vb: Repository(Of TEntity).ExecuteAsync
- uid: WeihanLi.Common.Data.Repository`1.ExecuteScalar*
  name: ExecuteScalar
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.ExecuteScalar
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteScalar
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteScalar
  nameWithType: Repository<TEntity>.ExecuteScalar
  nameWithType.vb: Repository(Of TEntity).ExecuteScalar
- uid: WeihanLi.Common.Data.Repository`1.ExecuteScalar``1(System.String,System.Object)
  name: ExecuteScalar<TResult>(string, object?)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.ExecuteScalar``1(System.String,System.Object)
  name.vb: ExecuteScalar(Of TResult)(String, Object)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteScalar<TResult>(string, object?)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteScalar(Of TResult)(String, Object)
  nameWithType: Repository<TEntity>.ExecuteScalar<TResult>(string, object?)
  nameWithType.vb: Repository(Of TEntity).ExecuteScalar(Of TResult)(String, Object)
- uid: WeihanLi.Common.Data.Repository`1.ExecuteScalarAsync*
  name: ExecuteScalarAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.ExecuteScalarAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteScalarAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteScalarAsync
  nameWithType: Repository<TEntity>.ExecuteScalarAsync
  nameWithType.vb: Repository(Of TEntity).ExecuteScalarAsync
- uid: WeihanLi.Common.Data.Repository`1.ExecuteScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  name: ExecuteScalarAsync<TResult>(string, object?, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.ExecuteScalarAsync``1(System.String,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(Of TResult)(String, Object, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExecuteScalarAsync<TResult>(string, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExecuteScalarAsync(Of TResult)(String, Object, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.ExecuteScalarAsync<TResult>(string, object?, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).ExecuteScalarAsync(Of TResult)(String, Object, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exist(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Exist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Exist(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Exist(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Exist(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.Exist(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).Exist(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.Exist*
  name: Exist
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Exist
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Exist
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Exist
  nameWithType: Repository<TEntity>.Exist
  nameWithType.vb: Repository(Of TEntity).Exist
- uid: WeihanLi.Common.Data.Repository`1.ExistAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: ExistAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.ExistAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: ExistAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExistAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExistAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.ExistAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).ExistAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.ExistAsync*
  name: ExistAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.ExistAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.ExistAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).ExistAsync
  nameWithType: Repository<TEntity>.ExistAsync
  nameWithType.vb: Repository(Of TEntity).ExistAsync
- uid: WeihanLi.Common.Data.Repository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Fetch(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Fetch(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Fetch(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Fetch(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.Fetch(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).Fetch(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.Fetch*
  name: Fetch
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Fetch
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Fetch
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Fetch
  nameWithType: Repository<TEntity>.Fetch
  nameWithType.vb: Repository(Of TEntity).Fetch
- uid: WeihanLi.Common.Data.Repository`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Fetch<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Fetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Fetch(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Fetch<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Fetch(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: Repository<TEntity>.Fetch<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: Repository(Of TEntity).Fetch(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.Repository`1.FetchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: FetchAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.FetchAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: FetchAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.FetchAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).FetchAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.FetchAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).FetchAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.FetchAsync*
  name: FetchAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.FetchAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.FetchAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).FetchAsync
  nameWithType: Repository<TEntity>.FetchAsync
  nameWithType.vb: Repository(Of TEntity).FetchAsync
- uid: WeihanLi.Common.Data.Repository`1.FetchAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: FetchAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.FetchAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.FetchAsync<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).FetchAsync(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.FetchAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).FetchAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.Insert(`0)
  name: Insert(TEntity)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Insert(`0)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Insert(TEntity)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Insert(TEntity)
  nameWithType: Repository<TEntity>.Insert(TEntity)
  nameWithType.vb: Repository(Of TEntity).Insert(TEntity)
- uid: WeihanLi.Common.Data.Repository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  name: Insert(IEnumerable<TEntity>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  name.vb: Insert(IEnumerable(Of TEntity))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Insert(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Insert(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: Repository<TEntity>.Insert(IEnumerable<TEntity>)
  nameWithType.vb: Repository(Of TEntity).Insert(IEnumerable(Of TEntity))
- uid: WeihanLi.Common.Data.Repository`1.Insert*
  name: Insert
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Insert
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Insert
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Insert
  nameWithType: Repository<TEntity>.Insert
  nameWithType.vb: Repository(Of TEntity).Insert
- uid: WeihanLi.Common.Data.Repository`1.InsertAsync(`0,System.Threading.CancellationToken)
  name: InsertAsync(TEntity, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.InsertAsync(`0,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.InsertAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).InsertAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.InsertAsync(TEntity, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).InsertAsync(TEntity, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name: InsertAsync(IEnumerable<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name.vb: InsertAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.InsertAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).InsertAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.InsertAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).InsertAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.InsertAsync*
  name: InsertAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.InsertAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.InsertAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).InsertAsync
  nameWithType: Repository<TEntity>.InsertAsync
  nameWithType.vb: Repository(Of TEntity).InsertAsync
- uid: WeihanLi.Common.Data.Repository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: LongCount(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.LongCount(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.LongCount(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).LongCount(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.LongCount*
  name: LongCount
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.LongCount
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.LongCount
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).LongCount
  nameWithType: Repository<TEntity>.LongCount
  nameWithType.vb: Repository(Of TEntity).LongCount
- uid: WeihanLi.Common.Data.Repository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: LongCountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: LongCountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.LongCountAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).LongCountAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.LongCountAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).LongCountAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.LongCountAsync*
  name: LongCountAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.LongCountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.LongCountAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).LongCountAsync
  nameWithType: Repository<TEntity>.LongCountAsync
  nameWithType.vb: Repository(Of TEntity).LongCountAsync
- uid: WeihanLi.Common.Data.Repository`1.Paged*
  name: Paged
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Paged
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Paged
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Paged
  nameWithType: Repository<TEntity>.Paged
  nameWithType.vb: Repository(Of TEntity).Paged
- uid: WeihanLi.Common.Data.Repository`1.Paged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Paged<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Paged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Paged(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Paged<TProperty>(int, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Paged(Of TProperty)(Integer, Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: Repository<TEntity>.Paged<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: Repository(Of TEntity).Paged(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.Repository`1.PagedAsync*
  name: PagedAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.PagedAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.PagedAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).PagedAsync
  nameWithType: Repository<TEntity>.PagedAsync
  nameWithType.vb: Repository(Of TEntity).PagedAsync
- uid: WeihanLi.Common.Data.Repository`1.PagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: PagedAsync<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.PagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: PagedAsync(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.PagedAsync<TProperty>(int, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).PagedAsync(Of TProperty)(Integer, Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.PagedAsync<TProperty>(int, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).PagedAsync(Of TProperty)(Integer, Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Select(Expression<Func<TEntity, bool>>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: Select(Expression(Of Func(Of TEntity, Boolean)))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Select(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Select(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: Repository<TEntity>.Select(Expression<Func<TEntity, bool>>)
  nameWithType.vb: Repository(Of TEntity).Select(Expression(Of Func(Of TEntity, Boolean)))
- uid: WeihanLi.Common.Data.Repository`1.Select*
  name: Select
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Select
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Select
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Select
  nameWithType: Repository<TEntity>.Select
  nameWithType.vb: Repository(Of TEntity).Select
- uid: WeihanLi.Common.Data.Repository`1.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name: Select<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)
  name.vb: Select(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Select<TProperty>(int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Select(Of TProperty)(Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: Repository<TEntity>.Select<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: Repository(Of TEntity).Select(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.Repository`1.SelectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: SelectAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.SelectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: SelectAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.SelectAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).SelectAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.SelectAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).SelectAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.SelectAsync*
  name: SelectAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.SelectAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.SelectAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).SelectAsync
  nameWithType: Repository<TEntity>.SelectAsync
  nameWithType.vb: Repository(Of TEntity).SelectAsync
- uid: WeihanLi.Common.Data.Repository`1.SelectAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name: SelectAsync<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.SelectAsync``1(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.SelectAsync<TProperty>(int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).SelectAsync(Of TProperty)(Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.SelectAsync<TProperty>(int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).SelectAsync(Of TProperty)(Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Update(TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name.vb: Update(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Update(TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Update(TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: Repository<TEntity>.Update(TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: Repository(Of TEntity).Update(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.Repository`1.Update(`0,System.String[])
  name: Update(TEntity, params string[])
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Update(`0,System.String[])
  name.vb: Update(TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Update(TEntity, params string[])
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Update(TEntity, ParamArray String())
  nameWithType: Repository<TEntity>.Update(TEntity, params string[])
  nameWithType.vb: Repository(Of TEntity).Update(TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.Repository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})
  name: Update(Expression<Func<TEntity, bool>>, IDictionary<string, object?>)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})
  name.vb: Update(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object))
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Update(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Collections.Generic.IDictionary<string, object?>)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Update(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Collections.Generic.IDictionary(Of String, Object))
  nameWithType: Repository<TEntity>.Update(Expression<Func<TEntity, bool>>, IDictionary<string, object?>)
  nameWithType.vb: Repository(Of TEntity).Update(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object))
- uid: WeihanLi.Common.Data.Repository`1.Update*
  name: Update
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.Update
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Update
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Update
  nameWithType: Repository<TEntity>.Update
  nameWithType.vb: Repository(Of TEntity).Update
- uid: WeihanLi.Common.Data.Repository`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
  name: Update<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)
  name.vb: Update(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.Update<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, object?)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).Update(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Object)
  nameWithType: Repository<TEntity>.Update<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?)
  nameWithType.vb: Repository(Of TEntity).Update(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object)
- uid: WeihanLi.Common.Data.Repository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name: UpdateAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name.vb: UpdateAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateAsync(TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateAsync(TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))(), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateAsync(`0,System.String[],System.Threading.CancellationToken)
  name: UpdateAsync(TEntity, string[], CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateAsync(`0,System.String[],System.Threading.CancellationToken)
  name.vb: UpdateAsync(TEntity, String(), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateAsync(TEntity, string[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateAsync(TEntity, String(), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateAsync(TEntity, string[], CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateAsync(TEntity, String(), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name: UpdateAsync(Expression<Func<TEntity, bool>>, IDictionary<string, object?>?, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)
  name.vb: UpdateAsync(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Collections.Generic.IDictionary<string, object?>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Collections.Generic.IDictionary(Of String, Object), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateAsync(Expression<Func<TEntity, bool>>, IDictionary<string, object?>?, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateAsync(Expression(Of Func(Of TEntity, Boolean)), IDictionary(Of String, Object), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateAsync*
  name: UpdateAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.UpdateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateAsync
  nameWithType: Repository<TEntity>.UpdateAsync
  nameWithType.vb: Repository(Of TEntity).UpdateAsync
- uid: WeihanLi.Common.Data.Repository`1.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Threading.CancellationToken)
  name: UpdateAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?, CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Threading.CancellationToken)
  name.vb: UpdateAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object, CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateAsync<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateAsync(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Object, System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateAsync<TProperty>(Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, object?, CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateAsync(Of TProperty)(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Object, CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithout(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: UpdateWithout(TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateWithout(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name.vb: UpdateWithout(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithout(TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithout(TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: Repository<TEntity>.UpdateWithout(TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: Repository(Of TEntity).UpdateWithout(TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithout(`0,System.String[])
  name: UpdateWithout(TEntity, params string[]?)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateWithout(`0,System.String[])
  name.vb: UpdateWithout(TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithout(TEntity, params string[]?)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithout(TEntity, ParamArray String())
  nameWithType: Repository<TEntity>.UpdateWithout(TEntity, params string[]?)
  nameWithType.vb: Repository(Of TEntity).UpdateWithout(TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithout*
  name: UpdateWithout
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.UpdateWithout
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithout
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithout
  nameWithType: Repository<TEntity>.UpdateWithout
  nameWithType.vb: Repository(Of TEntity).UpdateWithout
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name: UpdateWithoutAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.Threading.CancellationToken)
  name.vb: UpdateWithoutAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithoutAsync(TEntity, System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithoutAsync(TEntity, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))(), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateWithoutAsync(TEntity, Expression<Func<TEntity, object?>>[], CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateWithoutAsync(TEntity, Expression(Of Func(Of TEntity, Object))(), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync(`0,System.String[],System.Threading.CancellationToken)
  name: UpdateWithoutAsync(TEntity, string[], CancellationToken)
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: M:WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync(`0,System.String[],System.Threading.CancellationToken)
  name.vb: UpdateWithoutAsync(TEntity, String(), CancellationToken)
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithoutAsync(TEntity, string[], System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithoutAsync(TEntity, String(), System.Threading.CancellationToken)
  nameWithType: Repository<TEntity>.UpdateWithoutAsync(TEntity, string[], CancellationToken)
  nameWithType.vb: Repository(Of TEntity).UpdateWithoutAsync(TEntity, String(), CancellationToken)
- uid: WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync*
  name: UpdateWithoutAsync
  href: api/WeihanLi.Common.Data.Repository-1.yml
  commentId: Overload:WeihanLi.Common.Data.Repository`1.UpdateWithoutAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.Repository<TEntity>.UpdateWithoutAsync
  fullName.vb: WeihanLi.Common.Data.Repository(Of TEntity).UpdateWithoutAsync
  nameWithType: Repository<TEntity>.UpdateWithoutAsync
  nameWithType.vb: Repository(Of TEntity).UpdateWithoutAsync
- uid: WeihanLi.Common.Data.RepositoryExtension
  name: RepositoryExtension
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: T:WeihanLi.Common.Data.RepositoryExtension
  fullName: WeihanLi.Common.Data.RepositoryExtension
  nameWithType: RepositoryExtension
- uid: WeihanLi.Common.Data.RepositoryExtension.Count*
  name: Count
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.Count
  nameWithType: RepositoryExtension.Count
- uid: WeihanLi.Common.Data.RepositoryExtension.Count``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name: Count<TEntity>(IReadOnlyRepository<TEntity>)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.Count``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name.vb: Count(Of TEntity)(IReadOnlyRepository(Of TEntity))
  fullName: WeihanLi.Common.Data.RepositoryExtension.Count<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.Count(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity))
  nameWithType: RepositoryExtension.Count<TEntity>(IReadOnlyRepository<TEntity>)
  nameWithType.vb: RepositoryExtension.Count(Of TEntity)(IReadOnlyRepository(Of TEntity))
- uid: WeihanLi.Common.Data.RepositoryExtension.CountAsync*
  name: CountAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.CountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.CountAsync
  nameWithType: RepositoryExtension.CountAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.CountAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name: CountAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.CountAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name.vb: CountAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.CountAsync<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.CountAsync(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.CountAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  nameWithType.vb: RepositoryExtension.CountAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.Fetch*
  name: Fetch
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.Fetch
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.Fetch
  nameWithType: RepositoryExtension.Fetch
- uid: WeihanLi.Common.Data.RepositoryExtension.Fetch``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name: Fetch<TEntity>(IReadOnlyRepository<TEntity>)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.Fetch``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name.vb: Fetch(Of TEntity)(IReadOnlyRepository(Of TEntity))
  fullName: WeihanLi.Common.Data.RepositoryExtension.Fetch<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.Fetch(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity))
  nameWithType: RepositoryExtension.Fetch<TEntity>(IReadOnlyRepository<TEntity>)
  nameWithType.vb: RepositoryExtension.Fetch(Of TEntity)(IReadOnlyRepository(Of TEntity))
- uid: WeihanLi.Common.Data.RepositoryExtension.Fetch``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name: Fetch<TEntity, TProperty>(IReadOnlyRepository<TEntity>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.Fetch``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name.vb: Fetch(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.RepositoryExtension.Fetch<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.Fetch(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: RepositoryExtension.Fetch<TEntity, TProperty>(IReadOnlyRepository<TEntity>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: RepositoryExtension.Fetch(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.RepositoryExtension.FetchAsync*
  name: FetchAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.FetchAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.FetchAsync
  nameWithType: RepositoryExtension.FetchAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.FetchAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name: FetchAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.FetchAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name.vb: FetchAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.FetchAsync<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.FetchAsync(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.FetchAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  nameWithType.vb: RepositoryExtension.FetchAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.FetchAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name: FetchAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.FetchAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.FetchAsync<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.FetchAsync(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.FetchAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: RepositoryExtension.FetchAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.GetAll*
  name: GetAll
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.GetAll
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.GetAll
  nameWithType: RepositoryExtension.GetAll
- uid: WeihanLi.Common.Data.RepositoryExtension.GetAll``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name: GetAll<TEntity>(IReadOnlyRepository<TEntity>)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.GetAll``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name.vb: GetAll(Of TEntity)(IReadOnlyRepository(Of TEntity))
  fullName: WeihanLi.Common.Data.RepositoryExtension.GetAll<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.GetAll(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity))
  nameWithType: RepositoryExtension.GetAll<TEntity>(IReadOnlyRepository<TEntity>)
  nameWithType.vb: RepositoryExtension.GetAll(Of TEntity)(IReadOnlyRepository(Of TEntity))
- uid: WeihanLi.Common.Data.RepositoryExtension.GetAllAsync*
  name: GetAllAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.GetAllAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.GetAllAsync
  nameWithType: RepositoryExtension.GetAllAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.GetAllAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name: GetAllAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.GetAllAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name.vb: GetAllAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.GetAllAsync<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.GetAllAsync(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.GetAllAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  nameWithType.vb: RepositoryExtension.GetAllAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.LongCount*
  name: LongCount
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.LongCount
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.LongCount
  nameWithType: RepositoryExtension.LongCount
- uid: WeihanLi.Common.Data.RepositoryExtension.LongCount``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name: LongCount<TEntity>(IReadOnlyRepository<TEntity>)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.LongCount``1(WeihanLi.Common.Data.IReadOnlyRepository{``0})
  name.vb: LongCount(Of TEntity)(IReadOnlyRepository(Of TEntity))
  fullName: WeihanLi.Common.Data.RepositoryExtension.LongCount<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.LongCount(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity))
  nameWithType: RepositoryExtension.LongCount<TEntity>(IReadOnlyRepository<TEntity>)
  nameWithType.vb: RepositoryExtension.LongCount(Of TEntity)(IReadOnlyRepository(Of TEntity))
- uid: WeihanLi.Common.Data.RepositoryExtension.LongCountAsync*
  name: LongCountAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.LongCountAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.LongCountAsync
  nameWithType: RepositoryExtension.LongCountAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.LongCountAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name: LongCountAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.LongCountAsync``1(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Threading.CancellationToken)
  name.vb: LongCountAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.LongCountAsync<TEntity>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.LongCountAsync(Of TEntity)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.LongCountAsync<TEntity>(IReadOnlyRepository<TEntity>, CancellationToken)
  nameWithType.vb: RepositoryExtension.LongCountAsync(Of TEntity)(IReadOnlyRepository(Of TEntity), CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.Top*
  name: Top
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.Top
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.Top
  nameWithType: RepositoryExtension.Top
- uid: WeihanLi.Common.Data.RepositoryExtension.Top``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name: Top<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.Top``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name.vb: Top(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.RepositoryExtension.Top<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, int, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.Top(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: RepositoryExtension.Top<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: RepositoryExtension.Top(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.RepositoryExtension.Top``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name: Top<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.Top``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)
  name.vb: Top(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
  fullName: WeihanLi.Common.Data.RepositoryExtension.Top<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.Top(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean)
  nameWithType: RepositoryExtension.Top<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool)
  nameWithType.vb: RepositoryExtension.Top(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean)
- uid: WeihanLi.Common.Data.RepositoryExtension.TopAsync*
  name: TopAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.TopAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.TopAsync
  nameWithType: RepositoryExtension.TopAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.TopAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name: TopAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.TopAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name.vb: TopAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.TopAsync<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, int, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.TopAsync(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.TopAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: RepositoryExtension.TopAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.TopAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name: TopAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.TopAsync``2(WeihanLi.Common.Data.IReadOnlyRepository{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Threading.CancellationToken)
  name.vb: TopAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
  fullName: WeihanLi.Common.Data.RepositoryExtension.TopAsync<TEntity, TProperty>(WeihanLi.Common.Data.IReadOnlyRepository<TEntity>, int, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>, bool, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.TopAsync(Of TEntity, TProperty)(WeihanLi.Common.Data.IReadOnlyRepository(Of TEntity), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)), Boolean, System.Threading.CancellationToken)
  nameWithType: RepositoryExtension.TopAsync<TEntity, TProperty>(IReadOnlyRepository<TEntity>, int, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TProperty>>, bool, CancellationToken)
  nameWithType.vb: RepositoryExtension.TopAsync(Of TEntity, TProperty)(IReadOnlyRepository(Of TEntity), Integer, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TProperty)), Boolean, CancellationToken)
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync*
  name: UpdateAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.UpdateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync
  nameWithType: RepositoryExtension.UpdateAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: UpdateAsync<TEntity>(IRepository<TEntity>, TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.UpdateAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name.vb: UpdateAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync<TEntity>(WeihanLi.Common.Data.IRepository<TEntity>, TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync(Of TEntity)(WeihanLi.Common.Data.IRepository(Of TEntity), TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: RepositoryExtension.UpdateAsync<TEntity>(IRepository<TEntity>, TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: RepositoryExtension.UpdateAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.String[])
  name: UpdateAsync<TEntity>(IRepository<TEntity>, TEntity, params string[])
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.UpdateAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.String[])
  name.vb: UpdateAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync<TEntity>(WeihanLi.Common.Data.IRepository<TEntity>, TEntity, params string[])
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.UpdateAsync(Of TEntity)(WeihanLi.Common.Data.IRepository(Of TEntity), TEntity, ParamArray String())
  nameWithType: RepositoryExtension.UpdateAsync<TEntity>(IRepository<TEntity>, TEntity, params string[])
  nameWithType.vb: RepositoryExtension.UpdateAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync*
  name: UpdateWithoutAsync
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: Overload:WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync
  nameWithType: RepositoryExtension.UpdateWithoutAsync
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name: UpdateWithoutAsync<TEntity>(IRepository<TEntity>, TEntity, params Expression<Func<TEntity, object?>>[])
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  name.vb: UpdateWithoutAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync<TEntity>(WeihanLi.Common.Data.IRepository<TEntity>, TEntity, params System.Linq.Expressions.Expression<System.Func<TEntity, object?>>[])
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync(Of TEntity)(WeihanLi.Common.Data.IRepository(Of TEntity), TEntity, ParamArray System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Object))())
  nameWithType: RepositoryExtension.UpdateWithoutAsync<TEntity>(IRepository<TEntity>, TEntity, params Expression<Func<TEntity, object?>>[])
  nameWithType.vb: RepositoryExtension.UpdateWithoutAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray Expression(Of Func(Of TEntity, Object))())
- uid: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.String[])
  name: UpdateWithoutAsync<TEntity>(IRepository<TEntity>, TEntity, params string[])
  href: api/WeihanLi.Common.Data.RepositoryExtension.yml
  commentId: M:WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync``1(WeihanLi.Common.Data.IRepository{``0},``0,System.String[])
  name.vb: UpdateWithoutAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray String())
  fullName: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync<TEntity>(WeihanLi.Common.Data.IRepository<TEntity>, TEntity, params string[])
  fullName.vb: WeihanLi.Common.Data.RepositoryExtension.UpdateWithoutAsync(Of TEntity)(WeihanLi.Common.Data.IRepository(Of TEntity), TEntity, ParamArray String())
  nameWithType: RepositoryExtension.UpdateWithoutAsync<TEntity>(IRepository<TEntity>, TEntity, params string[])
  nameWithType.vb: RepositoryExtension.UpdateWithoutAsync(Of TEntity)(IRepository(Of TEntity), TEntity, ParamArray String())
- uid: WeihanLi.Common.Data.SqlExpressionVisitor
  name: SqlExpressionVisitor
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: T:WeihanLi.Common.Data.SqlExpressionVisitor
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor
  nameWithType: SqlExpressionVisitor
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
  name: SqlExpressionVisitor(IDictionary<string, string>?)
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: New(IDictionary(Of String, String))
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.SqlExpressionVisitor(System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Data.SqlExpressionVisitor.New(System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: SqlExpressionVisitor.SqlExpressionVisitor(IDictionary<string, string>?)
  nameWithType.vb: SqlExpressionVisitor.New(IDictionary(Of String, String))
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.#ctor*
  name: SqlExpressionVisitor
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.SqlExpressionVisitor
  fullName.vb: WeihanLi.Common.Data.SqlExpressionVisitor.New
  nameWithType: SqlExpressionVisitor.SqlExpressionVisitor
  nameWithType.vb: SqlExpressionVisitor.New
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition
  name: GetCondition()
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition()
  nameWithType: SqlExpressionVisitor.GetCondition()
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition*
  name: GetCondition
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition
  isSpec: "True"
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.GetCondition
  nameWithType: SqlExpressionVisitor.GetCondition
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  name: VisitBinary(BinaryExpression)
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  nameWithType: SqlExpressionVisitor.VisitBinary(BinaryExpression)
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary*
  name: VisitBinary
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary
  isSpec: "True"
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitBinary
  nameWithType: SqlExpressionVisitor.VisitBinary
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  name: VisitConstant(ConstantExpression)
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  nameWithType: SqlExpressionVisitor.VisitConstant(ConstantExpression)
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant*
  name: VisitConstant
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant
  isSpec: "True"
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitConstant
  nameWithType: SqlExpressionVisitor.VisitConstant
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  name: VisitMember(MemberExpression)
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  nameWithType: SqlExpressionVisitor.VisitMember(MemberExpression)
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember*
  name: VisitMember
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember
  isSpec: "True"
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMember
  nameWithType: SqlExpressionVisitor.VisitMember
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  name: VisitMethodCall(MethodCallExpression)
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: M:WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  nameWithType: SqlExpressionVisitor.VisitMethodCall(MethodCallExpression)
- uid: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall*
  name: VisitMethodCall
  href: api/WeihanLi.Common.Data.SqlExpressionVisitor.yml
  commentId: Overload:WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall
  isSpec: "True"
  fullName: WeihanLi.Common.Data.SqlExpressionVisitor.VisitMethodCall
  nameWithType: SqlExpressionVisitor.VisitMethodCall
- uid: WeihanLi.Common.Data.UnitOfWork
  name: UnitOfWork
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: T:WeihanLi.Common.Data.UnitOfWork
  fullName: WeihanLi.Common.Data.UnitOfWork
  nameWithType: UnitOfWork
- uid: WeihanLi.Common.Data.UnitOfWork._dbTransaction
  name: _dbTransaction
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: F:WeihanLi.Common.Data.UnitOfWork._dbTransaction
  fullName: WeihanLi.Common.Data.UnitOfWork._dbTransaction
  nameWithType: UnitOfWork._dbTransaction
- uid: WeihanLi.Common.Data.UnitOfWork.#ctor(System.Data.IDbConnection)
  name: UnitOfWork(IDbConnection)
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.#ctor(System.Data.IDbConnection)
  name.vb: New(IDbConnection)
  fullName: WeihanLi.Common.Data.UnitOfWork.UnitOfWork(System.Data.IDbConnection)
  fullName.vb: WeihanLi.Common.Data.UnitOfWork.New(System.Data.IDbConnection)
  nameWithType: UnitOfWork.UnitOfWork(IDbConnection)
  nameWithType.vb: UnitOfWork.New(IDbConnection)
- uid: WeihanLi.Common.Data.UnitOfWork.#ctor(System.Data.IDbTransaction)
  name: UnitOfWork(IDbTransaction)
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.#ctor(System.Data.IDbTransaction)
  name.vb: New(IDbTransaction)
  fullName: WeihanLi.Common.Data.UnitOfWork.UnitOfWork(System.Data.IDbTransaction)
  fullName.vb: WeihanLi.Common.Data.UnitOfWork.New(System.Data.IDbTransaction)
  nameWithType: UnitOfWork.UnitOfWork(IDbTransaction)
  nameWithType.vb: UnitOfWork.New(IDbTransaction)
- uid: WeihanLi.Common.Data.UnitOfWork.#ctor*
  name: UnitOfWork
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Data.UnitOfWork.UnitOfWork
  fullName.vb: WeihanLi.Common.Data.UnitOfWork.New
  nameWithType: UnitOfWork.UnitOfWork
  nameWithType.vb: UnitOfWork.New
- uid: WeihanLi.Common.Data.UnitOfWork.Commit
  name: Commit()
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.Commit
  fullName: WeihanLi.Common.Data.UnitOfWork.Commit()
  nameWithType: UnitOfWork.Commit()
- uid: WeihanLi.Common.Data.UnitOfWork.Commit*
  name: Commit
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.Commit
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.Commit
  nameWithType: UnitOfWork.Commit
- uid: WeihanLi.Common.Data.UnitOfWork.CommitAsync(System.Threading.CancellationToken)
  name: CommitAsync(CancellationToken)
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.CommitAsync(System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.UnitOfWork.CommitAsync(System.Threading.CancellationToken)
  nameWithType: UnitOfWork.CommitAsync(CancellationToken)
- uid: WeihanLi.Common.Data.UnitOfWork.CommitAsync*
  name: CommitAsync
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.CommitAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.CommitAsync
  nameWithType: UnitOfWork.CommitAsync
- uid: WeihanLi.Common.Data.UnitOfWork.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.Dispose
  fullName: WeihanLi.Common.Data.UnitOfWork.Dispose()
  nameWithType: UnitOfWork.Dispose()
- uid: WeihanLi.Common.Data.UnitOfWork.Dispose(System.Boolean)
  name: Dispose(bool)
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.Dispose(System.Boolean)
  name.vb: Dispose(Boolean)
  fullName: WeihanLi.Common.Data.UnitOfWork.Dispose(bool)
  fullName.vb: WeihanLi.Common.Data.UnitOfWork.Dispose(Boolean)
  nameWithType: UnitOfWork.Dispose(bool)
  nameWithType.vb: UnitOfWork.Dispose(Boolean)
- uid: WeihanLi.Common.Data.UnitOfWork.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.Dispose
  nameWithType: UnitOfWork.Dispose
- uid: WeihanLi.Common.Data.UnitOfWork.Finalize
  name: ~UnitOfWork()
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.Finalize
  name.vb: ''
  fullName: WeihanLi.Common.Data.UnitOfWork.~UnitOfWork()
  fullName.vb: ''
  nameWithType: UnitOfWork.~UnitOfWork()
  nameWithType.vb: ''
- uid: WeihanLi.Common.Data.UnitOfWork.Finalize*
  name: ~UnitOfWork
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.Finalize
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.~UnitOfWork
  nameWithType: UnitOfWork.~UnitOfWork
- uid: WeihanLi.Common.Data.UnitOfWork.Rollback
  name: Rollback()
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.Rollback
  fullName: WeihanLi.Common.Data.UnitOfWork.Rollback()
  nameWithType: UnitOfWork.Rollback()
- uid: WeihanLi.Common.Data.UnitOfWork.Rollback*
  name: Rollback
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.Rollback
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.Rollback
  nameWithType: UnitOfWork.Rollback
- uid: WeihanLi.Common.Data.UnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  name: RollbackAsync(CancellationToken)
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: M:WeihanLi.Common.Data.UnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Data.UnitOfWork.RollbackAsync(System.Threading.CancellationToken)
  nameWithType: UnitOfWork.RollbackAsync(CancellationToken)
- uid: WeihanLi.Common.Data.UnitOfWork.RollbackAsync*
  name: RollbackAsync
  href: api/WeihanLi.Common.Data.UnitOfWork.yml
  commentId: Overload:WeihanLi.Common.Data.UnitOfWork.RollbackAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Data.UnitOfWork.RollbackAsync
  nameWithType: UnitOfWork.RollbackAsync
- uid: WeihanLi.Common.DependencyInjection
  name: WeihanLi.Common.DependencyInjection
  href: api/WeihanLi.Common.DependencyInjection.yml
  commentId: N:WeihanLi.Common.DependencyInjection
  fullName: WeihanLi.Common.DependencyInjection
  nameWithType: WeihanLi.Common.DependencyInjection
- uid: WeihanLi.Common.DependencyInjection.FromServiceAttribute
  name: FromServiceAttribute
  href: api/WeihanLi.Common.DependencyInjection.FromServiceAttribute.yml
  commentId: T:WeihanLi.Common.DependencyInjection.FromServiceAttribute
  fullName: WeihanLi.Common.DependencyInjection.FromServiceAttribute
  nameWithType: FromServiceAttribute
- uid: WeihanLi.Common.DependencyInjection.IServiceContainer
  name: IServiceContainer
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainer.yml
  commentId: T:WeihanLi.Common.DependencyInjection.IServiceContainer
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainer
  nameWithType: IServiceContainer
- uid: WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope
  name: CreateScope()
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainer.yml
  commentId: M:WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope()
  nameWithType: IServiceContainer.CreateScope()
- uid: WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope*
  name: CreateScope
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainer.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainer.CreateScope
  nameWithType: IServiceContainer.CreateScope
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder
  name: IServiceContainerBuilder
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: T:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder
  nameWithType: IServiceContainerBuilder
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  name: Add(ServiceDefinition)
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  nameWithType: IServiceContainerBuilder.Add(ServiceDefinition)
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add*
  name: Add
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Add
  nameWithType: IServiceContainerBuilder.Add
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build
  name: Build()
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build()
  nameWithType: IServiceContainerBuilder.Build()
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build*
  name: Build
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.Build
  nameWithType: IServiceContainerBuilder.Build
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  name: TryAdd(ServiceDefinition)
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  nameWithType: IServiceContainerBuilder.TryAdd(ServiceDefinition)
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd*
  name: TryAdd
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerBuilder.TryAdd
  nameWithType: IServiceContainerBuilder.TryAdd
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerModule
  name: IServiceContainerModule
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerModule.yml
  commentId: T:WeihanLi.Common.DependencyInjection.IServiceContainerModule
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerModule
  nameWithType: IServiceContainerModule
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: ConfigureServices(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerModule.yml
  commentId: M:WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: IServiceContainerModule.ConfigureServices(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices*
  name: ConfigureServices
  href: api/WeihanLi.Common.DependencyInjection.IServiceContainerModule.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.IServiceContainerModule.ConfigureServices
  nameWithType: IServiceContainerModule.ConfigureServices
- uid: WeihanLi.Common.DependencyInjection.ServiceConstructorAttribute
  name: ServiceConstructorAttribute
  href: api/WeihanLi.Common.DependencyInjection.ServiceConstructorAttribute.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceConstructorAttribute
  fullName: WeihanLi.Common.DependencyInjection.ServiceConstructorAttribute
  nameWithType: ServiceConstructorAttribute
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder
  name: ServiceContainerBuilder
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder
  nameWithType: ServiceContainerBuilder
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  name: Add(ServiceDefinition)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  nameWithType: ServiceContainerBuilder.Add(ServiceDefinition)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add*
  name: Add
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Add
  nameWithType: ServiceContainerBuilder.Add
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build
  name: Build()
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build()
  nameWithType: ServiceContainerBuilder.Build()
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build*
  name: Build
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.Build
  nameWithType: ServiceContainerBuilder.Build
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator
  name: GetEnumerator()
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator()
  nameWithType: ServiceContainerBuilder.GetEnumerator()
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.GetEnumerator
  nameWithType: ServiceContainerBuilder.GetEnumerator
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  name: TryAdd(ServiceDefinition)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd(WeihanLi.Common.DependencyInjection.ServiceDefinition)
  nameWithType: ServiceContainerBuilder.TryAdd(ServiceDefinition)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd*
  name: TryAdd
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilder.TryAdd
  nameWithType: ServiceContainerBuilder.TryAdd
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions
  name: ServiceContainerBuilderExtensions
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions
  nameWithType: ServiceContainerBuilderExtensions
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: AddScoped(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddScoped(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: AddScoped(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddScoped(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped*
  name: AddScoped
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped
  nameWithType: ServiceContainerBuilderExtensions.AddScoped
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: AddScoped<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: AddScoped(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.AddScoped<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddScoped(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddScoped<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddScoped(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddScoped<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddScoped(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddScoped<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddScoped(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddScoped(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddScoped<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddScoped(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: AddSingleton(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: AddSingleton(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton*
  name: AddSingleton
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,``0)
  name: AddSingleton<TService>(IServiceContainerBuilder, TService)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,``0)
  name.vb: AddSingleton(Of TService)(IServiceContainerBuilder, TService)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, TService)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, TService)
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton<TService>(IServiceContainerBuilder, TService)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingleton(Of TService)(IServiceContainerBuilder, TService)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: AddSingleton<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: AddSingleton(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingleton(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddSingleton<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddSingleton(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingleton(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddSingleton<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddSingleton(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddSingleton(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddSingleton<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddSingleton(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: AddTransient(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddTransient(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: AddTransient(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.AddTransient(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient*
  name: AddTransient
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient
  nameWithType: ServiceContainerBuilderExtensions.AddTransient
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: AddTransient<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: AddTransient(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.AddTransient<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddTransient(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddTransient<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddTransient(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddTransient<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddTransient(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: AddTransient<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: AddTransient(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.AddTransient(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.AddTransient<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.AddTransient(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name: RegisterAssemblyModules(IServiceContainerBuilder, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyModules(IServiceContainerBuilder, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyModules(IServiceContainerBuilder, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyModules(IServiceContainerBuilder, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules*
  name: RegisterAssemblyModules
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyModules
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyModules
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceContainerBuilder, Func<Type, bool>?, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceContainerBuilder, Func(Of Type, Boolean), ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.Type, bool>?, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.Type, Boolean), ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, Func<Type, bool>?, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, Func(Of Type, Boolean), ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceContainerBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceContainerBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.Type, bool>?, WeihanLi.Common.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.Type, Boolean), WeihanLi.Common.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceContainerBuilder, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceContainerBuilder, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypes(IServiceContainerBuilder, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypes(IServiceContainerBuilder, ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypes(IServiceContainerBuilder, ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes*
  name: RegisterAssemblyTypes
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypes
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypes
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.Type, bool>?, System.Func<System.Type, bool>?, WeihanLi.Common.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.Type, Boolean), System.Func(Of System.Type, Boolean), WeihanLi.Common.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.Type, bool>?, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.Type, Boolean), ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.Type, bool>?, WeihanLi.Common.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.Type, Boolean), WeihanLi.Common.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,WeihanLi.Common.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, WeihanLi.Common.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ServiceLifetime, params Assembly[])
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces(IServiceContainerBuilder, ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces*
  name: RegisterAssemblyTypesAsImplementedInterfaces
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces
  nameWithType: ServiceContainerBuilderExtensions.RegisterAssemblyTypesAsImplementedInterfaces
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule*
  name: RegisterModule
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule
  nameWithType: ServiceContainerBuilderExtensions.RegisterModule
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,``0)
  name: RegisterModule<TServiceModule>(IServiceContainerBuilder, TServiceModule)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,``0)
  name.vb: RegisterModule(Of TServiceModule)(IServiceContainerBuilder, TServiceModule)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule<TServiceModule>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, TServiceModule)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterModule(Of TServiceModule)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, TServiceModule)
  nameWithType: ServiceContainerBuilderExtensions.RegisterModule<TServiceModule>(IServiceContainerBuilder, TServiceModule)
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterModule(Of TServiceModule)(IServiceContainerBuilder, TServiceModule)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, Func<Type, bool>?, ServiceLifetime)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Func{System.Type,System.Boolean},WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, Func(Of Type, Boolean), ServiceLifetime)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Func<System.Type, bool>?, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Func(Of System.Type, Boolean), WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, Func<Type, bool>?, ServiceLifetime)
  nameWithType.vb: ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, Func(Of Type, Boolean), ServiceLifetime)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, ServiceLifetime)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces(IServiceContainerBuilder, Type, ServiceLifetime)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces*
  name: RegisterTypeAsImplementedInterfaces
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces
  nameWithType: ServiceContainerBuilderExtensions.RegisterTypeAsImplementedInterfaces
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: TryAddScoped(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: TryAddScoped(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped*
  name: TryAddScoped
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: TryAddScoped<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: TryAddScoped(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddScoped(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddScoped<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddScoped(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddScoped(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddScoped<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddScoped(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddScoped(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddScoped<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddScoped(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: TryAddSingleton(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: TryAddSingleton(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton*
  name: TryAddSingleton
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: TryAddSingleton<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: TryAddSingleton(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddSingleton(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddSingleton<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddSingleton(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddSingleton(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddSingleton<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddSingleton(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddSingleton(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddSingleton<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddSingleton(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  name: TryAddTransient(IServiceContainerBuilder, Type, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient(IServiceContainerBuilder, Type, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  name: TryAddTransient(IServiceContainerBuilder, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Type)
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient(IServiceContainerBuilder, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient*
  name: TryAddTransient
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name: TryAddTransient<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder,System.Func{System.IServiceProvider,System.Object})
  name.vb: TryAddTransient(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder, System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient<TService>(IServiceContainerBuilder, Func<IServiceProvider, object>)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddTransient(Of TService)(IServiceContainerBuilder, Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddTransient<TService>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``1(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddTransient(Of TService)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient<TService>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(Of TService)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient<TService>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddTransient(Of TService)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: TryAddTransient<TService, TServiceImplement>(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient``2(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name.vb: TryAddTransient(Of TService, TServiceImplement)(IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient<TService, TServiceImplement>(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceContainerBuilderExtensions.TryAddTransient(Of TService, TServiceImplement)(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerBuilderExtensions.TryAddTransient<TService, TServiceImplement>(IServiceContainerBuilder)
  nameWithType.vb: ServiceContainerBuilderExtensions.TryAddTransient(Of TService, TServiceImplement)(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerModule
  name: ServiceContainerModule
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerModule.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceContainerModule
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerModule
  nameWithType: ServiceContainerModule
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  name: ConfigureServices(IServiceContainerBuilder)
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerModule.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices(WeihanLi.Common.DependencyInjection.IServiceContainerBuilder)
  nameWithType: ServiceContainerModule.ConfigureServices(IServiceContainerBuilder)
- uid: WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices*
  name: ConfigureServices
  href: api/WeihanLi.Common.DependencyInjection.ServiceContainerModule.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceContainerModule.ConfigureServices
  nameWithType: ServiceContainerModule.ConfigureServices
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition
  name: ServiceDefinition
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceDefinition
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition
  nameWithType: ServiceDefinition
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Object,System.Type)
  name: ServiceDefinition(object, Type)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Object,System.Type)
  name.vb: New(Object, Type)
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceDefinition(object, System.Type)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.New(Object, System.Type)
  nameWithType: ServiceDefinition.ServiceDefinition(object, Type)
  nameWithType.vb: ServiceDefinition.New(Object, Type)
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,System.Func{System.IServiceProvider,System.Object},WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: ServiceDefinition(Type, Func<IServiceProvider, object>, ServiceLifetime)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,System.Func{System.IServiceProvider,System.Object},WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: New(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceDefinition(System.Type, System.Func<System.IServiceProvider, object>, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.New(System.Type, System.Func(Of System.IServiceProvider, Object), WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceDefinition.ServiceDefinition(Type, Func<IServiceProvider, object>, ServiceLifetime)
  nameWithType.vb: ServiceDefinition.New(Type, Func(Of IServiceProvider, Object), ServiceLifetime)
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: ServiceDefinition(Type, Type?, ServiceLifetime)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: New(Type, Type, ServiceLifetime)
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceDefinition(System.Type, System.Type?, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.New(System.Type, System.Type, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceDefinition.ServiceDefinition(Type, Type?, ServiceLifetime)
  nameWithType.vb: ServiceDefinition.New(Type, Type, ServiceLifetime)
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name: ServiceDefinition(Type, ServiceLifetime)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor(System.Type,WeihanLi.Common.DependencyInjection.ServiceLifetime)
  name.vb: New(Type, ServiceLifetime)
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceDefinition(System.Type, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.New(System.Type, WeihanLi.Common.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceDefinition.ServiceDefinition(Type, ServiceLifetime)
  nameWithType.vb: ServiceDefinition.New(Type, ServiceLifetime)
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor*
  name: ServiceDefinition
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceDefinition
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.New
  nameWithType: ServiceDefinition.ServiceDefinition
  nameWithType.vb: ServiceDefinition.New
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType
  name: GetImplementType()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType()
  nameWithType: ServiceDefinition.GetImplementType()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType*
  name: GetImplementType
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.GetImplementType
  nameWithType: ServiceDefinition.GetImplementType
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory
  name: ImplementationFactory
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: P:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory
  nameWithType: ServiceDefinition.ImplementationFactory
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory*
  name: ImplementationFactory
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationFactory
  nameWithType: ServiceDefinition.ImplementationFactory
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance
  name: ImplementationInstance
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: P:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance
  nameWithType: ServiceDefinition.ImplementationInstance
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance*
  name: ImplementationInstance
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementationInstance
  nameWithType: ServiceDefinition.ImplementationInstance
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType
  name: ImplementType
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: P:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType
  nameWithType: ServiceDefinition.ImplementType
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType*
  name: ImplementType
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ImplementType
  nameWithType: ServiceDefinition.ImplementType
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped*
  name: Scoped
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped
  nameWithType: ServiceDefinition.Scoped
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``1
  name: Scoped<TService>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``1
  name.vb: Scoped(Of TService)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped<TService>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped(Of TService)()
  nameWithType: ServiceDefinition.Scoped<TService>()
  nameWithType.vb: ServiceDefinition.Scoped(Of TService)()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``1(System.Func{System.IServiceProvider,System.Object})
  name: Scoped<TService>(Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``1(System.Func{System.IServiceProvider,System.Object})
  name.vb: Scoped(Of TService)(Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped<TService>(System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped(Of TService)(System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceDefinition.Scoped<TService>(Func<IServiceProvider, object>)
  nameWithType.vb: ServiceDefinition.Scoped(Of TService)(Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``2
  name: Scoped<TService, TServiceImplement>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped``2
  name.vb: Scoped(Of TService, TServiceImplement)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped<TService, TServiceImplement>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Scoped(Of TService, TServiceImplement)()
  nameWithType: ServiceDefinition.Scoped<TService, TServiceImplement>()
  nameWithType.vb: ServiceDefinition.Scoped(Of TService, TServiceImplement)()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime
  name: ServiceLifetime
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: P:WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime
  nameWithType: ServiceDefinition.ServiceLifetime
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime*
  name: ServiceLifetime
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceLifetime
  nameWithType: ServiceDefinition.ServiceLifetime
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType
  name: ServiceType
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: P:WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType
  nameWithType: ServiceDefinition.ServiceType
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType*
  name: ServiceType
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.ServiceType
  nameWithType: ServiceDefinition.ServiceType
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton*
  name: Singleton
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton
  nameWithType: ServiceDefinition.Singleton
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``1
  name: Singleton<TService>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``1
  name.vb: Singleton(Of TService)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton<TService>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton(Of TService)()
  nameWithType: ServiceDefinition.Singleton<TService>()
  nameWithType.vb: ServiceDefinition.Singleton(Of TService)()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``1(System.Func{System.IServiceProvider,System.Object})
  name: Singleton<TService>(Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``1(System.Func{System.IServiceProvider,System.Object})
  name.vb: Singleton(Of TService)(Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton<TService>(System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton(Of TService)(System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceDefinition.Singleton<TService>(Func<IServiceProvider, object>)
  nameWithType.vb: ServiceDefinition.Singleton(Of TService)(Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``2
  name: Singleton<TService, TServiceImplement>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton``2
  name.vb: Singleton(Of TService, TServiceImplement)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton<TService, TServiceImplement>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Singleton(Of TService, TServiceImplement)()
  nameWithType: ServiceDefinition.Singleton<TService, TServiceImplement>()
  nameWithType.vb: ServiceDefinition.Singleton(Of TService, TServiceImplement)()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient*
  name: Transient
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: Overload:WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient
  nameWithType: ServiceDefinition.Transient
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``1
  name: Transient<TService>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``1
  name.vb: Transient(Of TService)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient<TService>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient(Of TService)()
  nameWithType: ServiceDefinition.Transient<TService>()
  nameWithType.vb: ServiceDefinition.Transient(Of TService)()
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``1(System.Func{System.IServiceProvider,System.Object})
  name: Transient<TService>(Func<IServiceProvider, object>)
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``1(System.Func{System.IServiceProvider,System.Object})
  name.vb: Transient(Of TService)(Func(Of IServiceProvider, Object))
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient<TService>(System.Func<System.IServiceProvider, object>)
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient(Of TService)(System.Func(Of System.IServiceProvider, Object))
  nameWithType: ServiceDefinition.Transient<TService>(Func<IServiceProvider, object>)
  nameWithType.vb: ServiceDefinition.Transient(Of TService)(Func(Of IServiceProvider, Object))
- uid: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``2
  name: Transient<TService, TServiceImplement>()
  href: api/WeihanLi.Common.DependencyInjection.ServiceDefinition.yml
  commentId: M:WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient``2
  name.vb: Transient(Of TService, TServiceImplement)()
  fullName: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient<TService, TServiceImplement>()
  fullName.vb: WeihanLi.Common.DependencyInjection.ServiceDefinition.Transient(Of TService, TServiceImplement)()
  nameWithType: ServiceDefinition.Transient<TService, TServiceImplement>()
  nameWithType.vb: ServiceDefinition.Transient(Of TService, TServiceImplement)()
- uid: WeihanLi.Common.DependencyInjection.ServiceLifetime
  name: ServiceLifetime
  href: api/WeihanLi.Common.DependencyInjection.ServiceLifetime.yml
  commentId: T:WeihanLi.Common.DependencyInjection.ServiceLifetime
  fullName: WeihanLi.Common.DependencyInjection.ServiceLifetime
  nameWithType: ServiceLifetime
- uid: WeihanLi.Common.DependencyInjection.ServiceLifetime.Scoped
  name: Scoped
  href: api/WeihanLi.Common.DependencyInjection.ServiceLifetime.yml
  commentId: F:WeihanLi.Common.DependencyInjection.ServiceLifetime.Scoped
  fullName: WeihanLi.Common.DependencyInjection.ServiceLifetime.Scoped
  nameWithType: ServiceLifetime.Scoped
- uid: WeihanLi.Common.DependencyInjection.ServiceLifetime.Singleton
  name: Singleton
  href: api/WeihanLi.Common.DependencyInjection.ServiceLifetime.yml
  commentId: F:WeihanLi.Common.DependencyInjection.ServiceLifetime.Singleton
  fullName: WeihanLi.Common.DependencyInjection.ServiceLifetime.Singleton
  nameWithType: ServiceLifetime.Singleton
- uid: WeihanLi.Common.DependencyInjection.ServiceLifetime.Transient
  name: Transient
  href: api/WeihanLi.Common.DependencyInjection.ServiceLifetime.yml
  commentId: F:WeihanLi.Common.DependencyInjection.ServiceLifetime.Transient
  fullName: WeihanLi.Common.DependencyInjection.ServiceLifetime.Transient
  nameWithType: ServiceLifetime.Transient
- uid: WeihanLi.Common.DependencyInjectionExtensions
  name: DependencyInjectionExtensions
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: T:WeihanLi.Common.DependencyInjectionExtensions
  fullName: WeihanLi.Common.DependencyInjectionExtensions
  nameWithType: DependencyInjectionExtensions
- uid: WeihanLi.Common.DependencyInjectionExtensions.GetServices(System.IServiceProvider,System.Type)
  name: GetServices(IServiceProvider, Type)
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjectionExtensions.GetServices(System.IServiceProvider,System.Type)
  fullName: WeihanLi.Common.DependencyInjectionExtensions.GetServices(System.IServiceProvider, System.Type)
  nameWithType: DependencyInjectionExtensions.GetServices(IServiceProvider, Type)
- uid: WeihanLi.Common.DependencyInjectionExtensions.GetServices*
  name: GetServices
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjectionExtensions.GetServices
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjectionExtensions.GetServices
  nameWithType: DependencyInjectionExtensions.GetServices
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService*
  name: ResolveRequiredService
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService
  nameWithType: DependencyInjectionExtensions.ResolveRequiredService
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService``1(System.IServiceProvider)
  name: ResolveRequiredService<TService>(IServiceProvider)
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService``1(System.IServiceProvider)
  name.vb: ResolveRequiredService(Of TService)(IServiceProvider)
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService<TService>(System.IServiceProvider)
  fullName.vb: WeihanLi.Common.DependencyInjectionExtensions.ResolveRequiredService(Of TService)(System.IServiceProvider)
  nameWithType: DependencyInjectionExtensions.ResolveRequiredService<TService>(IServiceProvider)
  nameWithType.vb: DependencyInjectionExtensions.ResolveRequiredService(Of TService)(IServiceProvider)
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveService*
  name: ResolveService
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjectionExtensions.ResolveService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveService
  nameWithType: DependencyInjectionExtensions.ResolveService
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveService``1(System.IServiceProvider)
  name: ResolveService<TService>(IServiceProvider)
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjectionExtensions.ResolveService``1(System.IServiceProvider)
  name.vb: ResolveService(Of TService)(IServiceProvider)
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveService<TService>(System.IServiceProvider)
  fullName.vb: WeihanLi.Common.DependencyInjectionExtensions.ResolveService(Of TService)(System.IServiceProvider)
  nameWithType: DependencyInjectionExtensions.ResolveService<TService>(IServiceProvider)
  nameWithType.vb: DependencyInjectionExtensions.ResolveService(Of TService)(IServiceProvider)
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveServices*
  name: ResolveServices
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyInjectionExtensions.ResolveServices
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveServices
  nameWithType: DependencyInjectionExtensions.ResolveServices
- uid: WeihanLi.Common.DependencyInjectionExtensions.ResolveServices``1(System.IServiceProvider)
  name: ResolveServices<TService>(IServiceProvider)
  href: api/WeihanLi.Common.DependencyInjectionExtensions.yml
  commentId: M:WeihanLi.Common.DependencyInjectionExtensions.ResolveServices``1(System.IServiceProvider)
  name.vb: ResolveServices(Of TService)(IServiceProvider)
  fullName: WeihanLi.Common.DependencyInjectionExtensions.ResolveServices<TService>(System.IServiceProvider)
  fullName.vb: WeihanLi.Common.DependencyInjectionExtensions.ResolveServices(Of TService)(System.IServiceProvider)
  nameWithType: DependencyInjectionExtensions.ResolveServices<TService>(IServiceProvider)
  nameWithType.vb: DependencyInjectionExtensions.ResolveServices(Of TService)(IServiceProvider)
- uid: WeihanLi.Common.DependencyResolver
  name: DependencyResolver
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: T:WeihanLi.Common.DependencyResolver
  fullName: WeihanLi.Common.DependencyResolver
  nameWithType: DependencyResolver
- uid: WeihanLi.Common.DependencyResolver.Current
  name: Current
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: P:WeihanLi.Common.DependencyResolver.Current
  fullName: WeihanLi.Common.DependencyResolver.Current
  nameWithType: DependencyResolver.Current
- uid: WeihanLi.Common.DependencyResolver.Current*
  name: Current
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.Current
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.Current
  nameWithType: DependencyResolver.Current
- uid: WeihanLi.Common.DependencyResolver.ResolveRequiredService*
  name: ResolveRequiredService
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.ResolveRequiredService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.ResolveRequiredService
  nameWithType: DependencyResolver.ResolveRequiredService
- uid: WeihanLi.Common.DependencyResolver.ResolveRequiredService``1
  name: ResolveRequiredService<TService>()
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.ResolveRequiredService``1
  name.vb: ResolveRequiredService(Of TService)()
  fullName: WeihanLi.Common.DependencyResolver.ResolveRequiredService<TService>()
  fullName.vb: WeihanLi.Common.DependencyResolver.ResolveRequiredService(Of TService)()
  nameWithType: DependencyResolver.ResolveRequiredService<TService>()
  nameWithType.vb: DependencyResolver.ResolveRequiredService(Of TService)()
- uid: WeihanLi.Common.DependencyResolver.ResolveService*
  name: ResolveService
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.ResolveService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.ResolveService
  nameWithType: DependencyResolver.ResolveService
- uid: WeihanLi.Common.DependencyResolver.ResolveService``1
  name: ResolveService<TService>()
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.ResolveService``1
  name.vb: ResolveService(Of TService)()
  fullName: WeihanLi.Common.DependencyResolver.ResolveService<TService>()
  fullName.vb: WeihanLi.Common.DependencyResolver.ResolveService(Of TService)()
  nameWithType: DependencyResolver.ResolveService<TService>()
  nameWithType.vb: DependencyResolver.ResolveService(Of TService)()
- uid: WeihanLi.Common.DependencyResolver.ResolveServices*
  name: ResolveServices
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.ResolveServices
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.ResolveServices
  nameWithType: DependencyResolver.ResolveServices
- uid: WeihanLi.Common.DependencyResolver.ResolveServices``1
  name: ResolveServices<TService>()
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.ResolveServices``1
  name.vb: ResolveServices(Of TService)()
  fullName: WeihanLi.Common.DependencyResolver.ResolveServices<TService>()
  fullName.vb: WeihanLi.Common.DependencyResolver.ResolveServices(Of TService)()
  nameWithType: DependencyResolver.ResolveServices<TService>()
  nameWithType.vb: DependencyResolver.ResolveServices(Of TService)()
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: SetDependencyResolver(IServiceCollection)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: DependencyResolver.SetDependencyResolver(IServiceCollection)
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})
  name: SetDependencyResolver(Func<Type, object?>, Func<Type, IEnumerable<object>>)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})
  name.vb: SetDependencyResolver(Func(Of Type, Object), Func(Of Type, IEnumerable(Of Object)))
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func<System.Type, object?>, System.Func<System.Type, System.Collections.Generic.IEnumerable<object>>)
  fullName.vb: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func(Of System.Type, Object), System.Func(Of System.Type, System.Collections.Generic.IEnumerable(Of Object)))
  nameWithType: DependencyResolver.SetDependencyResolver(Func<Type, object?>, Func<Type, IEnumerable<object>>)
  nameWithType.vb: DependencyResolver.SetDependencyResolver(Func(Of Type, Object), Func(Of Type, IEnumerable(Of Object)))
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func{System.Type,System.Object})
  name: SetDependencyResolver(Func<Type, object?>)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func{System.Type,System.Object})
  name.vb: SetDependencyResolver(Func(Of Type, Object))
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func<System.Type, object?>)
  fullName.vb: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.Func(Of System.Type, Object))
  nameWithType: DependencyResolver.SetDependencyResolver(Func<Type, object?>)
  nameWithType.vb: DependencyResolver.SetDependencyResolver(Func(Of Type, Object))
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.IServiceProvider)
  name: SetDependencyResolver(IServiceProvider)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.IServiceProvider)
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(System.IServiceProvider)
  nameWithType: DependencyResolver.SetDependencyResolver(IServiceProvider)
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.DependencyInjection.IServiceContainer)
  name: SetDependencyResolver(IServiceContainer)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.DependencyInjection.IServiceContainer)
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.DependencyInjection.IServiceContainer)
  nameWithType: DependencyResolver.SetDependencyResolver(IServiceContainer)
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.IDependencyResolver)
  name: SetDependencyResolver(IDependencyResolver)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.IDependencyResolver)
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver(WeihanLi.Common.IDependencyResolver)
  nameWithType: DependencyResolver.SetDependencyResolver(IDependencyResolver)
- uid: WeihanLi.Common.DependencyResolver.SetDependencyResolver*
  name: SetDependencyResolver
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.SetDependencyResolver
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.SetDependencyResolver
  nameWithType: DependencyResolver.SetDependencyResolver
- uid: WeihanLi.Common.DependencyResolver.TryInvoke*
  name: TryInvoke
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.TryInvoke
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.TryInvoke
  nameWithType: DependencyResolver.TryInvoke
- uid: WeihanLi.Common.DependencyResolver.TryInvoke``1(System.Action{``0})
  name: TryInvoke<TService>(Action<TService>)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.TryInvoke``1(System.Action{``0})
  name.vb: TryInvoke(Of TService)(Action(Of TService))
  fullName: WeihanLi.Common.DependencyResolver.TryInvoke<TService>(System.Action<TService>)
  fullName.vb: WeihanLi.Common.DependencyResolver.TryInvoke(Of TService)(System.Action(Of TService))
  nameWithType: DependencyResolver.TryInvoke<TService>(Action<TService>)
  nameWithType.vb: DependencyResolver.TryInvoke(Of TService)(Action(Of TService))
- uid: WeihanLi.Common.DependencyResolver.TryInvokeAsync*
  name: TryInvokeAsync
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: Overload:WeihanLi.Common.DependencyResolver.TryInvokeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolver.TryInvokeAsync
  nameWithType: DependencyResolver.TryInvokeAsync
- uid: WeihanLi.Common.DependencyResolver.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name: TryInvokeAsync<TService>(Func<TService, Task>)
  href: api/WeihanLi.Common.DependencyResolver.yml
  commentId: M:WeihanLi.Common.DependencyResolver.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name.vb: TryInvokeAsync(Of TService)(Func(Of TService, Task))
  fullName: WeihanLi.Common.DependencyResolver.TryInvokeAsync<TService>(System.Func<TService, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.DependencyResolver.TryInvokeAsync(Of TService)(System.Func(Of TService, System.Threading.Tasks.Task))
  nameWithType: DependencyResolver.TryInvokeAsync<TService>(Func<TService, Task>)
  nameWithType.vb: DependencyResolver.TryInvokeAsync(Of TService)(Func(Of TService, Task))
- uid: WeihanLi.Common.DependencyResolverExtensions
  name: DependencyResolverExtensions
  href: api/WeihanLi.Common.DependencyResolverExtensions.yml
  commentId: T:WeihanLi.Common.DependencyResolverExtensions
  fullName: WeihanLi.Common.DependencyResolverExtensions
  nameWithType: DependencyResolverExtensions
- uid: WeihanLi.Common.DependencyResolverExtensions.TryGetService(WeihanLi.Common.IDependencyResolver,System.Type,System.Object@)
  name: TryGetService(IDependencyResolver, Type, out object?)
  href: api/WeihanLi.Common.DependencyResolverExtensions.yml
  commentId: M:WeihanLi.Common.DependencyResolverExtensions.TryGetService(WeihanLi.Common.IDependencyResolver,System.Type,System.Object@)
  name.vb: TryGetService(IDependencyResolver, Type, Object)
  fullName: WeihanLi.Common.DependencyResolverExtensions.TryGetService(WeihanLi.Common.IDependencyResolver, System.Type, out object?)
  fullName.vb: WeihanLi.Common.DependencyResolverExtensions.TryGetService(WeihanLi.Common.IDependencyResolver, System.Type, Object)
  nameWithType: DependencyResolverExtensions.TryGetService(IDependencyResolver, Type, out object?)
  nameWithType.vb: DependencyResolverExtensions.TryGetService(IDependencyResolver, Type, Object)
- uid: WeihanLi.Common.DependencyResolverExtensions.TryGetService*
  name: TryGetService
  href: api/WeihanLi.Common.DependencyResolverExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyResolverExtensions.TryGetService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolverExtensions.TryGetService
  nameWithType: DependencyResolverExtensions.TryGetService
- uid: WeihanLi.Common.DependencyResolverExtensions.TryResolveService*
  name: TryResolveService
  href: api/WeihanLi.Common.DependencyResolverExtensions.yml
  commentId: Overload:WeihanLi.Common.DependencyResolverExtensions.TryResolveService
  isSpec: "True"
  fullName: WeihanLi.Common.DependencyResolverExtensions.TryResolveService
  nameWithType: DependencyResolverExtensions.TryResolveService
- uid: WeihanLi.Common.DependencyResolverExtensions.TryResolveService``1(WeihanLi.Common.IDependencyResolver,``0@)
  name: TryResolveService<TService>(IDependencyResolver, out TService?)
  href: api/WeihanLi.Common.DependencyResolverExtensions.yml
  commentId: M:WeihanLi.Common.DependencyResolverExtensions.TryResolveService``1(WeihanLi.Common.IDependencyResolver,``0@)
  name.vb: TryResolveService(Of TService)(IDependencyResolver, TService)
  fullName: WeihanLi.Common.DependencyResolverExtensions.TryResolveService<TService>(WeihanLi.Common.IDependencyResolver, out TService?)
  fullName.vb: WeihanLi.Common.DependencyResolverExtensions.TryResolveService(Of TService)(WeihanLi.Common.IDependencyResolver, TService)
  nameWithType: DependencyResolverExtensions.TryResolveService<TService>(IDependencyResolver, out TService?)
  nameWithType.vb: DependencyResolverExtensions.TryResolveService(Of TService)(IDependencyResolver, TService)
- uid: WeihanLi.Common.DisposableAction
  name: DisposableAction
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: T:WeihanLi.Common.DisposableAction
  fullName: WeihanLi.Common.DisposableAction
  nameWithType: DisposableAction
- uid: WeihanLi.Common.DisposableAction.#ctor(System.Action)
  name: DisposableAction(Action?)
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: M:WeihanLi.Common.DisposableAction.#ctor(System.Action)
  name.vb: New(Action)
  fullName: WeihanLi.Common.DisposableAction.DisposableAction(System.Action?)
  fullName.vb: WeihanLi.Common.DisposableAction.New(System.Action)
  nameWithType: DisposableAction.DisposableAction(Action?)
  nameWithType.vb: DisposableAction.New(Action)
- uid: WeihanLi.Common.DisposableAction.#ctor*
  name: DisposableAction
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: Overload:WeihanLi.Common.DisposableAction.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.DisposableAction.DisposableAction
  fullName.vb: WeihanLi.Common.DisposableAction.New
  nameWithType: DisposableAction.DisposableAction
  nameWithType.vb: DisposableAction.New
- uid: WeihanLi.Common.DisposableAction.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: M:WeihanLi.Common.DisposableAction.Dispose
  fullName: WeihanLi.Common.DisposableAction.Dispose()
  nameWithType: DisposableAction.Dispose()
- uid: WeihanLi.Common.DisposableAction.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: Overload:WeihanLi.Common.DisposableAction.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.DisposableAction.Dispose
  nameWithType: DisposableAction.Dispose
- uid: WeihanLi.Common.DisposableAction.Empty
  name: Empty
  href: api/WeihanLi.Common.DisposableAction.yml
  commentId: F:WeihanLi.Common.DisposableAction.Empty
  fullName: WeihanLi.Common.DisposableAction.Empty
  nameWithType: DisposableAction.Empty
- uid: WeihanLi.Common.Event
  name: WeihanLi.Common.Event
  href: api/WeihanLi.Common.Event.yml
  commentId: N:WeihanLi.Common.Event
  fullName: WeihanLi.Common.Event
  nameWithType: WeihanLi.Common.Event
- uid: WeihanLi.Common.Event.DefaultEventHandlerFactory
  name: DefaultEventHandlerFactory
  href: api/WeihanLi.Common.Event.DefaultEventHandlerFactory.yml
  commentId: T:WeihanLi.Common.Event.DefaultEventHandlerFactory
  fullName: WeihanLi.Common.Event.DefaultEventHandlerFactory
  nameWithType: DefaultEventHandlerFactory
- uid: WeihanLi.Common.Event.DefaultEventHandlerFactory.#ctor(WeihanLi.Common.Event.IEventSubscriptionManager,System.IServiceProvider)
  name: DefaultEventHandlerFactory(IEventSubscriptionManager, IServiceProvider)
  href: api/WeihanLi.Common.Event.DefaultEventHandlerFactory.yml
  commentId: M:WeihanLi.Common.Event.DefaultEventHandlerFactory.#ctor(WeihanLi.Common.Event.IEventSubscriptionManager,System.IServiceProvider)
  name.vb: New(IEventSubscriptionManager, IServiceProvider)
  fullName: WeihanLi.Common.Event.DefaultEventHandlerFactory.DefaultEventHandlerFactory(WeihanLi.Common.Event.IEventSubscriptionManager, System.IServiceProvider)
  fullName.vb: WeihanLi.Common.Event.DefaultEventHandlerFactory.New(WeihanLi.Common.Event.IEventSubscriptionManager, System.IServiceProvider)
  nameWithType: DefaultEventHandlerFactory.DefaultEventHandlerFactory(IEventSubscriptionManager, IServiceProvider)
  nameWithType.vb: DefaultEventHandlerFactory.New(IEventSubscriptionManager, IServiceProvider)
- uid: WeihanLi.Common.Event.DefaultEventHandlerFactory.#ctor*
  name: DefaultEventHandlerFactory
  href: api/WeihanLi.Common.Event.DefaultEventHandlerFactory.yml
  commentId: Overload:WeihanLi.Common.Event.DefaultEventHandlerFactory.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.DefaultEventHandlerFactory.DefaultEventHandlerFactory
  fullName.vb: WeihanLi.Common.Event.DefaultEventHandlerFactory.New
  nameWithType: DefaultEventHandlerFactory.DefaultEventHandlerFactory
  nameWithType.vb: DefaultEventHandlerFactory.New
- uid: WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers(System.Type)
  name: GetHandlers(Type)
  href: api/WeihanLi.Common.Event.DefaultEventHandlerFactory.yml
  commentId: M:WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers(System.Type)
  fullName: WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers(System.Type)
  nameWithType: DefaultEventHandlerFactory.GetHandlers(Type)
- uid: WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers*
  name: GetHandlers
  href: api/WeihanLi.Common.Event.DefaultEventHandlerFactory.yml
  commentId: Overload:WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers
  isSpec: "True"
  fullName: WeihanLi.Common.Event.DefaultEventHandlerFactory.GetHandlers
  nameWithType: DefaultEventHandlerFactory.GetHandlers
- uid: WeihanLi.Common.Event.DelegateEventHandler
  name: DelegateEventHandler
  href: api/WeihanLi.Common.Event.DelegateEventHandler.yml
  commentId: T:WeihanLi.Common.Event.DelegateEventHandler
  fullName: WeihanLi.Common.Event.DelegateEventHandler
  nameWithType: DelegateEventHandler
- uid: WeihanLi.Common.Event.DelegateEventHandler.FromAction*
  name: FromAction
  href: api/WeihanLi.Common.Event.DelegateEventHandler.yml
  commentId: Overload:WeihanLi.Common.Event.DelegateEventHandler.FromAction
  isSpec: "True"
  fullName: WeihanLi.Common.Event.DelegateEventHandler.FromAction
  nameWithType: DelegateEventHandler.FromAction
- uid: WeihanLi.Common.Event.DelegateEventHandler.FromAction``1(System.Action{``0})
  name: FromAction<TEvent>(Action<TEvent>)
  href: api/WeihanLi.Common.Event.DelegateEventHandler.yml
  commentId: M:WeihanLi.Common.Event.DelegateEventHandler.FromAction``1(System.Action{``0})
  name.vb: FromAction(Of TEvent)(Action(Of TEvent))
  fullName: WeihanLi.Common.Event.DelegateEventHandler.FromAction<TEvent>(System.Action<TEvent>)
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler.FromAction(Of TEvent)(System.Action(Of TEvent))
  nameWithType: DelegateEventHandler.FromAction<TEvent>(Action<TEvent>)
  nameWithType.vb: DelegateEventHandler.FromAction(Of TEvent)(Action(Of TEvent))
- uid: WeihanLi.Common.Event.DelegateEventHandler.FromFunc*
  name: FromFunc
  href: api/WeihanLi.Common.Event.DelegateEventHandler.yml
  commentId: Overload:WeihanLi.Common.Event.DelegateEventHandler.FromFunc
  isSpec: "True"
  fullName: WeihanLi.Common.Event.DelegateEventHandler.FromFunc
  nameWithType: DelegateEventHandler.FromFunc
- uid: WeihanLi.Common.Event.DelegateEventHandler.FromFunc``1(System.Func{``0,System.Threading.Tasks.Task})
  name: FromFunc<TEvent>(Func<TEvent, Task>)
  href: api/WeihanLi.Common.Event.DelegateEventHandler.yml
  commentId: M:WeihanLi.Common.Event.DelegateEventHandler.FromFunc``1(System.Func{``0,System.Threading.Tasks.Task})
  name.vb: FromFunc(Of TEvent)(Func(Of TEvent, Task))
  fullName: WeihanLi.Common.Event.DelegateEventHandler.FromFunc<TEvent>(System.Func<TEvent, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler.FromFunc(Of TEvent)(System.Func(Of TEvent, System.Threading.Tasks.Task))
  nameWithType: DelegateEventHandler.FromFunc<TEvent>(Func<TEvent, Task>)
  nameWithType.vb: DelegateEventHandler.FromFunc(Of TEvent)(Func(Of TEvent, Task))
- uid: WeihanLi.Common.Event.DelegateEventHandler`1
  name: DelegateEventHandler<TEvent>
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: T:WeihanLi.Common.Event.DelegateEventHandler`1
  name.vb: DelegateEventHandler(Of TEvent)
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent)
  nameWithType: DelegateEventHandler<TEvent>
  nameWithType.vb: DelegateEventHandler(Of TEvent)
- uid: WeihanLi.Common.Event.DelegateEventHandler`1.#ctor(System.Action{`0})
  name: DelegateEventHandler(Action<TEvent>)
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: M:WeihanLi.Common.Event.DelegateEventHandler`1.#ctor(System.Action{`0})
  name.vb: New(Action(Of TEvent))
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>.DelegateEventHandler(System.Action<TEvent>)
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent).New(System.Action(Of TEvent))
  nameWithType: DelegateEventHandler<TEvent>.DelegateEventHandler(Action<TEvent>)
  nameWithType.vb: DelegateEventHandler(Of TEvent).New(Action(Of TEvent))
- uid: WeihanLi.Common.Event.DelegateEventHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  name: DelegateEventHandler(Func<TEvent, Task>)
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: M:WeihanLi.Common.Event.DelegateEventHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  name.vb: New(Func(Of TEvent, Task))
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>.DelegateEventHandler(System.Func<TEvent, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent).New(System.Func(Of TEvent, System.Threading.Tasks.Task))
  nameWithType: DelegateEventHandler<TEvent>.DelegateEventHandler(Func<TEvent, Task>)
  nameWithType.vb: DelegateEventHandler(Of TEvent).New(Func(Of TEvent, Task))
- uid: WeihanLi.Common.Event.DelegateEventHandler`1.#ctor*
  name: DelegateEventHandler
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: Overload:WeihanLi.Common.Event.DelegateEventHandler`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>.DelegateEventHandler
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent).New
  nameWithType: DelegateEventHandler<TEvent>.DelegateEventHandler
  nameWithType.vb: DelegateEventHandler(Of TEvent).New
- uid: WeihanLi.Common.Event.DelegateEventHandler`1.Handle(`0)
  name: Handle(TEvent)
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: M:WeihanLi.Common.Event.DelegateEventHandler`1.Handle(`0)
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>.Handle(TEvent)
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent).Handle(TEvent)
  nameWithType: DelegateEventHandler<TEvent>.Handle(TEvent)
  nameWithType.vb: DelegateEventHandler(Of TEvent).Handle(TEvent)
- uid: WeihanLi.Common.Event.DelegateEventHandler`1.Handle*
  name: Handle
  href: api/WeihanLi.Common.Event.DelegateEventHandler-1.yml
  commentId: Overload:WeihanLi.Common.Event.DelegateEventHandler`1.Handle
  isSpec: "True"
  fullName: WeihanLi.Common.Event.DelegateEventHandler<TEvent>.Handle
  fullName.vb: WeihanLi.Common.Event.DelegateEventHandler(Of TEvent).Handle
  nameWithType: DelegateEventHandler<TEvent>.Handle
  nameWithType.vb: DelegateEventHandler(Of TEvent).Handle
- uid: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory
  name: DependencyInjectionEventHandlerFactory
  href: api/WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.yml
  commentId: T:WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory
  fullName: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory
  nameWithType: DependencyInjectionEventHandlerFactory
- uid: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.#ctor(System.IServiceProvider)
  name: DependencyInjectionEventHandlerFactory(IServiceProvider?)
  href: api/WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.yml
  commentId: M:WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.DependencyInjectionEventHandlerFactory(System.IServiceProvider?)
  fullName.vb: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.New(System.IServiceProvider)
  nameWithType: DependencyInjectionEventHandlerFactory.DependencyInjectionEventHandlerFactory(IServiceProvider?)
  nameWithType.vb: DependencyInjectionEventHandlerFactory.New(IServiceProvider)
- uid: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.#ctor*
  name: DependencyInjectionEventHandlerFactory
  href: api/WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.yml
  commentId: Overload:WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.DependencyInjectionEventHandlerFactory
  fullName.vb: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.New
  nameWithType: DependencyInjectionEventHandlerFactory.DependencyInjectionEventHandlerFactory
  nameWithType.vb: DependencyInjectionEventHandlerFactory.New
- uid: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers(System.Type)
  name: GetHandlers(Type)
  href: api/WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.yml
  commentId: M:WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers(System.Type)
  fullName: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers(System.Type)
  nameWithType: DependencyInjectionEventHandlerFactory.GetHandlers(Type)
- uid: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers*
  name: GetHandlers
  href: api/WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.yml
  commentId: Overload:WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers
  isSpec: "True"
  fullName: WeihanLi.Common.Event.DependencyInjectionEventHandlerFactory.GetHandlers
  nameWithType: DependencyInjectionEventHandlerFactory.GetHandlers
- uid: WeihanLi.Common.Event.EventBase
  name: EventBase
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: T:WeihanLi.Common.Event.EventBase
  fullName: WeihanLi.Common.Event.EventBase
  nameWithType: EventBase
- uid: WeihanLi.Common.Event.EventBase.#ctor
  name: EventBase()
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: M:WeihanLi.Common.Event.EventBase.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Event.EventBase.EventBase()
  fullName.vb: WeihanLi.Common.Event.EventBase.New()
  nameWithType: EventBase.EventBase()
  nameWithType.vb: EventBase.New()
- uid: WeihanLi.Common.Event.EventBase.#ctor(System.String,System.DateTimeOffset)
  name: EventBase(string, DateTimeOffset)
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: M:WeihanLi.Common.Event.EventBase.#ctor(System.String,System.DateTimeOffset)
  name.vb: New(String, DateTimeOffset)
  fullName: WeihanLi.Common.Event.EventBase.EventBase(string, System.DateTimeOffset)
  fullName.vb: WeihanLi.Common.Event.EventBase.New(String, System.DateTimeOffset)
  nameWithType: EventBase.EventBase(string, DateTimeOffset)
  nameWithType.vb: EventBase.New(String, DateTimeOffset)
- uid: WeihanLi.Common.Event.EventBase.#ctor(System.String)
  name: EventBase(string)
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: M:WeihanLi.Common.Event.EventBase.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Event.EventBase.EventBase(string)
  fullName.vb: WeihanLi.Common.Event.EventBase.New(String)
  nameWithType: EventBase.EventBase(string)
  nameWithType.vb: EventBase.New(String)
- uid: WeihanLi.Common.Event.EventBase.#ctor*
  name: EventBase
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: Overload:WeihanLi.Common.Event.EventBase.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.EventBase.EventBase
  fullName.vb: WeihanLi.Common.Event.EventBase.New
  nameWithType: EventBase.EventBase
  nameWithType.vb: EventBase.New
- uid: WeihanLi.Common.Event.EventBase.EventAt
  name: EventAt
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: P:WeihanLi.Common.Event.EventBase.EventAt
  fullName: WeihanLi.Common.Event.EventBase.EventAt
  nameWithType: EventBase.EventAt
- uid: WeihanLi.Common.Event.EventBase.EventAt*
  name: EventAt
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: Overload:WeihanLi.Common.Event.EventBase.EventAt
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBase.EventAt
  nameWithType: EventBase.EventAt
- uid: WeihanLi.Common.Event.EventBase.EventId
  name: EventId
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: P:WeihanLi.Common.Event.EventBase.EventId
  fullName: WeihanLi.Common.Event.EventBase.EventId
  nameWithType: EventBase.EventId
- uid: WeihanLi.Common.Event.EventBase.EventId*
  name: EventId
  href: api/WeihanLi.Common.Event.EventBase.yml
  commentId: Overload:WeihanLi.Common.Event.EventBase.EventId
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBase.EventId
  nameWithType: EventBase.EventId
- uid: WeihanLi.Common.Event.EventBaseExtensions
  name: EventBaseExtensions
  href: api/WeihanLi.Common.Event.EventBaseExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventBaseExtensions
  fullName: WeihanLi.Common.Event.EventBaseExtensions
  nameWithType: EventBaseExtensions
- uid: WeihanLi.Common.Event.EventBaseExtensions.ToEvent(System.String)
  name: ToEvent(string)
  href: api/WeihanLi.Common.Event.EventBaseExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBaseExtensions.ToEvent(System.String)
  name.vb: ToEvent(String)
  fullName: WeihanLi.Common.Event.EventBaseExtensions.ToEvent(string)
  fullName.vb: WeihanLi.Common.Event.EventBaseExtensions.ToEvent(String)
  nameWithType: EventBaseExtensions.ToEvent(string)
  nameWithType.vb: EventBaseExtensions.ToEvent(String)
- uid: WeihanLi.Common.Event.EventBaseExtensions.ToEvent*
  name: ToEvent
  href: api/WeihanLi.Common.Event.EventBaseExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventBaseExtensions.ToEvent
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBaseExtensions.ToEvent
  nameWithType: EventBaseExtensions.ToEvent
- uid: WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg*
  name: ToEventMsg
  href: api/WeihanLi.Common.Event.EventBaseExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg
  nameWithType: EventBaseExtensions.ToEventMsg
- uid: WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg``1(``0)
  name: ToEventMsg<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.EventBaseExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg``1(``0)
  name.vb: ToEventMsg(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventBaseExtensions.ToEventMsg(Of TEvent)(TEvent)
  nameWithType: EventBaseExtensions.ToEventMsg<TEvent>(TEvent)
  nameWithType.vb: EventBaseExtensions.ToEventMsg(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.EventBus
  name: EventBus
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: T:WeihanLi.Common.Event.EventBus
  fullName: WeihanLi.Common.Event.EventBus
  nameWithType: EventBus
- uid: WeihanLi.Common.Event.EventBus.#ctor(WeihanLi.Common.Event.IEventSubscriptionManager,WeihanLi.Common.Event.IEventHandlerFactory)
  name: EventBus(IEventSubscriptionManager, IEventHandlerFactory)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.#ctor(WeihanLi.Common.Event.IEventSubscriptionManager,WeihanLi.Common.Event.IEventHandlerFactory)
  name.vb: New(IEventSubscriptionManager, IEventHandlerFactory)
  fullName: WeihanLi.Common.Event.EventBus.EventBus(WeihanLi.Common.Event.IEventSubscriptionManager, WeihanLi.Common.Event.IEventHandlerFactory)
  fullName.vb: WeihanLi.Common.Event.EventBus.New(WeihanLi.Common.Event.IEventSubscriptionManager, WeihanLi.Common.Event.IEventHandlerFactory)
  nameWithType: EventBus.EventBus(IEventSubscriptionManager, IEventHandlerFactory)
  nameWithType.vb: EventBus.New(IEventSubscriptionManager, IEventHandlerFactory)
- uid: WeihanLi.Common.Event.EventBus.#ctor*
  name: EventBus
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.EventBus.EventBus
  fullName.vb: WeihanLi.Common.Event.EventBus.New
  nameWithType: EventBus.EventBus
  nameWithType.vb: EventBus.New
- uid: WeihanLi.Common.Event.EventBus.Publish*
  name: Publish
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.Publish
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.Publish
  nameWithType: EventBus.Publish
- uid: WeihanLi.Common.Event.EventBus.Publish``1(``0)
  name: Publish<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.Publish``1(``0)
  name.vb: Publish(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.EventBus.Publish<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventBus.Publish(Of TEvent)(TEvent)
  nameWithType: EventBus.Publish<TEvent>(TEvent)
  nameWithType.vb: EventBus.Publish(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.EventBus.PublishAsync*
  name: PublishAsync
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.PublishAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.PublishAsync
  nameWithType: EventBus.PublishAsync
- uid: WeihanLi.Common.Event.EventBus.PublishAsync``1(``0)
  name: PublishAsync<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.PublishAsync``1(``0)
  name.vb: PublishAsync(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.EventBus.PublishAsync<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventBus.PublishAsync(Of TEvent)(TEvent)
  nameWithType: EventBus.PublishAsync<TEvent>(TEvent)
  nameWithType.vb: EventBus.PublishAsync(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.EventBus.Subscribe(System.Type,System.Type)
  name: Subscribe(Type, Type)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.Subscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventBus.Subscribe(System.Type, System.Type)
  nameWithType: EventBus.Subscribe(Type, Type)
- uid: WeihanLi.Common.Event.EventBus.Subscribe*
  name: Subscribe
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.Subscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.Subscribe
  nameWithType: EventBus.Subscribe
- uid: WeihanLi.Common.Event.EventBus.SubscribeAsync(System.Type,System.Type)
  name: SubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.SubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventBus.SubscribeAsync(System.Type, System.Type)
  nameWithType: EventBus.SubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.EventBus.SubscribeAsync*
  name: SubscribeAsync
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.SubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.SubscribeAsync
  nameWithType: EventBus.SubscribeAsync
- uid: WeihanLi.Common.Event.EventBus.UnSubscribe(System.Type,System.Type)
  name: UnSubscribe(Type, Type)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.UnSubscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventBus.UnSubscribe(System.Type, System.Type)
  nameWithType: EventBus.UnSubscribe(Type, Type)
- uid: WeihanLi.Common.Event.EventBus.UnSubscribe*
  name: UnSubscribe
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.UnSubscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.UnSubscribe
  nameWithType: EventBus.UnSubscribe
- uid: WeihanLi.Common.Event.EventBus.UnSubscribeAsync(System.Type,System.Type)
  name: UnSubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: M:WeihanLi.Common.Event.EventBus.UnSubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventBus.UnSubscribeAsync(System.Type, System.Type)
  nameWithType: EventBus.UnSubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.EventBus.UnSubscribeAsync*
  name: UnSubscribeAsync
  href: api/WeihanLi.Common.Event.EventBus.yml
  commentId: Overload:WeihanLi.Common.Event.EventBus.UnSubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBus.UnSubscribeAsync
  nameWithType: EventBus.UnSubscribeAsync
- uid: WeihanLi.Common.Event.EventBusExtensions
  name: EventBusExtensions
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventBusExtensions
  fullName: WeihanLi.Common.Event.EventBusExtensions
  nameWithType: EventBusExtensions
- uid: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler*
  name: AddEventHandler
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventBusExtensions.AddEventHandler
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler
  nameWithType: EventBusExtensions.AddEventHandler
- uid: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler``1(WeihanLi.Common.Event.IEventBuilder,WeihanLi.Common.Event.IEventHandler{``0})
  name: AddEventHandler<TEvent>(IEventBuilder, IEventHandler<TEvent>)
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBusExtensions.AddEventHandler``1(WeihanLi.Common.Event.IEventBuilder,WeihanLi.Common.Event.IEventHandler{``0})
  name.vb: AddEventHandler(Of TEvent)(IEventBuilder, IEventHandler(Of TEvent))
  fullName: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler<TEvent>(WeihanLi.Common.Event.IEventBuilder, WeihanLi.Common.Event.IEventHandler<TEvent>)
  fullName.vb: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler(Of TEvent)(WeihanLi.Common.Event.IEventBuilder, WeihanLi.Common.Event.IEventHandler(Of TEvent))
  nameWithType: EventBusExtensions.AddEventHandler<TEvent>(IEventBuilder, IEventHandler<TEvent>)
  nameWithType.vb: EventBusExtensions.AddEventHandler(Of TEvent)(IEventBuilder, IEventHandler(Of TEvent))
- uid: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler``2(WeihanLi.Common.Event.IEventBuilder,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddEventHandler<TEvent, TEventHandler>(IEventBuilder, ServiceLifetime)
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBusExtensions.AddEventHandler``2(WeihanLi.Common.Event.IEventBuilder,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: AddEventHandler(Of TEvent, TEventHandler)(IEventBuilder, ServiceLifetime)
  fullName: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler<TEvent, TEventHandler>(WeihanLi.Common.Event.IEventBuilder, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName.vb: WeihanLi.Common.Event.EventBusExtensions.AddEventHandler(Of TEvent, TEventHandler)(WeihanLi.Common.Event.IEventBuilder, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: EventBusExtensions.AddEventHandler<TEvent, TEventHandler>(IEventBuilder, ServiceLifetime)
  nameWithType.vb: EventBusExtensions.AddEventHandler(Of TEvent, TEventHandler)(IEventBuilder, ServiceLifetime)
- uid: WeihanLi.Common.Event.EventBusExtensions.AddEvents(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddEvents(IServiceCollection)
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBusExtensions.AddEvents(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: WeihanLi.Common.Event.EventBusExtensions.AddEvents(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: EventBusExtensions.AddEvents(IServiceCollection)
- uid: WeihanLi.Common.Event.EventBusExtensions.AddEvents*
  name: AddEvents
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventBusExtensions.AddEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBusExtensions.AddEvents
  nameWithType: EventBusExtensions.AddEvents
- uid: WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers(WeihanLi.Common.Event.IEventBuilder,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name: RegisterEventHandlers(IEventBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers(WeihanLi.Common.Event.IEventBuilder,System.Func{System.Type,System.Boolean},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Reflection.Assembly[])
  name.vb: RegisterEventHandlers(IEventBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
  fullName: WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers(WeihanLi.Common.Event.IEventBuilder, System.Func<System.Type, bool>?, Microsoft.Extensions.DependencyInjection.ServiceLifetime, params System.Reflection.Assembly[])
  fullName.vb: WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers(WeihanLi.Common.Event.IEventBuilder, System.Func(Of System.Type, Boolean), Microsoft.Extensions.DependencyInjection.ServiceLifetime, ParamArray System.Reflection.Assembly())
  nameWithType: EventBusExtensions.RegisterEventHandlers(IEventBuilder, Func<Type, bool>?, ServiceLifetime, params Assembly[])
  nameWithType.vb: EventBusExtensions.RegisterEventHandlers(IEventBuilder, Func(Of Type, Boolean), ServiceLifetime, ParamArray Assembly())
- uid: WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers*
  name: RegisterEventHandlers
  href: api/WeihanLi.Common.Event.EventBusExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventBusExtensions.RegisterEventHandlers
  nameWithType: EventBusExtensions.RegisterEventHandlers
- uid: WeihanLi.Common.Event.EventHandlerBase`1
  name: EventHandlerBase<TEvent>
  href: api/WeihanLi.Common.Event.EventHandlerBase-1.yml
  commentId: T:WeihanLi.Common.Event.EventHandlerBase`1
  name.vb: EventHandlerBase(Of TEvent)
  fullName: WeihanLi.Common.Event.EventHandlerBase<TEvent>
  fullName.vb: WeihanLi.Common.Event.EventHandlerBase(Of TEvent)
  nameWithType: EventHandlerBase<TEvent>
  nameWithType.vb: EventHandlerBase(Of TEvent)
- uid: WeihanLi.Common.Event.EventHandlerBase`1.Handle(`0)
  name: Handle(TEvent)
  href: api/WeihanLi.Common.Event.EventHandlerBase-1.yml
  commentId: M:WeihanLi.Common.Event.EventHandlerBase`1.Handle(`0)
  fullName: WeihanLi.Common.Event.EventHandlerBase<TEvent>.Handle(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventHandlerBase(Of TEvent).Handle(TEvent)
  nameWithType: EventHandlerBase<TEvent>.Handle(TEvent)
  nameWithType.vb: EventHandlerBase(Of TEvent).Handle(TEvent)
- uid: WeihanLi.Common.Event.EventHandlerBase`1.Handle(System.Object)
  name: Handle(object)
  href: api/WeihanLi.Common.Event.EventHandlerBase-1.yml
  commentId: M:WeihanLi.Common.Event.EventHandlerBase`1.Handle(System.Object)
  name.vb: Handle(Object)
  fullName: WeihanLi.Common.Event.EventHandlerBase<TEvent>.Handle(object)
  fullName.vb: WeihanLi.Common.Event.EventHandlerBase(Of TEvent).Handle(Object)
  nameWithType: EventHandlerBase<TEvent>.Handle(object)
  nameWithType.vb: EventHandlerBase(Of TEvent).Handle(Object)
- uid: WeihanLi.Common.Event.EventHandlerBase`1.Handle*
  name: Handle
  href: api/WeihanLi.Common.Event.EventHandlerBase-1.yml
  commentId: Overload:WeihanLi.Common.Event.EventHandlerBase`1.Handle
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventHandlerBase<TEvent>.Handle
  fullName.vb: WeihanLi.Common.Event.EventHandlerBase(Of TEvent).Handle
  nameWithType: EventHandlerBase<TEvent>.Handle
  nameWithType.vb: EventHandlerBase(Of TEvent).Handle
- uid: WeihanLi.Common.Event.EventHandlerFactoryExtensions
  name: EventHandlerFactoryExtensions
  href: api/WeihanLi.Common.Event.EventHandlerFactoryExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventHandlerFactoryExtensions
  fullName: WeihanLi.Common.Event.EventHandlerFactoryExtensions
  nameWithType: EventHandlerFactoryExtensions
- uid: WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers*
  name: GetHandlers
  href: api/WeihanLi.Common.Event.EventHandlerFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers
  nameWithType: EventHandlerFactoryExtensions.GetHandlers
- uid: WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers``1(WeihanLi.Common.Event.IEventHandlerFactory)
  name: GetHandlers<TEvent>(IEventHandlerFactory)
  href: api/WeihanLi.Common.Event.EventHandlerFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers``1(WeihanLi.Common.Event.IEventHandlerFactory)
  name.vb: GetHandlers(Of TEvent)(IEventHandlerFactory)
  fullName: WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers<TEvent>(WeihanLi.Common.Event.IEventHandlerFactory)
  fullName.vb: WeihanLi.Common.Event.EventHandlerFactoryExtensions.GetHandlers(Of TEvent)(WeihanLi.Common.Event.IEventHandlerFactory)
  nameWithType: EventHandlerFactoryExtensions.GetHandlers<TEvent>(IEventHandlerFactory)
  nameWithType.vb: EventHandlerFactoryExtensions.GetHandlers(Of TEvent)(IEventHandlerFactory)
- uid: WeihanLi.Common.Event.EventQueueExtensions
  name: EventQueueExtensions
  href: api/WeihanLi.Common.Event.EventQueueExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventQueueExtensions
  fullName: WeihanLi.Common.Event.EventQueueExtensions
  nameWithType: EventQueueExtensions
- uid: WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync(WeihanLi.Common.Event.IEventQueue)
  name: DequeueAsync(IEventQueue)
  href: api/WeihanLi.Common.Event.EventQueueExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync(WeihanLi.Common.Event.IEventQueue)
  fullName: WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync(WeihanLi.Common.Event.IEventQueue)
  nameWithType: EventQueueExtensions.DequeueAsync(IEventQueue)
- uid: WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync*
  name: DequeueAsync
  href: api/WeihanLi.Common.Event.EventQueueExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueExtensions.DequeueAsync
  nameWithType: EventQueueExtensions.DequeueAsync
- uid: WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync*
  name: EnqueueAsync
  href: api/WeihanLi.Common.Event.EventQueueExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync
  nameWithType: EventQueueExtensions.EnqueueAsync
- uid: WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync``1(WeihanLi.Common.Event.IEventQueue,``0)
  name: EnqueueAsync<TEvent>(IEventQueue, TEvent)
  href: api/WeihanLi.Common.Event.EventQueueExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync``1(WeihanLi.Common.Event.IEventQueue,``0)
  name.vb: EnqueueAsync(Of TEvent)(IEventQueue, TEvent)
  fullName: WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync<TEvent>(WeihanLi.Common.Event.IEventQueue, TEvent)
  fullName.vb: WeihanLi.Common.Event.EventQueueExtensions.EnqueueAsync(Of TEvent)(WeihanLi.Common.Event.IEventQueue, TEvent)
  nameWithType: EventQueueExtensions.EnqueueAsync<TEvent>(IEventQueue, TEvent)
  nameWithType.vb: EventQueueExtensions.EnqueueAsync(Of TEvent)(IEventQueue, TEvent)
- uid: WeihanLi.Common.Event.EventQueueInMemory
  name: EventQueueInMemory
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: T:WeihanLi.Common.Event.EventQueueInMemory
  fullName: WeihanLi.Common.Event.EventQueueInMemory
  nameWithType: EventQueueInMemory
- uid: WeihanLi.Common.Event.EventQueueInMemory.Dequeue(System.String)
  name: Dequeue(string)
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.Dequeue(System.String)
  name.vb: Dequeue(String)
  fullName: WeihanLi.Common.Event.EventQueueInMemory.Dequeue(string)
  fullName.vb: WeihanLi.Common.Event.EventQueueInMemory.Dequeue(String)
  nameWithType: EventQueueInMemory.Dequeue(string)
  nameWithType.vb: EventQueueInMemory.Dequeue(String)
- uid: WeihanLi.Common.Event.EventQueueInMemory.Dequeue*
  name: Dequeue
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.Dequeue
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.Dequeue
  nameWithType: EventQueueInMemory.Dequeue
- uid: WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync(System.String)
  name: DequeueAsync(string)
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync(System.String)
  name.vb: DequeueAsync(String)
  fullName: WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync(string)
  fullName.vb: WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync(String)
  nameWithType: EventQueueInMemory.DequeueAsync(string)
  nameWithType.vb: EventQueueInMemory.DequeueAsync(String)
- uid: WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync*
  name: DequeueAsync
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.DequeueAsync
  nameWithType: EventQueueInMemory.DequeueAsync
- uid: WeihanLi.Common.Event.EventQueueInMemory.Enqueue*
  name: Enqueue
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.Enqueue
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.Enqueue
  nameWithType: EventQueueInMemory.Enqueue
- uid: WeihanLi.Common.Event.EventQueueInMemory.Enqueue``1(System.String,``0)
  name: Enqueue<TEvent>(string, TEvent)
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.Enqueue``1(System.String,``0)
  name.vb: Enqueue(Of TEvent)(String, TEvent)
  fullName: WeihanLi.Common.Event.EventQueueInMemory.Enqueue<TEvent>(string, TEvent)
  fullName.vb: WeihanLi.Common.Event.EventQueueInMemory.Enqueue(Of TEvent)(String, TEvent)
  nameWithType: EventQueueInMemory.Enqueue<TEvent>(string, TEvent)
  nameWithType.vb: EventQueueInMemory.Enqueue(Of TEvent)(String, TEvent)
- uid: WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync*
  name: EnqueueAsync
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync
  nameWithType: EventQueueInMemory.EnqueueAsync
- uid: WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync``1(System.String,``0)
  name: EnqueueAsync<TEvent>(string, TEvent)
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync``1(System.String,``0)
  name.vb: EnqueueAsync(Of TEvent)(String, TEvent)
  fullName: WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync<TEvent>(string, TEvent)
  fullName.vb: WeihanLi.Common.Event.EventQueueInMemory.EnqueueAsync(Of TEvent)(String, TEvent)
  nameWithType: EventQueueInMemory.EnqueueAsync<TEvent>(string, TEvent)
  nameWithType.vb: EventQueueInMemory.EnqueueAsync(Of TEvent)(String, TEvent)
- uid: WeihanLi.Common.Event.EventQueueInMemory.GetQueues
  name: GetQueues()
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.GetQueues
  fullName: WeihanLi.Common.Event.EventQueueInMemory.GetQueues()
  nameWithType: EventQueueInMemory.GetQueues()
- uid: WeihanLi.Common.Event.EventQueueInMemory.GetQueues*
  name: GetQueues
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.GetQueues
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.GetQueues
  nameWithType: EventQueueInMemory.GetQueues
- uid: WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync
  name: GetQueuesAsync()
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync
  fullName: WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync()
  nameWithType: EventQueueInMemory.GetQueuesAsync()
- uid: WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync*
  name: GetQueuesAsync
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.GetQueuesAsync
  nameWithType: EventQueueInMemory.GetQueuesAsync
- uid: WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue(System.String)
  name: TryRemoveQueue(string)
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue(System.String)
  name.vb: TryRemoveQueue(String)
  fullName: WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue(string)
  fullName.vb: WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue(String)
  nameWithType: EventQueueInMemory.TryRemoveQueue(string)
  nameWithType.vb: EventQueueInMemory.TryRemoveQueue(String)
- uid: WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue*
  name: TryRemoveQueue
  href: api/WeihanLi.Common.Event.EventQueueInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueueInMemory.TryRemoveQueue
  nameWithType: EventQueueInMemory.TryRemoveQueue
- uid: WeihanLi.Common.Event.EventQueuePublisher
  name: EventQueuePublisher
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: T:WeihanLi.Common.Event.EventQueuePublisher
  fullName: WeihanLi.Common.Event.EventQueuePublisher
  nameWithType: EventQueuePublisher
- uid: WeihanLi.Common.Event.EventQueuePublisher.#ctor(WeihanLi.Common.Event.IEventQueue,Microsoft.Extensions.Options.IOptions{WeihanLi.Common.Event.EventQueuePublisherOptions})
  name: EventQueuePublisher(IEventQueue, IOptions<EventQueuePublisherOptions>)
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: M:WeihanLi.Common.Event.EventQueuePublisher.#ctor(WeihanLi.Common.Event.IEventQueue,Microsoft.Extensions.Options.IOptions{WeihanLi.Common.Event.EventQueuePublisherOptions})
  name.vb: New(IEventQueue, IOptions(Of EventQueuePublisherOptions))
  fullName: WeihanLi.Common.Event.EventQueuePublisher.EventQueuePublisher(WeihanLi.Common.Event.IEventQueue, Microsoft.Extensions.Options.IOptions<WeihanLi.Common.Event.EventQueuePublisherOptions>)
  fullName.vb: WeihanLi.Common.Event.EventQueuePublisher.New(WeihanLi.Common.Event.IEventQueue, Microsoft.Extensions.Options.IOptions(Of WeihanLi.Common.Event.EventQueuePublisherOptions))
  nameWithType: EventQueuePublisher.EventQueuePublisher(IEventQueue, IOptions<EventQueuePublisherOptions>)
  nameWithType.vb: EventQueuePublisher.New(IEventQueue, IOptions(Of EventQueuePublisherOptions))
- uid: WeihanLi.Common.Event.EventQueuePublisher.#ctor*
  name: EventQueuePublisher
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueuePublisher.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Event.EventQueuePublisher.EventQueuePublisher
  fullName.vb: WeihanLi.Common.Event.EventQueuePublisher.New
  nameWithType: EventQueuePublisher.EventQueuePublisher
  nameWithType.vb: EventQueuePublisher.New
- uid: WeihanLi.Common.Event.EventQueuePublisher.Publish*
  name: Publish
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueuePublisher.Publish
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueuePublisher.Publish
  nameWithType: EventQueuePublisher.Publish
- uid: WeihanLi.Common.Event.EventQueuePublisher.Publish``1(``0)
  name: Publish<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: M:WeihanLi.Common.Event.EventQueuePublisher.Publish``1(``0)
  name.vb: Publish(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.EventQueuePublisher.Publish<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventQueuePublisher.Publish(Of TEvent)(TEvent)
  nameWithType: EventQueuePublisher.Publish<TEvent>(TEvent)
  nameWithType.vb: EventQueuePublisher.Publish(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.EventQueuePublisher.PublishAsync*
  name: PublishAsync
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueuePublisher.PublishAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueuePublisher.PublishAsync
  nameWithType: EventQueuePublisher.PublishAsync
- uid: WeihanLi.Common.Event.EventQueuePublisher.PublishAsync``1(``0)
  name: PublishAsync<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.EventQueuePublisher.yml
  commentId: M:WeihanLi.Common.Event.EventQueuePublisher.PublishAsync``1(``0)
  name.vb: PublishAsync(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.EventQueuePublisher.PublishAsync<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.EventQueuePublisher.PublishAsync(Of TEvent)(TEvent)
  nameWithType: EventQueuePublisher.PublishAsync<TEvent>(TEvent)
  nameWithType.vb: EventQueuePublisher.PublishAsync(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.EventQueuePublisherOptions
  name: EventQueuePublisherOptions
  href: api/WeihanLi.Common.Event.EventQueuePublisherOptions.yml
  commentId: T:WeihanLi.Common.Event.EventQueuePublisherOptions
  fullName: WeihanLi.Common.Event.EventQueuePublisherOptions
  nameWithType: EventQueuePublisherOptions
- uid: WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver
  name: EventQueueNameResolver
  href: api/WeihanLi.Common.Event.EventQueuePublisherOptions.yml
  commentId: P:WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver
  fullName: WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver
  nameWithType: EventQueuePublisherOptions.EventQueueNameResolver
- uid: WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver*
  name: EventQueueNameResolver
  href: api/WeihanLi.Common.Event.EventQueuePublisherOptions.yml
  commentId: Overload:WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventQueuePublisherOptions.EventQueueNameResolver
  nameWithType: EventQueuePublisherOptions.EventQueueNameResolver
- uid: WeihanLi.Common.Event.EventStoreInMemory
  name: EventStoreInMemory
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: T:WeihanLi.Common.Event.EventStoreInMemory
  fullName: WeihanLi.Common.Event.EventStoreInMemory
  nameWithType: EventStoreInMemory
- uid: WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents(System.Collections.Generic.ICollection{System.String})
  name: DeleteEvents(ICollection<string>)
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents(System.Collections.Generic.ICollection{System.String})
  name.vb: DeleteEvents(ICollection(Of String))
  fullName: WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents(System.Collections.Generic.ICollection<string>)
  fullName.vb: WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents(System.Collections.Generic.ICollection(Of String))
  nameWithType: EventStoreInMemory.DeleteEvents(ICollection<string>)
  nameWithType.vb: EventStoreInMemory.DeleteEvents(ICollection(Of String))
- uid: WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents*
  name: DeleteEvents
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventStoreInMemory.DeleteEvents
  nameWithType: EventStoreInMemory.DeleteEvents
- uid: WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync(System.Collections.Generic.ICollection{System.String})
  name: DeleteEventsAsync(ICollection<string>)
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync(System.Collections.Generic.ICollection{System.String})
  name.vb: DeleteEventsAsync(ICollection(Of String))
  fullName: WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync(System.Collections.Generic.ICollection<string>)
  fullName.vb: WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync(System.Collections.Generic.ICollection(Of String))
  nameWithType: EventStoreInMemory.DeleteEventsAsync(ICollection<string>)
  nameWithType.vb: EventStoreInMemory.DeleteEventsAsync(ICollection(Of String))
- uid: WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync*
  name: DeleteEventsAsync
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventStoreInMemory.DeleteEventsAsync
  nameWithType: EventStoreInMemory.DeleteEventsAsync
- uid: WeihanLi.Common.Event.EventStoreInMemory.SaveEvents(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name: SaveEvents(ICollection<IEventBase>)
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventStoreInMemory.SaveEvents(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name.vb: SaveEvents(ICollection(Of IEventBase))
  fullName: WeihanLi.Common.Event.EventStoreInMemory.SaveEvents(System.Collections.Generic.ICollection<WeihanLi.Common.Event.IEventBase>)
  fullName.vb: WeihanLi.Common.Event.EventStoreInMemory.SaveEvents(System.Collections.Generic.ICollection(Of WeihanLi.Common.Event.IEventBase))
  nameWithType: EventStoreInMemory.SaveEvents(ICollection<IEventBase>)
  nameWithType.vb: EventStoreInMemory.SaveEvents(ICollection(Of IEventBase))
- uid: WeihanLi.Common.Event.EventStoreInMemory.SaveEvents*
  name: SaveEvents
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventStoreInMemory.SaveEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventStoreInMemory.SaveEvents
  nameWithType: EventStoreInMemory.SaveEvents
- uid: WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name: SaveEventsAsync(ICollection<IEventBase>)
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name.vb: SaveEventsAsync(ICollection(Of IEventBase))
  fullName: WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync(System.Collections.Generic.ICollection<WeihanLi.Common.Event.IEventBase>)
  fullName.vb: WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync(System.Collections.Generic.ICollection(Of WeihanLi.Common.Event.IEventBase))
  nameWithType: EventStoreInMemory.SaveEventsAsync(ICollection<IEventBase>)
  nameWithType.vb: EventStoreInMemory.SaveEventsAsync(ICollection(Of IEventBase))
- uid: WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync*
  name: SaveEventsAsync
  href: api/WeihanLi.Common.Event.EventStoreInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventStoreInMemory.SaveEventsAsync
  nameWithType: EventStoreInMemory.SaveEventsAsync
- uid: WeihanLi.Common.Event.EventSubscriberExtensions
  name: EventSubscriberExtensions
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventSubscriberExtensions
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions
  nameWithType: EventSubscriberExtensions
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe*
  name: Subscribe
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe
  nameWithType: EventSubscriberExtensions.Subscribe
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe``2(WeihanLi.Common.Event.IEventSubscriber)
  name: Subscribe<TEvent, TEventHandler>(IEventSubscriber)
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe``2(WeihanLi.Common.Event.IEventSubscriber)
  name.vb: Subscribe(Of TEvent, TEventHandler)(IEventSubscriber)
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe<TEvent, TEventHandler>(WeihanLi.Common.Event.IEventSubscriber)
  fullName.vb: WeihanLi.Common.Event.EventSubscriberExtensions.Subscribe(Of TEvent, TEventHandler)(WeihanLi.Common.Event.IEventSubscriber)
  nameWithType: EventSubscriberExtensions.Subscribe<TEvent, TEventHandler>(IEventSubscriber)
  nameWithType.vb: EventSubscriberExtensions.Subscribe(Of TEvent, TEventHandler)(IEventSubscriber)
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync*
  name: SubscribeAsync
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync
  nameWithType: EventSubscriberExtensions.SubscribeAsync
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync``2(WeihanLi.Common.Event.IEventSubscriber)
  name: SubscribeAsync<TEvent, TEventHandler>(IEventSubscriber)
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync``2(WeihanLi.Common.Event.IEventSubscriber)
  name.vb: SubscribeAsync(Of TEvent, TEventHandler)(IEventSubscriber)
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync<TEvent, TEventHandler>(WeihanLi.Common.Event.IEventSubscriber)
  fullName.vb: WeihanLi.Common.Event.EventSubscriberExtensions.SubscribeAsync(Of TEvent, TEventHandler)(WeihanLi.Common.Event.IEventSubscriber)
  nameWithType: EventSubscriberExtensions.SubscribeAsync<TEvent, TEventHandler>(IEventSubscriber)
  nameWithType.vb: EventSubscriberExtensions.SubscribeAsync(Of TEvent, TEventHandler)(IEventSubscriber)
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe*
  name: UnSubscribe
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe
  nameWithType: EventSubscriberExtensions.UnSubscribe
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe``2(WeihanLi.Common.Event.IEventSubscriber)
  name: UnSubscribe<TEvent, TEventHandler>(IEventSubscriber)
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe``2(WeihanLi.Common.Event.IEventSubscriber)
  name.vb: UnSubscribe(Of TEvent, TEventHandler)(IEventSubscriber)
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe<TEvent, TEventHandler>(WeihanLi.Common.Event.IEventSubscriber)
  fullName.vb: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribe(Of TEvent, TEventHandler)(WeihanLi.Common.Event.IEventSubscriber)
  nameWithType: EventSubscriberExtensions.UnSubscribe<TEvent, TEventHandler>(IEventSubscriber)
  nameWithType.vb: EventSubscriberExtensions.UnSubscribe(Of TEvent, TEventHandler)(IEventSubscriber)
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync*
  name: UnSubscribeAsync
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync
  nameWithType: EventSubscriberExtensions.UnSubscribeAsync
- uid: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync``2(WeihanLi.Common.Event.IEventSubscriber)
  name: UnSubscribeAsync<TEvent, TEventHandler>(IEventSubscriber)
  href: api/WeihanLi.Common.Event.EventSubscriberExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync``2(WeihanLi.Common.Event.IEventSubscriber)
  name.vb: UnSubscribeAsync(Of TEvent, TEventHandler)(IEventSubscriber)
  fullName: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync<TEvent, TEventHandler>(WeihanLi.Common.Event.IEventSubscriber)
  fullName.vb: WeihanLi.Common.Event.EventSubscriberExtensions.UnSubscribeAsync(Of TEvent, TEventHandler)(WeihanLi.Common.Event.IEventSubscriber)
  nameWithType: EventSubscriberExtensions.UnSubscribeAsync<TEvent, TEventHandler>(IEventSubscriber)
  nameWithType.vb: EventSubscriberExtensions.UnSubscribeAsync(Of TEvent, TEventHandler)(IEventSubscriber)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerExtensions
  name: EventSubscriptionManagerExtensions
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerExtensions.yml
  commentId: T:WeihanLi.Common.Event.EventSubscriptionManagerExtensions
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerExtensions
  nameWithType: EventSubscriptionManagerExtensions
- uid: WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes*
  name: GetEventHandlerTypes
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerExtensions.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes
  nameWithType: EventSubscriptionManagerExtensions.GetEventHandlerTypes
- uid: WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes``1(WeihanLi.Common.Event.IEventSubscriptionManager)
  name: GetEventHandlerTypes<TEvent>(IEventSubscriptionManager)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerExtensions.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes``1(WeihanLi.Common.Event.IEventSubscriptionManager)
  name.vb: GetEventHandlerTypes(Of TEvent)(IEventSubscriptionManager)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes<TEvent>(WeihanLi.Common.Event.IEventSubscriptionManager)
  fullName.vb: WeihanLi.Common.Event.EventSubscriptionManagerExtensions.GetEventHandlerTypes(Of TEvent)(WeihanLi.Common.Event.IEventSubscriptionManager)
  nameWithType: EventSubscriptionManagerExtensions.GetEventHandlerTypes<TEvent>(IEventSubscriptionManager)
  nameWithType.vb: EventSubscriptionManagerExtensions.GetEventHandlerTypes(Of TEvent)(IEventSubscriptionManager)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory
  name: EventSubscriptionManagerInMemory
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: T:WeihanLi.Common.Event.EventSubscriptionManagerInMemory
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory
  nameWithType: EventSubscriptionManagerInMemory
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes(System.Type)
  name: GetEventHandlerTypes(Type)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes(System.Type)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes(System.Type)
  nameWithType: EventSubscriptionManagerInMemory.GetEventHandlerTypes(Type)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes*
  name: GetEventHandlerTypes
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.GetEventHandlerTypes
  nameWithType: EventSubscriptionManagerInMemory.GetEventHandlerTypes
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe(System.Type,System.Type)
  name: Subscribe(Type, Type)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe(System.Type, System.Type)
  nameWithType: EventSubscriptionManagerInMemory.Subscribe(Type, Type)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe*
  name: Subscribe
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.Subscribe
  nameWithType: EventSubscriptionManagerInMemory.Subscribe
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync(System.Type,System.Type)
  name: SubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync(System.Type, System.Type)
  nameWithType: EventSubscriptionManagerInMemory.SubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync*
  name: SubscribeAsync
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.SubscribeAsync
  nameWithType: EventSubscriptionManagerInMemory.SubscribeAsync
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe(System.Type,System.Type)
  name: UnSubscribe(Type, Type)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe(System.Type, System.Type)
  nameWithType: EventSubscriptionManagerInMemory.UnSubscribe(Type, Type)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe*
  name: UnSubscribe
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribe
  nameWithType: EventSubscriptionManagerInMemory.UnSubscribe
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync(System.Type,System.Type)
  name: UnSubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: M:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync(System.Type, System.Type)
  nameWithType: EventSubscriptionManagerInMemory.UnSubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync*
  name: UnSubscribeAsync
  href: api/WeihanLi.Common.Event.EventSubscriptionManagerInMemory.yml
  commentId: Overload:WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.EventSubscriptionManagerInMemory.UnSubscribeAsync
  nameWithType: EventSubscriptionManagerInMemory.UnSubscribeAsync
- uid: WeihanLi.Common.Event.IEventBase
  name: IEventBase
  href: api/WeihanLi.Common.Event.IEventBase.yml
  commentId: T:WeihanLi.Common.Event.IEventBase
  fullName: WeihanLi.Common.Event.IEventBase
  nameWithType: IEventBase
- uid: WeihanLi.Common.Event.IEventBase.EventAt
  name: EventAt
  href: api/WeihanLi.Common.Event.IEventBase.yml
  commentId: P:WeihanLi.Common.Event.IEventBase.EventAt
  fullName: WeihanLi.Common.Event.IEventBase.EventAt
  nameWithType: IEventBase.EventAt
- uid: WeihanLi.Common.Event.IEventBase.EventAt*
  name: EventAt
  href: api/WeihanLi.Common.Event.IEventBase.yml
  commentId: Overload:WeihanLi.Common.Event.IEventBase.EventAt
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventBase.EventAt
  nameWithType: IEventBase.EventAt
- uid: WeihanLi.Common.Event.IEventBase.EventId
  name: EventId
  href: api/WeihanLi.Common.Event.IEventBase.yml
  commentId: P:WeihanLi.Common.Event.IEventBase.EventId
  fullName: WeihanLi.Common.Event.IEventBase.EventId
  nameWithType: IEventBase.EventId
- uid: WeihanLi.Common.Event.IEventBase.EventId*
  name: EventId
  href: api/WeihanLi.Common.Event.IEventBase.yml
  commentId: Overload:WeihanLi.Common.Event.IEventBase.EventId
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventBase.EventId
  nameWithType: IEventBase.EventId
- uid: WeihanLi.Common.Event.IEventBuilder
  name: IEventBuilder
  href: api/WeihanLi.Common.Event.IEventBuilder.yml
  commentId: T:WeihanLi.Common.Event.IEventBuilder
  fullName: WeihanLi.Common.Event.IEventBuilder
  nameWithType: IEventBuilder
- uid: WeihanLi.Common.Event.IEventBuilder.Services
  name: Services
  href: api/WeihanLi.Common.Event.IEventBuilder.yml
  commentId: P:WeihanLi.Common.Event.IEventBuilder.Services
  fullName: WeihanLi.Common.Event.IEventBuilder.Services
  nameWithType: IEventBuilder.Services
- uid: WeihanLi.Common.Event.IEventBuilder.Services*
  name: Services
  href: api/WeihanLi.Common.Event.IEventBuilder.yml
  commentId: Overload:WeihanLi.Common.Event.IEventBuilder.Services
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventBuilder.Services
  nameWithType: IEventBuilder.Services
- uid: WeihanLi.Common.Event.IEventBus
  name: IEventBus
  href: api/WeihanLi.Common.Event.IEventBus.yml
  commentId: T:WeihanLi.Common.Event.IEventBus
  fullName: WeihanLi.Common.Event.IEventBus
  nameWithType: IEventBus
- uid: WeihanLi.Common.Event.IEventHandler
  name: IEventHandler
  href: api/WeihanLi.Common.Event.IEventHandler.yml
  commentId: T:WeihanLi.Common.Event.IEventHandler
  fullName: WeihanLi.Common.Event.IEventHandler
  nameWithType: IEventHandler
- uid: WeihanLi.Common.Event.IEventHandler.Handle(System.Object)
  name: Handle(object)
  href: api/WeihanLi.Common.Event.IEventHandler.yml
  commentId: M:WeihanLi.Common.Event.IEventHandler.Handle(System.Object)
  name.vb: Handle(Object)
  fullName: WeihanLi.Common.Event.IEventHandler.Handle(object)
  fullName.vb: WeihanLi.Common.Event.IEventHandler.Handle(Object)
  nameWithType: IEventHandler.Handle(object)
  nameWithType.vb: IEventHandler.Handle(Object)
- uid: WeihanLi.Common.Event.IEventHandler.Handle*
  name: Handle
  href: api/WeihanLi.Common.Event.IEventHandler.yml
  commentId: Overload:WeihanLi.Common.Event.IEventHandler.Handle
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventHandler.Handle
  nameWithType: IEventHandler.Handle
- uid: WeihanLi.Common.Event.IEventHandler`1
  name: IEventHandler<TEvent>
  href: api/WeihanLi.Common.Event.IEventHandler-1.yml
  commentId: T:WeihanLi.Common.Event.IEventHandler`1
  name.vb: IEventHandler(Of TEvent)
  fullName: WeihanLi.Common.Event.IEventHandler<TEvent>
  fullName.vb: WeihanLi.Common.Event.IEventHandler(Of TEvent)
  nameWithType: IEventHandler<TEvent>
  nameWithType.vb: IEventHandler(Of TEvent)
- uid: WeihanLi.Common.Event.IEventHandler`1.Handle(`0)
  name: Handle(TEvent)
  href: api/WeihanLi.Common.Event.IEventHandler-1.yml
  commentId: M:WeihanLi.Common.Event.IEventHandler`1.Handle(`0)
  fullName: WeihanLi.Common.Event.IEventHandler<TEvent>.Handle(TEvent)
  fullName.vb: WeihanLi.Common.Event.IEventHandler(Of TEvent).Handle(TEvent)
  nameWithType: IEventHandler<TEvent>.Handle(TEvent)
  nameWithType.vb: IEventHandler(Of TEvent).Handle(TEvent)
- uid: WeihanLi.Common.Event.IEventHandler`1.Handle*
  name: Handle
  href: api/WeihanLi.Common.Event.IEventHandler-1.yml
  commentId: Overload:WeihanLi.Common.Event.IEventHandler`1.Handle
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventHandler<TEvent>.Handle
  fullName.vb: WeihanLi.Common.Event.IEventHandler(Of TEvent).Handle
  nameWithType: IEventHandler<TEvent>.Handle
  nameWithType.vb: IEventHandler(Of TEvent).Handle
- uid: WeihanLi.Common.Event.IEventHandlerFactory
  name: IEventHandlerFactory
  href: api/WeihanLi.Common.Event.IEventHandlerFactory.yml
  commentId: T:WeihanLi.Common.Event.IEventHandlerFactory
  fullName: WeihanLi.Common.Event.IEventHandlerFactory
  nameWithType: IEventHandlerFactory
- uid: WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers(System.Type)
  name: GetHandlers(Type)
  href: api/WeihanLi.Common.Event.IEventHandlerFactory.yml
  commentId: M:WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers(System.Type)
  fullName: WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers(System.Type)
  nameWithType: IEventHandlerFactory.GetHandlers(Type)
- uid: WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers*
  name: GetHandlers
  href: api/WeihanLi.Common.Event.IEventHandlerFactory.yml
  commentId: Overload:WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventHandlerFactory.GetHandlers
  nameWithType: IEventHandlerFactory.GetHandlers
- uid: WeihanLi.Common.Event.IEventPublisher
  name: IEventPublisher
  href: api/WeihanLi.Common.Event.IEventPublisher.yml
  commentId: T:WeihanLi.Common.Event.IEventPublisher
  fullName: WeihanLi.Common.Event.IEventPublisher
  nameWithType: IEventPublisher
- uid: WeihanLi.Common.Event.IEventPublisher.Publish*
  name: Publish
  href: api/WeihanLi.Common.Event.IEventPublisher.yml
  commentId: Overload:WeihanLi.Common.Event.IEventPublisher.Publish
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventPublisher.Publish
  nameWithType: IEventPublisher.Publish
- uid: WeihanLi.Common.Event.IEventPublisher.Publish``1(``0)
  name: Publish<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.IEventPublisher.yml
  commentId: M:WeihanLi.Common.Event.IEventPublisher.Publish``1(``0)
  name.vb: Publish(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.IEventPublisher.Publish<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.IEventPublisher.Publish(Of TEvent)(TEvent)
  nameWithType: IEventPublisher.Publish<TEvent>(TEvent)
  nameWithType.vb: IEventPublisher.Publish(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.IEventPublisher.PublishAsync*
  name: PublishAsync
  href: api/WeihanLi.Common.Event.IEventPublisher.yml
  commentId: Overload:WeihanLi.Common.Event.IEventPublisher.PublishAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventPublisher.PublishAsync
  nameWithType: IEventPublisher.PublishAsync
- uid: WeihanLi.Common.Event.IEventPublisher.PublishAsync``1(``0)
  name: PublishAsync<TEvent>(TEvent)
  href: api/WeihanLi.Common.Event.IEventPublisher.yml
  commentId: M:WeihanLi.Common.Event.IEventPublisher.PublishAsync``1(``0)
  name.vb: PublishAsync(Of TEvent)(TEvent)
  fullName: WeihanLi.Common.Event.IEventPublisher.PublishAsync<TEvent>(TEvent)
  fullName.vb: WeihanLi.Common.Event.IEventPublisher.PublishAsync(Of TEvent)(TEvent)
  nameWithType: IEventPublisher.PublishAsync<TEvent>(TEvent)
  nameWithType.vb: IEventPublisher.PublishAsync(Of TEvent)(TEvent)
- uid: WeihanLi.Common.Event.IEventQueue
  name: IEventQueue
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: T:WeihanLi.Common.Event.IEventQueue
  fullName: WeihanLi.Common.Event.IEventQueue
  nameWithType: IEventQueue
- uid: WeihanLi.Common.Event.IEventQueue.DequeueAsync(System.String)
  name: DequeueAsync(string)
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: M:WeihanLi.Common.Event.IEventQueue.DequeueAsync(System.String)
  name.vb: DequeueAsync(String)
  fullName: WeihanLi.Common.Event.IEventQueue.DequeueAsync(string)
  fullName.vb: WeihanLi.Common.Event.IEventQueue.DequeueAsync(String)
  nameWithType: IEventQueue.DequeueAsync(string)
  nameWithType.vb: IEventQueue.DequeueAsync(String)
- uid: WeihanLi.Common.Event.IEventQueue.DequeueAsync*
  name: DequeueAsync
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: Overload:WeihanLi.Common.Event.IEventQueue.DequeueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventQueue.DequeueAsync
  nameWithType: IEventQueue.DequeueAsync
- uid: WeihanLi.Common.Event.IEventQueue.EnqueueAsync*
  name: EnqueueAsync
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: Overload:WeihanLi.Common.Event.IEventQueue.EnqueueAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventQueue.EnqueueAsync
  nameWithType: IEventQueue.EnqueueAsync
- uid: WeihanLi.Common.Event.IEventQueue.EnqueueAsync``1(System.String,``0)
  name: EnqueueAsync<TEvent>(string, TEvent)
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: M:WeihanLi.Common.Event.IEventQueue.EnqueueAsync``1(System.String,``0)
  name.vb: EnqueueAsync(Of TEvent)(String, TEvent)
  fullName: WeihanLi.Common.Event.IEventQueue.EnqueueAsync<TEvent>(string, TEvent)
  fullName.vb: WeihanLi.Common.Event.IEventQueue.EnqueueAsync(Of TEvent)(String, TEvent)
  nameWithType: IEventQueue.EnqueueAsync<TEvent>(string, TEvent)
  nameWithType.vb: IEventQueue.EnqueueAsync(Of TEvent)(String, TEvent)
- uid: WeihanLi.Common.Event.IEventQueue.GetQueuesAsync
  name: GetQueuesAsync()
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: M:WeihanLi.Common.Event.IEventQueue.GetQueuesAsync
  fullName: WeihanLi.Common.Event.IEventQueue.GetQueuesAsync()
  nameWithType: IEventQueue.GetQueuesAsync()
- uid: WeihanLi.Common.Event.IEventQueue.GetQueuesAsync*
  name: GetQueuesAsync
  href: api/WeihanLi.Common.Event.IEventQueue.yml
  commentId: Overload:WeihanLi.Common.Event.IEventQueue.GetQueuesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventQueue.GetQueuesAsync
  nameWithType: IEventQueue.GetQueuesAsync
- uid: WeihanLi.Common.Event.IEventStore
  name: IEventStore
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: T:WeihanLi.Common.Event.IEventStore
  fullName: WeihanLi.Common.Event.IEventStore
  nameWithType: IEventStore
- uid: WeihanLi.Common.Event.IEventStore.DeleteEvents(System.Collections.Generic.ICollection{System.String})
  name: DeleteEvents(ICollection<string>)
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: M:WeihanLi.Common.Event.IEventStore.DeleteEvents(System.Collections.Generic.ICollection{System.String})
  name.vb: DeleteEvents(ICollection(Of String))
  fullName: WeihanLi.Common.Event.IEventStore.DeleteEvents(System.Collections.Generic.ICollection<string>)
  fullName.vb: WeihanLi.Common.Event.IEventStore.DeleteEvents(System.Collections.Generic.ICollection(Of String))
  nameWithType: IEventStore.DeleteEvents(ICollection<string>)
  nameWithType.vb: IEventStore.DeleteEvents(ICollection(Of String))
- uid: WeihanLi.Common.Event.IEventStore.DeleteEvents*
  name: DeleteEvents
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: Overload:WeihanLi.Common.Event.IEventStore.DeleteEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventStore.DeleteEvents
  nameWithType: IEventStore.DeleteEvents
- uid: WeihanLi.Common.Event.IEventStore.DeleteEventsAsync(System.Collections.Generic.ICollection{System.String})
  name: DeleteEventsAsync(ICollection<string>)
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: M:WeihanLi.Common.Event.IEventStore.DeleteEventsAsync(System.Collections.Generic.ICollection{System.String})
  name.vb: DeleteEventsAsync(ICollection(Of String))
  fullName: WeihanLi.Common.Event.IEventStore.DeleteEventsAsync(System.Collections.Generic.ICollection<string>)
  fullName.vb: WeihanLi.Common.Event.IEventStore.DeleteEventsAsync(System.Collections.Generic.ICollection(Of String))
  nameWithType: IEventStore.DeleteEventsAsync(ICollection<string>)
  nameWithType.vb: IEventStore.DeleteEventsAsync(ICollection(Of String))
- uid: WeihanLi.Common.Event.IEventStore.DeleteEventsAsync*
  name: DeleteEventsAsync
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: Overload:WeihanLi.Common.Event.IEventStore.DeleteEventsAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventStore.DeleteEventsAsync
  nameWithType: IEventStore.DeleteEventsAsync
- uid: WeihanLi.Common.Event.IEventStore.SaveEvents(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name: SaveEvents(ICollection<IEventBase>)
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: M:WeihanLi.Common.Event.IEventStore.SaveEvents(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name.vb: SaveEvents(ICollection(Of IEventBase))
  fullName: WeihanLi.Common.Event.IEventStore.SaveEvents(System.Collections.Generic.ICollection<WeihanLi.Common.Event.IEventBase>)
  fullName.vb: WeihanLi.Common.Event.IEventStore.SaveEvents(System.Collections.Generic.ICollection(Of WeihanLi.Common.Event.IEventBase))
  nameWithType: IEventStore.SaveEvents(ICollection<IEventBase>)
  nameWithType.vb: IEventStore.SaveEvents(ICollection(Of IEventBase))
- uid: WeihanLi.Common.Event.IEventStore.SaveEvents*
  name: SaveEvents
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: Overload:WeihanLi.Common.Event.IEventStore.SaveEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventStore.SaveEvents
  nameWithType: IEventStore.SaveEvents
- uid: WeihanLi.Common.Event.IEventStore.SaveEventsAsync(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name: SaveEventsAsync(ICollection<IEventBase>)
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: M:WeihanLi.Common.Event.IEventStore.SaveEventsAsync(System.Collections.Generic.ICollection{WeihanLi.Common.Event.IEventBase})
  name.vb: SaveEventsAsync(ICollection(Of IEventBase))
  fullName: WeihanLi.Common.Event.IEventStore.SaveEventsAsync(System.Collections.Generic.ICollection<WeihanLi.Common.Event.IEventBase>)
  fullName.vb: WeihanLi.Common.Event.IEventStore.SaveEventsAsync(System.Collections.Generic.ICollection(Of WeihanLi.Common.Event.IEventBase))
  nameWithType: IEventStore.SaveEventsAsync(ICollection<IEventBase>)
  nameWithType.vb: IEventStore.SaveEventsAsync(ICollection(Of IEventBase))
- uid: WeihanLi.Common.Event.IEventStore.SaveEventsAsync*
  name: SaveEventsAsync
  href: api/WeihanLi.Common.Event.IEventStore.yml
  commentId: Overload:WeihanLi.Common.Event.IEventStore.SaveEventsAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventStore.SaveEventsAsync
  nameWithType: IEventStore.SaveEventsAsync
- uid: WeihanLi.Common.Event.IEventSubscriber
  name: IEventSubscriber
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: T:WeihanLi.Common.Event.IEventSubscriber
  fullName: WeihanLi.Common.Event.IEventSubscriber
  nameWithType: IEventSubscriber
- uid: WeihanLi.Common.Event.IEventSubscriber.Subscribe(System.Type,System.Type)
  name: Subscribe(Type, Type)
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: M:WeihanLi.Common.Event.IEventSubscriber.Subscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.IEventSubscriber.Subscribe(System.Type, System.Type)
  nameWithType: IEventSubscriber.Subscribe(Type, Type)
- uid: WeihanLi.Common.Event.IEventSubscriber.Subscribe*
  name: Subscribe
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: Overload:WeihanLi.Common.Event.IEventSubscriber.Subscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventSubscriber.Subscribe
  nameWithType: IEventSubscriber.Subscribe
- uid: WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync(System.Type,System.Type)
  name: SubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: M:WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync(System.Type, System.Type)
  nameWithType: IEventSubscriber.SubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync*
  name: SubscribeAsync
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: Overload:WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventSubscriber.SubscribeAsync
  nameWithType: IEventSubscriber.SubscribeAsync
- uid: WeihanLi.Common.Event.IEventSubscriber.UnSubscribe(System.Type,System.Type)
  name: UnSubscribe(Type, Type)
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: M:WeihanLi.Common.Event.IEventSubscriber.UnSubscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.IEventSubscriber.UnSubscribe(System.Type, System.Type)
  nameWithType: IEventSubscriber.UnSubscribe(Type, Type)
- uid: WeihanLi.Common.Event.IEventSubscriber.UnSubscribe*
  name: UnSubscribe
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: Overload:WeihanLi.Common.Event.IEventSubscriber.UnSubscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventSubscriber.UnSubscribe
  nameWithType: IEventSubscriber.UnSubscribe
- uid: WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync(System.Type,System.Type)
  name: UnSubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: M:WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync(System.Type, System.Type)
  nameWithType: IEventSubscriber.UnSubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync*
  name: UnSubscribeAsync
  href: api/WeihanLi.Common.Event.IEventSubscriber.yml
  commentId: Overload:WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventSubscriber.UnSubscribeAsync
  nameWithType: IEventSubscriber.UnSubscribeAsync
- uid: WeihanLi.Common.Event.IEventSubscriptionManager
  name: IEventSubscriptionManager
  href: api/WeihanLi.Common.Event.IEventSubscriptionManager.yml
  commentId: T:WeihanLi.Common.Event.IEventSubscriptionManager
  fullName: WeihanLi.Common.Event.IEventSubscriptionManager
  nameWithType: IEventSubscriptionManager
- uid: WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  name: GetEventHandlerTypes(Type)
  href: api/WeihanLi.Common.Event.IEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  fullName: WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  nameWithType: IEventSubscriptionManager.GetEventHandlerTypes(Type)
- uid: WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes*
  name: GetEventHandlerTypes
  href: api/WeihanLi.Common.Event.IEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes
  isSpec: "True"
  fullName: WeihanLi.Common.Event.IEventSubscriptionManager.GetEventHandlerTypes
  nameWithType: IEventSubscriptionManager.GetEventHandlerTypes
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager
  name: NullEventSubscriptionManager
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: T:WeihanLi.Common.Event.NullEventSubscriptionManager
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager
  nameWithType: NullEventSubscriptionManager
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  name: GetEventHandlerTypes(Type)
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes(System.Type)
  nameWithType: NullEventSubscriptionManager.GetEventHandlerTypes(Type)
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes*
  name: GetEventHandlerTypes
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes
  isSpec: "True"
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.GetEventHandlerTypes
  nameWithType: NullEventSubscriptionManager.GetEventHandlerTypes
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.Instance
  name: Instance
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: F:WeihanLi.Common.Event.NullEventSubscriptionManager.Instance
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.Instance
  nameWithType: NullEventSubscriptionManager.Instance
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe(System.Type,System.Type)
  name: Subscribe(Type, Type)
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe(System.Type, System.Type)
  nameWithType: NullEventSubscriptionManager.Subscribe(Type, Type)
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe*
  name: Subscribe
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.Subscribe
  nameWithType: NullEventSubscriptionManager.Subscribe
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync(System.Type,System.Type)
  name: SubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync(System.Type, System.Type)
  nameWithType: NullEventSubscriptionManager.SubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync*
  name: SubscribeAsync
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.SubscribeAsync
  nameWithType: NullEventSubscriptionManager.SubscribeAsync
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe(System.Type,System.Type)
  name: UnSubscribe(Type, Type)
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe(System.Type, System.Type)
  nameWithType: NullEventSubscriptionManager.UnSubscribe(Type, Type)
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe*
  name: UnSubscribe
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe
  isSpec: "True"
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribe
  nameWithType: NullEventSubscriptionManager.UnSubscribe
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync(System.Type,System.Type)
  name: UnSubscribeAsync(Type, Type)
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: M:WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync(System.Type,System.Type)
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync(System.Type, System.Type)
  nameWithType: NullEventSubscriptionManager.UnSubscribeAsync(Type, Type)
- uid: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync*
  name: UnSubscribeAsync
  href: api/WeihanLi.Common.Event.NullEventSubscriptionManager.yml
  commentId: Overload:WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Event.NullEventSubscriptionManager.UnSubscribeAsync
  nameWithType: NullEventSubscriptionManager.UnSubscribeAsync
- uid: WeihanLi.Common.Extensions
  name: WeihanLi.Common.Extensions
  href: api/WeihanLi.Common.Extensions.yml
  commentId: N:WeihanLi.Common.Extensions
  fullName: WeihanLi.Common.Extensions
  nameWithType: WeihanLi.Common.Extensions
- uid: WeihanLi.Common.Extensions.PropertiesExtensions
  name: PropertiesExtensions
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: T:WeihanLi.Common.Extensions.PropertiesExtensions
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions
  nameWithType: PropertiesExtensions
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty*
  name: GetProperty
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: Overload:WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty
  nameWithType: PropertiesExtensions.GetProperty
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  name: GetProperty<T>(IDictionary<string, object?>, string)
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: M:WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)
  name.vb: GetProperty(Of T)(IDictionary(Of String, Object), String)
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty<T>(System.Collections.Generic.IDictionary<string, object?>, string)
  fullName.vb: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty(Of T)(System.Collections.Generic.IDictionary(Of String, Object), String)
  nameWithType: PropertiesExtensions.GetProperty<T>(IDictionary<string, object?>, string)
  nameWithType.vb: PropertiesExtensions.GetProperty(Of T)(IDictionary(Of String, Object), String)
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty``1(WeihanLi.Common.Abstractions.IProperties,System.String)
  name: GetProperty<T>(IProperties, string)
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: M:WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty``1(WeihanLi.Common.Abstractions.IProperties,System.String)
  name.vb: GetProperty(Of T)(IProperties, String)
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty<T>(WeihanLi.Common.Abstractions.IProperties, string)
  fullName.vb: WeihanLi.Common.Extensions.PropertiesExtensions.GetProperty(Of T)(WeihanLi.Common.Abstractions.IProperties, String)
  nameWithType: PropertiesExtensions.GetProperty<T>(IProperties, string)
  nameWithType.vb: PropertiesExtensions.GetProperty(Of T)(IProperties, String)
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty*
  name: SetProperty
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: Overload:WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty
  nameWithType: PropertiesExtensions.SetProperty
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)
  name: SetProperty<T>(IDictionary<string, object?>, string, T)
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: M:WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)
  name.vb: SetProperty(Of T)(IDictionary(Of String, Object), String, T)
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty<T>(System.Collections.Generic.IDictionary<string, object?>, string, T)
  fullName.vb: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty(Of T)(System.Collections.Generic.IDictionary(Of String, Object), String, T)
  nameWithType: PropertiesExtensions.SetProperty<T>(IDictionary<string, object?>, string, T)
  nameWithType.vb: PropertiesExtensions.SetProperty(Of T)(IDictionary(Of String, Object), String, T)
- uid: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty``1(WeihanLi.Common.Abstractions.IProperties,System.String,``0)
  name: SetProperty<T>(IProperties, string, T)
  href: api/WeihanLi.Common.Extensions.PropertiesExtensions.yml
  commentId: M:WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty``1(WeihanLi.Common.Abstractions.IProperties,System.String,``0)
  name.vb: SetProperty(Of T)(IProperties, String, T)
  fullName: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty<T>(WeihanLi.Common.Abstractions.IProperties, string, T)
  fullName.vb: WeihanLi.Common.Extensions.PropertiesExtensions.SetProperty(Of T)(WeihanLi.Common.Abstractions.IProperties, String, T)
  nameWithType: PropertiesExtensions.SetProperty<T>(IProperties, string, T)
  nameWithType.vb: PropertiesExtensions.SetProperty(Of T)(IProperties, String, T)
- uid: WeihanLi.Common.Guard
  name: Guard
  href: api/WeihanLi.Common.Guard.yml
  commentId: T:WeihanLi.Common.Guard
  fullName: WeihanLi.Common.Guard
  nameWithType: Guard
- uid: WeihanLi.Common.Guard.Ensure*
  name: Ensure
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.Ensure
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.Ensure
  nameWithType: Guard.Ensure
- uid: WeihanLi.Common.Guard.Ensure``1(System.Func{``0,System.Boolean},``0,System.String)
  name: Ensure<T>(Func<T, bool>, T, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.Ensure``1(System.Func{``0,System.Boolean},``0,System.String)
  name.vb: Ensure(Of T)(Func(Of T, Boolean), T, String)
  fullName: WeihanLi.Common.Guard.Ensure<T>(System.Func<T, bool>, T, string?)
  fullName.vb: WeihanLi.Common.Guard.Ensure(Of T)(System.Func(Of T, Boolean), T, String)
  nameWithType: Guard.Ensure<T>(Func<T, bool>, T, string?)
  nameWithType.vb: Guard.Ensure(Of T)(Func(Of T, Boolean), T, String)
- uid: WeihanLi.Common.Guard.EnsureAsync*
  name: EnsureAsync
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.EnsureAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.EnsureAsync
  nameWithType: Guard.EnsureAsync
- uid: WeihanLi.Common.Guard.EnsureAsync``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},``0,System.String)
  name: EnsureAsync<T>(Func<T, Task<bool>>, T, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.EnsureAsync``1(System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},``0,System.String)
  name.vb: EnsureAsync(Of T)(Func(Of T, Task(Of Boolean)), T, String)
  fullName: WeihanLi.Common.Guard.EnsureAsync<T>(System.Func<T, System.Threading.Tasks.Task<bool>>, T, string?)
  fullName.vb: WeihanLi.Common.Guard.EnsureAsync(Of T)(System.Func(Of T, System.Threading.Tasks.Task(Of Boolean)), T, String)
  nameWithType: Guard.EnsureAsync<T>(Func<T, Task<bool>>, T, string?)
  nameWithType.vb: Guard.EnsureAsync(Of T)(Func(Of T, Task(Of Boolean)), T, String)
- uid: WeihanLi.Common.Guard.NotEmpty*
  name: NotEmpty
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.NotEmpty
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.NotEmpty
  nameWithType: Guard.NotEmpty
- uid: WeihanLi.Common.Guard.NotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)
  name: NotEmpty<T>(ICollection<T>, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.NotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)
  name.vb: NotEmpty(Of T)(ICollection(Of T), String)
  fullName: WeihanLi.Common.Guard.NotEmpty<T>(System.Collections.Generic.ICollection<T>, string?)
  fullName.vb: WeihanLi.Common.Guard.NotEmpty(Of T)(System.Collections.Generic.ICollection(Of T), String)
  nameWithType: Guard.NotEmpty<T>(ICollection<T>, string?)
  nameWithType.vb: Guard.NotEmpty(Of T)(ICollection(Of T), String)
- uid: WeihanLi.Common.Guard.NotNull*
  name: NotNull
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.NotNull
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.NotNull
  nameWithType: Guard.NotNull
- uid: WeihanLi.Common.Guard.NotNull``1(``0,System.String)
  name: NotNull<T>(T?, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.NotNull``1(``0,System.String)
  name.vb: NotNull(Of T)(T, String)
  fullName: WeihanLi.Common.Guard.NotNull<T>(T?, string?)
  fullName.vb: WeihanLi.Common.Guard.NotNull(Of T)(T, String)
  nameWithType: Guard.NotNull<T>(T?, string?)
  nameWithType.vb: Guard.NotNull(Of T)(T, String)
- uid: WeihanLi.Common.Guard.NotNullOrEmpty(System.String,System.String)
  name: NotNullOrEmpty(string?, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.NotNullOrEmpty(System.String,System.String)
  name.vb: NotNullOrEmpty(String, String)
  fullName: WeihanLi.Common.Guard.NotNullOrEmpty(string?, string?)
  fullName.vb: WeihanLi.Common.Guard.NotNullOrEmpty(String, String)
  nameWithType: Guard.NotNullOrEmpty(string?, string?)
  nameWithType.vb: Guard.NotNullOrEmpty(String, String)
- uid: WeihanLi.Common.Guard.NotNullOrEmpty*
  name: NotNullOrEmpty
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.NotNullOrEmpty
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.NotNullOrEmpty
  nameWithType: Guard.NotNullOrEmpty
- uid: WeihanLi.Common.Guard.NotNullOrWhiteSpace(System.String,System.String)
  name: NotNullOrWhiteSpace(string?, string?)
  href: api/WeihanLi.Common.Guard.yml
  commentId: M:WeihanLi.Common.Guard.NotNullOrWhiteSpace(System.String,System.String)
  name.vb: NotNullOrWhiteSpace(String, String)
  fullName: WeihanLi.Common.Guard.NotNullOrWhiteSpace(string?, string?)
  fullName.vb: WeihanLi.Common.Guard.NotNullOrWhiteSpace(String, String)
  nameWithType: Guard.NotNullOrWhiteSpace(string?, string?)
  nameWithType.vb: Guard.NotNullOrWhiteSpace(String, String)
- uid: WeihanLi.Common.Guard.NotNullOrWhiteSpace*
  name: NotNullOrWhiteSpace
  href: api/WeihanLi.Common.Guard.yml
  commentId: Overload:WeihanLi.Common.Guard.NotNullOrWhiteSpace
  isSpec: "True"
  fullName: WeihanLi.Common.Guard.NotNullOrWhiteSpace
  nameWithType: Guard.NotNullOrWhiteSpace
- uid: WeihanLi.Common.GuidIdGenerator
  name: GuidIdGenerator
  href: api/WeihanLi.Common.GuidIdGenerator.yml
  commentId: T:WeihanLi.Common.GuidIdGenerator
  fullName: WeihanLi.Common.GuidIdGenerator
  nameWithType: GuidIdGenerator
- uid: WeihanLi.Common.GuidIdGenerator.Instance
  name: Instance
  href: api/WeihanLi.Common.GuidIdGenerator.yml
  commentId: F:WeihanLi.Common.GuidIdGenerator.Instance
  fullName: WeihanLi.Common.GuidIdGenerator.Instance
  nameWithType: GuidIdGenerator.Instance
- uid: WeihanLi.Common.GuidIdGenerator.NewId
  name: NewId()
  href: api/WeihanLi.Common.GuidIdGenerator.yml
  commentId: M:WeihanLi.Common.GuidIdGenerator.NewId
  fullName: WeihanLi.Common.GuidIdGenerator.NewId()
  nameWithType: GuidIdGenerator.NewId()
- uid: WeihanLi.Common.GuidIdGenerator.NewId*
  name: NewId
  href: api/WeihanLi.Common.GuidIdGenerator.yml
  commentId: Overload:WeihanLi.Common.GuidIdGenerator.NewId
  isSpec: "True"
  fullName: WeihanLi.Common.GuidIdGenerator.NewId
  nameWithType: GuidIdGenerator.NewId
- uid: WeihanLi.Common.Helpers
  name: WeihanLi.Common.Helpers
  href: api/WeihanLi.Common.Helpers.yml
  commentId: N:WeihanLi.Common.Helpers
  fullName: WeihanLi.Common.Helpers
  nameWithType: WeihanLi.Common.Helpers
- uid: WeihanLi.Common.Helpers.ActivatorHelper
  name: ActivatorHelper
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ActivatorHelper
  fullName: WeihanLi.Common.Helpers.ActivatorHelper
  nameWithType: ActivatorHelper
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory(System.Type,System.Type[])
  name: CreateFactory(Type, Type[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory(System.Type,System.Type[])
  name.vb: CreateFactory(Type, Type())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory(System.Type, System.Type[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory(System.Type, System.Type())
  nameWithType: ActivatorHelper.CreateFactory(Type, Type[])
  nameWithType.vb: ActivatorHelper.CreateFactory(Type, Type())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory*
  name: CreateFactory
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateFactory
  nameWithType: ActivatorHelper.CreateFactory
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(System.IServiceProvider,System.Type,System.Object[])
  name: CreateInstance(IServiceProvider, Type, params object?[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(System.IServiceProvider,System.Type,System.Object[])
  name.vb: CreateInstance(IServiceProvider, Type, ParamArray Object())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(System.IServiceProvider, System.Type, params object?[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(System.IServiceProvider, System.Type, ParamArray Object())
  nameWithType: ActivatorHelper.CreateInstance(IServiceProvider, Type, params object?[])
  nameWithType.vb: ActivatorHelper.CreateInstance(IServiceProvider, Type, ParamArray Object())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance*
  name: CreateInstance
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance
  nameWithType: ActivatorHelper.CreateInstance
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance``1(System.IServiceProvider,System.Object[])
  name: CreateInstance<T>(IServiceProvider, params object[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance``1(System.IServiceProvider,System.Object[])
  name.vb: CreateInstance(Of T)(IServiceProvider, ParamArray Object())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance<T>(System.IServiceProvider, params object[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(Of T)(System.IServiceProvider, ParamArray Object())
  nameWithType: ActivatorHelper.CreateInstance<T>(IServiceProvider, params object[])
  nameWithType.vb: ActivatorHelper.CreateInstance(Of T)(IServiceProvider, ParamArray Object())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance``1(System.Object[])
  name: CreateInstance<T>(params object?[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance``1(System.Object[])
  name.vb: CreateInstance(Of T)(ParamArray Object())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance<T>(params object?[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.CreateInstance(Of T)(ParamArray Object())
  nameWithType: ActivatorHelper.CreateInstance<T>(params object?[])
  nameWithType.vb: ActivatorHelper.CreateInstance(Of T)(ParamArray Object())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor(System.Type,System.Type[],System.Reflection.ConstructorInfo@,System.Nullable{System.Int32}[]@)
  name: FindApplicableConstructor(Type, Type[], out ConstructorInfo?, out int?[]?)
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor(System.Type,System.Type[],System.Reflection.ConstructorInfo@,System.Nullable{System.Int32}[]@)
  name.vb: FindApplicableConstructor(Type, Type(), ConstructorInfo, Integer?())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor(System.Type, System.Type[], out System.Reflection.ConstructorInfo?, out int?[]?)
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor(System.Type, System.Type(), System.Reflection.ConstructorInfo, Integer?())
  nameWithType: ActivatorHelper.FindApplicableConstructor(Type, Type[], out ConstructorInfo?, out int?[]?)
  nameWithType.vb: ActivatorHelper.FindApplicableConstructor(Type, Type(), ConstructorInfo, Integer?())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor*
  name: FindApplicableConstructor
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.FindApplicableConstructor
  nameWithType: ActivatorHelper.FindApplicableConstructor
- uid: WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments(System.IServiceProvider,System.Type,System.Object[])
  name: GetBestConstructorArguments(IServiceProvider, Type, params object?[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments(System.IServiceProvider,System.Type,System.Object[])
  name.vb: GetBestConstructorArguments(IServiceProvider, Type, ParamArray Object())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments(System.IServiceProvider, System.Type, params object?[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments(System.IServiceProvider, System.Type, ParamArray Object())
  nameWithType: ActivatorHelper.GetBestConstructorArguments(IServiceProvider, Type, params object?[])
  nameWithType.vb: ActivatorHelper.GetBestConstructorArguments(IServiceProvider, Type, ParamArray Object())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments*
  name: GetBestConstructorArguments
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.GetBestConstructorArguments
  nameWithType: ActivatorHelper.GetBestConstructorArguments
- uid: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)
  name: GetServiceOrCreateInstance(IServiceProvider, Type)
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance(System.IServiceProvider, System.Type)
  nameWithType: ActivatorHelper.GetServiceOrCreateInstance(IServiceProvider, Type)
- uid: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance*
  name: GetServiceOrCreateInstance
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance
  nameWithType: ActivatorHelper.GetServiceOrCreateInstance
- uid: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance``1(System.IServiceProvider)
  name: GetServiceOrCreateInstance<T>(IServiceProvider)
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance``1(System.IServiceProvider)
  name.vb: GetServiceOrCreateInstance(Of T)(IServiceProvider)
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance<T>(System.IServiceProvider)
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.GetServiceOrCreateInstance(Of T)(System.IServiceProvider)
  nameWithType: ActivatorHelper.GetServiceOrCreateInstance<T>(IServiceProvider)
  nameWithType.vb: ActivatorHelper.GetServiceOrCreateInstance(Of T)(IServiceProvider)
- uid: WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor(System.Type,System.Object[])
  name: MatchBestConstructor(Type, params object[])
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor(System.Type,System.Object[])
  name.vb: MatchBestConstructor(Type, ParamArray Object())
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor(System.Type, params object[])
  fullName.vb: WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor(System.Type, ParamArray Object())
  nameWithType: ActivatorHelper.MatchBestConstructor(Type, params object[])
  nameWithType.vb: ActivatorHelper.MatchBestConstructor(Type, ParamArray Object())
- uid: WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor*
  name: MatchBestConstructor
  href: api/WeihanLi.Common.Helpers.ActivatorHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ActivatorHelper.MatchBestConstructor
  nameWithType: ActivatorHelper.MatchBestConstructor
- uid: WeihanLi.Common.Helpers.ApplicationHelper
  name: ApplicationHelper
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ApplicationHelper
  fullName: WeihanLi.Common.Helpers.ApplicationHelper
  nameWithType: ApplicationHelper
- uid: WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName
  name: ApplicationName
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: P:WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName
  nameWithType: ApplicationHelper.ApplicationName
- uid: WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName*
  name: ApplicationName
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.ApplicationName
  nameWithType: ApplicationHelper.ApplicationName
- uid: WeihanLi.Common.Helpers.ApplicationHelper.AppRoot
  name: AppRoot
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: F:WeihanLi.Common.Helpers.ApplicationHelper.AppRoot
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.AppRoot
  nameWithType: ApplicationHelper.AppRoot
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory
  name: GetDotnetDirectory()
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory()
  nameWithType: ApplicationHelper.GetDotnetDirectory()
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory*
  name: GetDotnetDirectory
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetDirectory
  nameWithType: ApplicationHelper.GetDotnetDirectory
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath
  name: GetDotnetPath()
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath()
  nameWithType: ApplicationHelper.GetDotnetPath()
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath*
  name: GetDotnetPath
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetDotnetPath
  nameWithType: ApplicationHelper.GetDotnetPath
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Reflection.Assembly)
  name: GetLibraryInfo(Assembly)
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Reflection.Assembly)
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Reflection.Assembly)
  nameWithType: ApplicationHelper.GetLibraryInfo(Assembly)
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Type)
  name: GetLibraryInfo(Type)
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Type)
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo(System.Type)
  nameWithType: ApplicationHelper.GetLibraryInfo(Type)
- uid: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo*
  name: GetLibraryInfo
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.GetLibraryInfo
  nameWithType: ApplicationHelper.GetLibraryInfo
- uid: WeihanLi.Common.Helpers.ApplicationHelper.MapPath(System.String)
  name: MapPath(string)
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ApplicationHelper.MapPath(System.String)
  name.vb: MapPath(String)
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.MapPath(string)
  fullName.vb: WeihanLi.Common.Helpers.ApplicationHelper.MapPath(String)
  nameWithType: ApplicationHelper.MapPath(string)
  nameWithType.vb: ApplicationHelper.MapPath(String)
- uid: WeihanLi.Common.Helpers.ApplicationHelper.MapPath*
  name: MapPath
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.MapPath
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.MapPath
  nameWithType: ApplicationHelper.MapPath
- uid: WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo
  name: RuntimeInfo
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: P:WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo
  nameWithType: ApplicationHelper.RuntimeInfo
- uid: WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo*
  name: RuntimeInfo
  href: api/WeihanLi.Common.Helpers.ApplicationHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ApplicationHelper.RuntimeInfo
  nameWithType: ApplicationHelper.RuntimeInfo
- uid: WeihanLi.Common.Helpers.ArrayHelper
  name: ArrayHelper
  href: api/WeihanLi.Common.Helpers.ArrayHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ArrayHelper
  fullName: WeihanLi.Common.Helpers.ArrayHelper
  nameWithType: ArrayHelper
- uid: WeihanLi.Common.Helpers.ArrayHelper.Empty*
  name: Empty
  href: api/WeihanLi.Common.Helpers.ArrayHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ArrayHelper.Empty
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ArrayHelper.Empty
  nameWithType: ArrayHelper.Empty
- uid: WeihanLi.Common.Helpers.ArrayHelper.Empty``1
  name: Empty<T>()
  href: api/WeihanLi.Common.Helpers.ArrayHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ArrayHelper.Empty``1
  name.vb: Empty(Of T)()
  fullName: WeihanLi.Common.Helpers.ArrayHelper.Empty<T>()
  fullName.vb: WeihanLi.Common.Helpers.ArrayHelper.Empty(Of T)()
  nameWithType: ArrayHelper.Empty<T>()
  nameWithType.vb: ArrayHelper.Empty(Of T)()
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1
  name: AsyncPropertyEnricher<TContext>
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: T:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1
  name.vb: AsyncPropertyEnricher(Of TContext)
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext)
  nameWithType: AsyncPropertyEnricher<TContext>
  nameWithType.vb: AsyncPropertyEnricher(Of TContext)
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Boolean)
  name: AsyncPropertyEnricher(string, Func<TContext, object>?, bool)
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Boolean)
  name.vb: New(String, Func(Of TContext, Object), Boolean)
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, System.Func<TContext, object>?, bool)
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).New(String, System.Func(Of TContext, Object), Boolean)
  nameWithType: AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, Func<TContext, object>?, bool)
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).New(String, Func(Of TContext, Object), Boolean)
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Func{`0,System.Boolean},System.Boolean)
  name: AsyncPropertyEnricher(string, Func<TContext, object>?, Func<TContext, bool>?, bool)
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Func{`0,System.Boolean},System.Boolean)
  name.vb: New(String, Func(Of TContext, Object), Func(Of TContext, Boolean), Boolean)
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, System.Func<TContext, object>?, System.Func<TContext, bool>?, bool)
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).New(String, System.Func(Of TContext, Object), System.Func(Of TContext, Boolean), Boolean)
  nameWithType: AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, Func<TContext, object>?, Func<TContext, bool>?, bool)
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).New(String, Func(Of TContext, Object), Func(Of TContext, Boolean), Boolean)
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Object,System.Boolean)
  name: AsyncPropertyEnricher(string, object, bool)
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor(System.String,System.Object,System.Boolean)
  name.vb: New(String, Object, Boolean)
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, object, bool)
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).New(String, Object, Boolean)
  nameWithType: AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher(string, object, bool)
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).New(String, Object, Boolean)
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor*
  name: AsyncPropertyEnricher
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).New
  nameWithType: AsyncPropertyEnricher<TContext>.AsyncPropertyEnricher
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).New
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.Enrich(`0)
  name: Enrich(TContext)
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.Enrich(`0)
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.Enrich(TContext)
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).Enrich(TContext)
  nameWithType: AsyncPropertyEnricher<TContext>.Enrich(TContext)
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).Enrich(TContext)
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.Enrich*
  name: Enrich
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.Enrich
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.Enrich
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).Enrich
  nameWithType: AsyncPropertyEnricher<TContext>.Enrich
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).Enrich
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.EnrichAction
  name: EnrichAction
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: P:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.EnrichAction
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.EnrichAction
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).EnrichAction
  nameWithType: AsyncPropertyEnricher<TContext>.EnrichAction
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).EnrichAction
- uid: WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.EnrichAction*
  name: EnrichAction
  href: api/WeihanLi.Common.Helpers.AsyncPropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.AsyncPropertyEnricher`1.EnrichAction
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.AsyncPropertyEnricher<TContext>.EnrichAction
  fullName.vb: WeihanLi.Common.Helpers.AsyncPropertyEnricher(Of TContext).EnrichAction
  nameWithType: AsyncPropertyEnricher<TContext>.EnrichAction
  nameWithType.vb: AsyncPropertyEnricher(Of TContext).EnrichAction
- uid: WeihanLi.Common.Helpers.Base32EncodeHelper
  name: Base32EncodeHelper
  href: api/WeihanLi.Common.Helpers.Base32EncodeHelper.yml
  commentId: T:WeihanLi.Common.Helpers.Base32EncodeHelper
  fullName: WeihanLi.Common.Helpers.Base32EncodeHelper
  nameWithType: Base32EncodeHelper
- uid: WeihanLi.Common.Helpers.Base32EncodeHelper.Decode(System.Byte[])
  name: Decode(byte[])
  href: api/WeihanLi.Common.Helpers.Base32EncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base32EncodeHelper.Decode(System.Byte[])
  name.vb: Decode(Byte())
  fullName: WeihanLi.Common.Helpers.Base32EncodeHelper.Decode(byte[])
  fullName.vb: WeihanLi.Common.Helpers.Base32EncodeHelper.Decode(Byte())
  nameWithType: Base32EncodeHelper.Decode(byte[])
  nameWithType.vb: Base32EncodeHelper.Decode(Byte())
- uid: WeihanLi.Common.Helpers.Base32EncodeHelper.Decode*
  name: Decode
  href: api/WeihanLi.Common.Helpers.Base32EncodeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base32EncodeHelper.Decode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base32EncodeHelper.Decode
  nameWithType: Base32EncodeHelper.Decode
- uid: WeihanLi.Common.Helpers.Base32EncodeHelper.Encode(System.String)
  name: Encode(string)
  href: api/WeihanLi.Common.Helpers.Base32EncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base32EncodeHelper.Encode(System.String)
  name.vb: Encode(String)
  fullName: WeihanLi.Common.Helpers.Base32EncodeHelper.Encode(string)
  fullName.vb: WeihanLi.Common.Helpers.Base32EncodeHelper.Encode(String)
  nameWithType: Base32EncodeHelper.Encode(string)
  nameWithType.vb: Base32EncodeHelper.Encode(String)
- uid: WeihanLi.Common.Helpers.Base32EncodeHelper.Encode*
  name: Encode
  href: api/WeihanLi.Common.Helpers.Base32EncodeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base32EncodeHelper.Encode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base32EncodeHelper.Encode
  nameWithType: Base32EncodeHelper.Encode
- uid: WeihanLi.Common.Helpers.Base36Encoder
  name: Base36Encoder
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: T:WeihanLi.Common.Helpers.Base36Encoder
  fullName: WeihanLi.Common.Helpers.Base36Encoder
  nameWithType: Base36Encoder
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid(System.String)
  name: DecodeGuid(string)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid(System.String)
  name.vb: DecodeGuid(String)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid(string)
  fullName.vb: WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid(String)
  nameWithType: Base36Encoder.DecodeGuid(string)
  nameWithType.vb: Base36Encoder.DecodeGuid(String)
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid*
  name: DecodeGuid
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeGuid
  nameWithType: Base36Encoder.DecodeGuid
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeLong(System.String)
  name: DecodeLong(string)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.DecodeLong(System.String)
  name.vb: DecodeLong(String)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeLong(string)
  fullName.vb: WeihanLi.Common.Helpers.Base36Encoder.DecodeLong(String)
  nameWithType: Base36Encoder.DecodeLong(string)
  nameWithType.vb: Base36Encoder.DecodeLong(String)
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeLong*
  name: DecodeLong
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base36Encoder.DecodeLong
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeLong
  nameWithType: Base36Encoder.DecodeLong
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeString(System.String)
  name: DecodeString(string)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.DecodeString(System.String)
  name.vb: DecodeString(String)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeString(string)
  fullName.vb: WeihanLi.Common.Helpers.Base36Encoder.DecodeString(String)
  nameWithType: Base36Encoder.DecodeString(string)
  nameWithType.vb: Base36Encoder.DecodeString(String)
- uid: WeihanLi.Common.Helpers.Base36Encoder.DecodeString*
  name: DecodeString
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base36Encoder.DecodeString
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base36Encoder.DecodeString
  nameWithType: Base36Encoder.DecodeString
- uid: WeihanLi.Common.Helpers.Base36Encoder.Encode(System.Guid)
  name: Encode(Guid)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.Encode(System.Guid)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.Encode(System.Guid)
  nameWithType: Base36Encoder.Encode(Guid)
- uid: WeihanLi.Common.Helpers.Base36Encoder.Encode(System.Int64)
  name: Encode(long)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.Encode(System.Int64)
  name.vb: Encode(Long)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.Encode(long)
  fullName.vb: WeihanLi.Common.Helpers.Base36Encoder.Encode(Long)
  nameWithType: Base36Encoder.Encode(long)
  nameWithType.vb: Base36Encoder.Encode(Long)
- uid: WeihanLi.Common.Helpers.Base36Encoder.Encode(System.String)
  name: Encode(string)
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base36Encoder.Encode(System.String)
  name.vb: Encode(String)
  fullName: WeihanLi.Common.Helpers.Base36Encoder.Encode(string)
  fullName.vb: WeihanLi.Common.Helpers.Base36Encoder.Encode(String)
  nameWithType: Base36Encoder.Encode(string)
  nameWithType.vb: Base36Encoder.Encode(String)
- uid: WeihanLi.Common.Helpers.Base36Encoder.Encode*
  name: Encode
  href: api/WeihanLi.Common.Helpers.Base36Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base36Encoder.Encode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base36Encoder.Encode
  nameWithType: Base36Encoder.Encode
- uid: WeihanLi.Common.Helpers.Base62Encoder
  name: Base62Encoder
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: T:WeihanLi.Common.Helpers.Base62Encoder
  fullName: WeihanLi.Common.Helpers.Base62Encoder
  nameWithType: Base62Encoder
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid(System.String)
  name: DecodeGuid(string)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid(System.String)
  name.vb: DecodeGuid(String)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid(string)
  fullName.vb: WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid(String)
  nameWithType: Base62Encoder.DecodeGuid(string)
  nameWithType.vb: Base62Encoder.DecodeGuid(String)
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid*
  name: DecodeGuid
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeGuid
  nameWithType: Base62Encoder.DecodeGuid
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeLong(System.String)
  name: DecodeLong(string)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.DecodeLong(System.String)
  name.vb: DecodeLong(String)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeLong(string)
  fullName.vb: WeihanLi.Common.Helpers.Base62Encoder.DecodeLong(String)
  nameWithType: Base62Encoder.DecodeLong(string)
  nameWithType.vb: Base62Encoder.DecodeLong(String)
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeLong*
  name: DecodeLong
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base62Encoder.DecodeLong
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeLong
  nameWithType: Base62Encoder.DecodeLong
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeString(System.String)
  name: DecodeString(string)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.DecodeString(System.String)
  name.vb: DecodeString(String)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeString(string)
  fullName.vb: WeihanLi.Common.Helpers.Base62Encoder.DecodeString(String)
  nameWithType: Base62Encoder.DecodeString(string)
  nameWithType.vb: Base62Encoder.DecodeString(String)
- uid: WeihanLi.Common.Helpers.Base62Encoder.DecodeString*
  name: DecodeString
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base62Encoder.DecodeString
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base62Encoder.DecodeString
  nameWithType: Base62Encoder.DecodeString
- uid: WeihanLi.Common.Helpers.Base62Encoder.Encode(System.Guid)
  name: Encode(Guid)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.Encode(System.Guid)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.Encode(System.Guid)
  nameWithType: Base62Encoder.Encode(Guid)
- uid: WeihanLi.Common.Helpers.Base62Encoder.Encode(System.Int64)
  name: Encode(long)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.Encode(System.Int64)
  name.vb: Encode(Long)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.Encode(long)
  fullName.vb: WeihanLi.Common.Helpers.Base62Encoder.Encode(Long)
  nameWithType: Base62Encoder.Encode(long)
  nameWithType.vb: Base62Encoder.Encode(Long)
- uid: WeihanLi.Common.Helpers.Base62Encoder.Encode(System.String)
  name: Encode(string)
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: M:WeihanLi.Common.Helpers.Base62Encoder.Encode(System.String)
  name.vb: Encode(String)
  fullName: WeihanLi.Common.Helpers.Base62Encoder.Encode(string)
  fullName.vb: WeihanLi.Common.Helpers.Base62Encoder.Encode(String)
  nameWithType: Base62Encoder.Encode(string)
  nameWithType.vb: Base62Encoder.Encode(String)
- uid: WeihanLi.Common.Helpers.Base62Encoder.Encode*
  name: Encode
  href: api/WeihanLi.Common.Helpers.Base62Encoder.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base62Encoder.Encode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base62Encoder.Encode
  nameWithType: Base62Encoder.Encode
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper
  name: Base64UrlEncodeHelper
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: T:WeihanLi.Common.Helpers.Base64UrlEncodeHelper
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper
  nameWithType: Base64UrlEncodeHelper
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode(System.String)
  name: Decode(string)
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode(System.String)
  name.vb: Decode(String)
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode(string)
  fullName.vb: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode(String)
  nameWithType: Base64UrlEncodeHelper.Decode(string)
  nameWithType.vb: Base64UrlEncodeHelper.Decode(String)
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode*
  name: Decode
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Decode
  nameWithType: Base64UrlEncodeHelper.Decode
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes(System.String)
  name: DecodeBytes(string)
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes(System.String)
  name.vb: DecodeBytes(String)
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes(string)
  fullName.vb: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes(String)
  nameWithType: Base64UrlEncodeHelper.DecodeBytes(string)
  nameWithType.vb: Base64UrlEncodeHelper.DecodeBytes(String)
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes*
  name: DecodeBytes
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.DecodeBytes
  nameWithType: Base64UrlEncodeHelper.DecodeBytes
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.Byte[],System.Int32,System.Int32)
  name: Encode(byte[], int, int)
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.Byte[],System.Int32,System.Int32)
  name.vb: Encode(Byte(), Integer, Integer)
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(byte[], int, int)
  fullName.vb: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(Byte(), Integer, Integer)
  nameWithType: Base64UrlEncodeHelper.Encode(byte[], int, int)
  nameWithType.vb: Base64UrlEncodeHelper.Encode(Byte(), Integer, Integer)
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.Byte[])
  name: Encode(byte[])
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.Byte[])
  name.vb: Encode(Byte())
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(byte[])
  fullName.vb: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(Byte())
  nameWithType: Base64UrlEncodeHelper.Encode(byte[])
  nameWithType.vb: Base64UrlEncodeHelper.Encode(Byte())
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.String)
  name: Encode(string)
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(System.String)
  name.vb: Encode(String)
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(string)
  fullName.vb: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode(String)
  nameWithType: Base64UrlEncodeHelper.Encode(string)
  nameWithType.vb: Base64UrlEncodeHelper.Encode(String)
- uid: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode*
  name: Encode
  href: api/WeihanLi.Common.Helpers.Base64UrlEncodeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Base64UrlEncodeHelper.Encode
  nameWithType: Base64UrlEncodeHelper.Encode
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1
  name: BoundedConcurrentQueue<T>
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: T:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1
  name.vb: BoundedConcurrentQueue(Of T)
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T)
  nameWithType: BoundedConcurrentQueue<T>
  nameWithType.vb: BoundedConcurrentQueue(Of T)
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor
  name: BoundedConcurrentQueue()
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: M:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.BoundedConcurrentQueue()
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).New()
  nameWithType: BoundedConcurrentQueue<T>.BoundedConcurrentQueue()
  nameWithType.vb: BoundedConcurrentQueue(Of T).New()
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor(System.Int32)
  name: BoundedConcurrentQueue(int)
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: M:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor(System.Int32)
  name.vb: New(Integer)
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.BoundedConcurrentQueue(int)
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).New(Integer)
  nameWithType: BoundedConcurrentQueue<T>.BoundedConcurrentQueue(int)
  nameWithType.vb: BoundedConcurrentQueue(Of T).New(Integer)
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor*
  name: BoundedConcurrentQueue
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.BoundedConcurrentQueue
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).New
  nameWithType: BoundedConcurrentQueue<T>.BoundedConcurrentQueue
  nameWithType.vb: BoundedConcurrentQueue(Of T).New
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.Count
  name: Count
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: P:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.Count
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).Count
  nameWithType: BoundedConcurrentQueue<T>.Count
  nameWithType.vb: BoundedConcurrentQueue(Of T).Count
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.Count*
  name: Count
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).Count
  nameWithType: BoundedConcurrentQueue<T>.Count
  nameWithType.vb: BoundedConcurrentQueue(Of T).Count
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryDequeue(`0@)
  name: TryDequeue(out T?)
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: M:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryDequeue(`0@)
  name.vb: TryDequeue(T)
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.TryDequeue(out T?)
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).TryDequeue(T)
  nameWithType: BoundedConcurrentQueue<T>.TryDequeue(out T?)
  nameWithType.vb: BoundedConcurrentQueue(Of T).TryDequeue(T)
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryDequeue*
  name: TryDequeue
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryDequeue
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.TryDequeue
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).TryDequeue
  nameWithType: BoundedConcurrentQueue<T>.TryDequeue
  nameWithType.vb: BoundedConcurrentQueue(Of T).TryDequeue
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryEnqueue(`0)
  name: TryEnqueue(T)
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: M:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryEnqueue(`0)
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.TryEnqueue(T)
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).TryEnqueue(T)
  nameWithType: BoundedConcurrentQueue<T>.TryEnqueue(T)
  nameWithType.vb: BoundedConcurrentQueue(Of T).TryEnqueue(T)
- uid: WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryEnqueue*
  name: TryEnqueue
  href: api/WeihanLi.Common.Helpers.BoundedConcurrentQueue-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.BoundedConcurrentQueue`1.TryEnqueue
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.BoundedConcurrentQueue<T>.TryEnqueue
  fullName.vb: WeihanLi.Common.Helpers.BoundedConcurrentQueue(Of T).TryEnqueue
  nameWithType: BoundedConcurrentQueue<T>.TryEnqueue
  nameWithType.vb: BoundedConcurrentQueue(Of T).TryEnqueue
- uid: WeihanLi.Common.Helpers.Combinatorics
  name: WeihanLi.Common.Helpers.Combinatorics
  href: api/WeihanLi.Common.Helpers.Combinatorics.yml
  commentId: N:WeihanLi.Common.Helpers.Combinatorics
  fullName: WeihanLi.Common.Helpers.Combinatorics
  nameWithType: WeihanLi.Common.Helpers.Combinatorics
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1
  name: Combinations<T>
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: T:WeihanLi.Common.Helpers.Combinatorics.Combinations`1
  name.vb: Combinations(Of T)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T)
  nameWithType: Combinations<T>
  nameWithType.vb: Combinations(Of T)
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name: Combinations(IEnumerable<T>, int, GenerateOption)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name.vb: New(IEnumerable(Of T), Integer, GenerateOption)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Combinations(System.Collections.Generic.IEnumerable<T>, int, WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).New(System.Collections.Generic.IEnumerable(Of T), Integer, WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  nameWithType: Combinations<T>.Combinations(IEnumerable<T>, int, GenerateOption)
  nameWithType.vb: Combinations(Of T).New(IEnumerable(Of T), Integer, GenerateOption)
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: Combinations(IEnumerable<T>, int)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name.vb: New(IEnumerable(Of T), Integer)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Combinations(System.Collections.Generic.IEnumerable<T>, int)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).New(System.Collections.Generic.IEnumerable(Of T), Integer)
  nameWithType: Combinations<T>.Combinations(IEnumerable<T>, int)
  nameWithType.vb: Combinations(Of T).New(IEnumerable(Of T), Integer)
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor*
  name: Combinations
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Combinations
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).New
  nameWithType: Combinations<T>.Combinations
  nameWithType.vb: Combinations(Of T).New
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Count
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Count
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).Count
  nameWithType: Combinations<T>.Count
  nameWithType.vb: Combinations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Count*
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).Count
  nameWithType: Combinations<T>.Count
  nameWithType.vb: Combinations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.GetEnumerator
  name: GetEnumerator()
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.GetEnumerator
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.GetEnumerator()
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).GetEnumerator()
  nameWithType: Combinations<T>.GetEnumerator()
  nameWithType.vb: Combinations(Of T).GetEnumerator()
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.GetEnumerator
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).GetEnumerator
  nameWithType: Combinations<T>.GetEnumerator
  nameWithType.vb: Combinations(Of T).GetEnumerator
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.LowerIndex
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.LowerIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).LowerIndex
  nameWithType: Combinations<T>.LowerIndex
  nameWithType.vb: Combinations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.LowerIndex*
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.LowerIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).LowerIndex
  nameWithType: Combinations<T>.LowerIndex
  nameWithType.vb: Combinations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Type
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Type
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).Type
  nameWithType: Combinations<T>.Type
  nameWithType.vb: Combinations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Type*
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.Type
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).Type
  nameWithType: Combinations<T>.Type
  nameWithType.vb: Combinations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.UpperIndex
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.UpperIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).UpperIndex
  nameWithType: Combinations<T>.UpperIndex
  nameWithType.vb: Combinations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Combinations`1.UpperIndex*
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Combinations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Combinations`1.UpperIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Combinations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Combinations(Of T).UpperIndex
  nameWithType: Combinations<T>.UpperIndex
  nameWithType.vb: Combinations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.GenerateOption
  name: GenerateOption
  href: api/WeihanLi.Common.Helpers.Combinatorics.GenerateOption.yml
  commentId: T:WeihanLi.Common.Helpers.Combinatorics.GenerateOption
  fullName: WeihanLi.Common.Helpers.Combinatorics.GenerateOption
  nameWithType: GenerateOption
- uid: WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithoutRepetition
  name: WithoutRepetition
  href: api/WeihanLi.Common.Helpers.Combinatorics.GenerateOption.yml
  commentId: F:WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithoutRepetition
  fullName: WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithoutRepetition
  nameWithType: GenerateOption.WithoutRepetition
- uid: WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithRepetition
  name: WithRepetition
  href: api/WeihanLi.Common.Helpers.Combinatorics.GenerateOption.yml
  commentId: F:WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithRepetition
  fullName: WeihanLi.Common.Helpers.Combinatorics.GenerateOption.WithRepetition
  nameWithType: GenerateOption.WithRepetition
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1
  name: Permutations<T>
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: T:WeihanLi.Common.Helpers.Combinatorics.Permutations`1
  name.vb: Permutations(Of T)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T)
  nameWithType: Permutations<T>
  nameWithType.vb: Permutations(Of T)
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  name: Permutations(IEnumerable<T>, IComparer<T>?)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  name.vb: New(IEnumerable(Of T), IComparer(Of T))
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Permutations(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IComparer<T>?)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).New(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IComparer(Of T))
  nameWithType: Permutations<T>.Permutations(IEnumerable<T>, IComparer<T>?)
  nameWithType.vb: Permutations(Of T).New(IEnumerable(Of T), IComparer(Of T))
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},WeihanLi.Common.Helpers.Combinatorics.GenerateOption,System.Collections.Generic.IComparer{`0})
  name: Permutations(IEnumerable<T>, GenerateOption, IComparer<T>?)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},WeihanLi.Common.Helpers.Combinatorics.GenerateOption,System.Collections.Generic.IComparer{`0})
  name.vb: New(IEnumerable(Of T), GenerateOption, IComparer(Of T))
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Permutations(System.Collections.Generic.IEnumerable<T>, WeihanLi.Common.Helpers.Combinatorics.GenerateOption, System.Collections.Generic.IComparer<T>?)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).New(System.Collections.Generic.IEnumerable(Of T), WeihanLi.Common.Helpers.Combinatorics.GenerateOption, System.Collections.Generic.IComparer(Of T))
  nameWithType: Permutations<T>.Permutations(IEnumerable<T>, GenerateOption, IComparer<T>?)
  nameWithType.vb: Permutations(Of T).New(IEnumerable(Of T), GenerateOption, IComparer(Of T))
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name: Permutations(IEnumerable<T>, GenerateOption)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0},WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name.vb: New(IEnumerable(Of T), GenerateOption)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Permutations(System.Collections.Generic.IEnumerable<T>, WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).New(System.Collections.Generic.IEnumerable(Of T), WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  nameWithType: Permutations<T>.Permutations(IEnumerable<T>, GenerateOption)
  nameWithType.vb: Permutations(Of T).New(IEnumerable(Of T), GenerateOption)
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  name: Permutations(IEnumerable<T>)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  name.vb: New(IEnumerable(Of T))
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Permutations(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).New(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: Permutations<T>.Permutations(IEnumerable<T>)
  nameWithType.vb: Permutations(Of T).New(IEnumerable(Of T))
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor*
  name: Permutations
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Permutations
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).New
  nameWithType: Permutations<T>.Permutations
  nameWithType.vb: Permutations(Of T).New
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Count
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Count
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).Count
  nameWithType: Permutations<T>.Count
  nameWithType.vb: Permutations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Count*
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).Count
  nameWithType: Permutations<T>.Count
  nameWithType.vb: Permutations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.GetEnumerator
  name: GetEnumerator()
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.GetEnumerator
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.GetEnumerator()
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).GetEnumerator()
  nameWithType: Permutations<T>.GetEnumerator()
  nameWithType.vb: Permutations(Of T).GetEnumerator()
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.GetEnumerator
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).GetEnumerator
  nameWithType: Permutations<T>.GetEnumerator
  nameWithType.vb: Permutations(Of T).GetEnumerator
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.LowerIndex
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.LowerIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).LowerIndex
  nameWithType: Permutations<T>.LowerIndex
  nameWithType.vb: Permutations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.LowerIndex*
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.LowerIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).LowerIndex
  nameWithType: Permutations<T>.LowerIndex
  nameWithType.vb: Permutations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Type
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Type
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).Type
  nameWithType: Permutations<T>.Type
  nameWithType.vb: Permutations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Type*
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.Type
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).Type
  nameWithType: Permutations<T>.Type
  nameWithType.vb: Permutations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.UpperIndex
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.UpperIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).UpperIndex
  nameWithType: Permutations<T>.UpperIndex
  nameWithType.vb: Permutations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Permutations`1.UpperIndex*
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Permutations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Permutations`1.UpperIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Permutations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Permutations(Of T).UpperIndex
  nameWithType: Permutations<T>.UpperIndex
  nameWithType.vb: Permutations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1
  name: Variations<T>
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: T:WeihanLi.Common.Helpers.Combinatorics.Variations`1
  name.vb: Variations(Of T)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T)
  nameWithType: Variations<T>
  nameWithType.vb: Variations(Of T)
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name: Variations(IEnumerable<T>, int, GenerateOption)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  name.vb: New(IEnumerable(Of T), Integer, GenerateOption)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Variations(System.Collections.Generic.IEnumerable<T>, int, WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).New(System.Collections.Generic.IEnumerable(Of T), Integer, WeihanLi.Common.Helpers.Combinatorics.GenerateOption)
  nameWithType: Variations<T>.Variations(IEnumerable<T>, int, GenerateOption)
  nameWithType.vb: Variations(Of T).New(IEnumerable(Of T), Integer, GenerateOption)
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: Variations(IEnumerable<T>, int)
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name.vb: New(IEnumerable(Of T), Integer)
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Variations(System.Collections.Generic.IEnumerable<T>, int)
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).New(System.Collections.Generic.IEnumerable(Of T), Integer)
  nameWithType: Variations<T>.Variations(IEnumerable<T>, int)
  nameWithType.vb: Variations(Of T).New(IEnumerable(Of T), Integer)
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor*
  name: Variations
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Variations
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).New
  nameWithType: Variations<T>.Variations
  nameWithType.vb: Variations(Of T).New
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.Count
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Variations`1.Count
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).Count
  nameWithType: Variations<T>.Count
  nameWithType.vb: Variations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.Count*
  name: Count
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).Count
  nameWithType: Variations<T>.Count
  nameWithType.vb: Variations(Of T).Count
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.GetEnumerator
  name: GetEnumerator()
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: M:WeihanLi.Common.Helpers.Combinatorics.Variations`1.GetEnumerator
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.GetEnumerator()
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).GetEnumerator()
  nameWithType: Variations<T>.GetEnumerator()
  nameWithType.vb: Variations(Of T).GetEnumerator()
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.GetEnumerator
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).GetEnumerator
  nameWithType: Variations<T>.GetEnumerator
  nameWithType.vb: Variations(Of T).GetEnumerator
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.LowerIndex
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Variations`1.LowerIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).LowerIndex
  nameWithType: Variations<T>.LowerIndex
  nameWithType.vb: Variations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.LowerIndex*
  name: LowerIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.LowerIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.LowerIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).LowerIndex
  nameWithType: Variations<T>.LowerIndex
  nameWithType.vb: Variations(Of T).LowerIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.Type
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Variations`1.Type
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).Type
  nameWithType: Variations<T>.Type
  nameWithType.vb: Variations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.Type*
  name: Type
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.Type
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.Type
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).Type
  nameWithType: Variations<T>.Type
  nameWithType.vb: Variations(Of T).Type
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.UpperIndex
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: P:WeihanLi.Common.Helpers.Combinatorics.Variations`1.UpperIndex
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).UpperIndex
  nameWithType: Variations<T>.UpperIndex
  nameWithType.vb: Variations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.Combinatorics.Variations`1.UpperIndex*
  name: UpperIndex
  href: api/WeihanLi.Common.Helpers.Combinatorics.Variations-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.Combinatorics.Variations`1.UpperIndex
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Combinatorics.Variations<T>.UpperIndex
  fullName.vb: WeihanLi.Common.Helpers.Combinatorics.Variations(Of T).UpperIndex
  nameWithType: Variations<T>.UpperIndex
  nameWithType.vb: Variations(Of T).UpperIndex
- uid: WeihanLi.Common.Helpers.CommandExecutor
  name: CommandExecutor
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: T:WeihanLi.Common.Helpers.CommandExecutor
  fullName: WeihanLi.Common.Helpers.CommandExecutor
  nameWithType: CommandExecutor
- uid: WeihanLi.Common.Helpers.CommandExecutor.Execute(System.String,System.String,System.String)
  name: Execute(string, string?, string?)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.Execute(System.String,System.String,System.String)
  name.vb: Execute(String, String, String)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.Execute(string, string?, string?)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.Execute(String, String, String)
  nameWithType: CommandExecutor.Execute(string, string?, string?)
  nameWithType.vb: CommandExecutor.Execute(String, String, String)
- uid: WeihanLi.Common.Helpers.CommandExecutor.Execute*
  name: Execute
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.Execute
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.Execute
  nameWithType: CommandExecutor.Execute
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(System.Diagnostics.ProcessStartInfo)
  name: ExecuteAndCapture(ProcessStartInfo)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(System.Diagnostics.ProcessStartInfo)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(System.Diagnostics.ProcessStartInfo)
  nameWithType: CommandExecutor.ExecuteAndCapture(ProcessStartInfo)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(System.String,System.String,System.String)
  name: ExecuteAndCapture(string, string?, string?)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(System.String,System.String,System.String)
  name.vb: ExecuteAndCapture(String, String, String)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(string, string?, string?)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture(String, String, String)
  nameWithType: CommandExecutor.ExecuteAndCapture(string, string?, string?)
  nameWithType.vb: CommandExecutor.ExecuteAndCapture(String, String, String)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture*
  name: ExecuteAndCapture
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCapture
  nameWithType: CommandExecutor.ExecuteAndCapture
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  name: ExecuteAndCaptureAsync(ProcessStartInfo, CancellationToken)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(System.Diagnostics.ProcessStartInfo, System.Threading.CancellationToken)
  nameWithType: CommandExecutor.ExecuteAndCaptureAsync(ProcessStartInfo, CancellationToken)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: ExecuteAndCaptureAsync(string, string?, string?, CancellationToken)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name.vb: ExecuteAndCaptureAsync(String, String, String, CancellationToken)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(string, string?, string?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync(String, String, String, System.Threading.CancellationToken)
  nameWithType: CommandExecutor.ExecuteAndCaptureAsync(string, string?, string?, CancellationToken)
  nameWithType.vb: CommandExecutor.ExecuteAndCaptureAsync(String, String, String, CancellationToken)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync*
  name: ExecuteAndCaptureAsync
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAndCaptureAsync
  nameWithType: CommandExecutor.ExecuteAndCaptureAsync
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: ExecuteAsync(string, string?, string?, CancellationToken)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(String, String, String, CancellationToken)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync(string, string?, string?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync(String, String, String, System.Threading.CancellationToken)
  nameWithType: CommandExecutor.ExecuteAsync(string, string?, string?, CancellationToken)
  nameWithType.vb: CommandExecutor.ExecuteAsync(String, String, String, CancellationToken)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteAsync
  nameWithType: CommandExecutor.ExecuteAsync
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand(System.String,System.String)
  name: ExecuteCommand(string, string?)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand(System.String,System.String)
  name.vb: ExecuteCommand(String, String)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand(string, string?)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand(String, String)
  nameWithType: CommandExecutor.ExecuteCommand(string, string?)
  nameWithType.vb: CommandExecutor.ExecuteCommand(String, String)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand*
  name: ExecuteCommand
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommand
  nameWithType: CommandExecutor.ExecuteCommand
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync(System.String,System.String,System.Threading.CancellationToken)
  name: ExecuteCommandAsync(string, string?, CancellationToken)
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync(System.String,System.String,System.Threading.CancellationToken)
  name.vb: ExecuteCommandAsync(String, String, CancellationToken)
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync(string, string?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync(String, String, System.Threading.CancellationToken)
  nameWithType: CommandExecutor.ExecuteCommandAsync(string, string?, CancellationToken)
  nameWithType.vb: CommandExecutor.ExecuteCommandAsync(String, String, CancellationToken)
- uid: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync*
  name: ExecuteCommandAsync
  href: api/WeihanLi.Common.Helpers.CommandExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandExecutor.ExecuteCommandAsync
  nameWithType: CommandExecutor.ExecuteCommandAsync
- uid: WeihanLi.Common.Helpers.CommandResult
  name: CommandResult
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: T:WeihanLi.Common.Helpers.CommandResult
  fullName: WeihanLi.Common.Helpers.CommandResult
  nameWithType: CommandResult
- uid: WeihanLi.Common.Helpers.CommandResult.#ctor(System.Int32,System.String,System.String)
  name: CommandResult(int, string, string)
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: M:WeihanLi.Common.Helpers.CommandResult.#ctor(System.Int32,System.String,System.String)
  name.vb: New(Integer, String, String)
  fullName: WeihanLi.Common.Helpers.CommandResult.CommandResult(int, string, string)
  fullName.vb: WeihanLi.Common.Helpers.CommandResult.New(Integer, String, String)
  nameWithType: CommandResult.CommandResult(int, string, string)
  nameWithType.vb: CommandResult.New(Integer, String, String)
- uid: WeihanLi.Common.Helpers.CommandResult.#ctor*
  name: CommandResult
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandResult.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.CommandResult.CommandResult
  fullName.vb: WeihanLi.Common.Helpers.CommandResult.New
  nameWithType: CommandResult.CommandResult
  nameWithType.vb: CommandResult.New
- uid: WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode(System.Int32)
  name: EnsureSuccessfulExitCode(int)
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: M:WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode(System.Int32)
  name.vb: EnsureSuccessfulExitCode(Integer)
  fullName: WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode(int)
  fullName.vb: WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode(Integer)
  nameWithType: CommandResult.EnsureSuccessfulExitCode(int)
  nameWithType.vb: CommandResult.EnsureSuccessfulExitCode(Integer)
- uid: WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode*
  name: EnsureSuccessfulExitCode
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandResult.EnsureSuccessfulExitCode
  nameWithType: CommandResult.EnsureSuccessfulExitCode
- uid: WeihanLi.Common.Helpers.CommandResult.ExitCode
  name: ExitCode
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: P:WeihanLi.Common.Helpers.CommandResult.ExitCode
  fullName: WeihanLi.Common.Helpers.CommandResult.ExitCode
  nameWithType: CommandResult.ExitCode
- uid: WeihanLi.Common.Helpers.CommandResult.ExitCode*
  name: ExitCode
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandResult.ExitCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandResult.ExitCode
  nameWithType: CommandResult.ExitCode
- uid: WeihanLi.Common.Helpers.CommandResult.StandardError
  name: StandardError
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: P:WeihanLi.Common.Helpers.CommandResult.StandardError
  fullName: WeihanLi.Common.Helpers.CommandResult.StandardError
  nameWithType: CommandResult.StandardError
- uid: WeihanLi.Common.Helpers.CommandResult.StandardError*
  name: StandardError
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandResult.StandardError
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandResult.StandardError
  nameWithType: CommandResult.StandardError
- uid: WeihanLi.Common.Helpers.CommandResult.StandardOut
  name: StandardOut
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: P:WeihanLi.Common.Helpers.CommandResult.StandardOut
  fullName: WeihanLi.Common.Helpers.CommandResult.StandardOut
  nameWithType: CommandResult.StandardOut
- uid: WeihanLi.Common.Helpers.CommandResult.StandardOut*
  name: StandardOut
  href: api/WeihanLi.Common.Helpers.CommandResult.yml
  commentId: Overload:WeihanLi.Common.Helpers.CommandResult.StandardOut
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CommandResult.StandardOut
  nameWithType: CommandResult.StandardOut
- uid: WeihanLi.Common.Helpers.CompressDataSerializer
  name: CompressDataSerializer
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: T:WeihanLi.Common.Helpers.CompressDataSerializer
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer
  nameWithType: CompressDataSerializer
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.#ctor(WeihanLi.Common.Helpers.IDataSerializer,WeihanLi.Common.Compressor.IDataCompressor)
  name: CompressDataSerializer(IDataSerializer, IDataCompressor)
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.CompressDataSerializer.#ctor(WeihanLi.Common.Helpers.IDataSerializer,WeihanLi.Common.Compressor.IDataCompressor)
  name.vb: New(IDataSerializer, IDataCompressor)
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.CompressDataSerializer(WeihanLi.Common.Helpers.IDataSerializer, WeihanLi.Common.Compressor.IDataCompressor)
  fullName.vb: WeihanLi.Common.Helpers.CompressDataSerializer.New(WeihanLi.Common.Helpers.IDataSerializer, WeihanLi.Common.Compressor.IDataCompressor)
  nameWithType: CompressDataSerializer.CompressDataSerializer(IDataSerializer, IDataCompressor)
  nameWithType.vb: CompressDataSerializer.New(IDataSerializer, IDataCompressor)
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.#ctor*
  name: CompressDataSerializer
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.CompressDataSerializer.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.CompressDataSerializer
  fullName.vb: WeihanLi.Common.Helpers.CompressDataSerializer.New
  nameWithType: CompressDataSerializer.CompressDataSerializer
  nameWithType.vb: CompressDataSerializer.New
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize*
  name: Deserialize
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize
  nameWithType: CompressDataSerializer.Deserialize
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize<T>(byte[])
  fullName.vb: WeihanLi.Common.Helpers.CompressDataSerializer.Deserialize(Of T)(Byte())
  nameWithType: CompressDataSerializer.Deserialize<T>(byte[])
  nameWithType.vb: CompressDataSerializer.Deserialize(Of T)(Byte())
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.Serialize*
  name: Serialize
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.CompressDataSerializer.Serialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.Serialize
  nameWithType: CompressDataSerializer.Serialize
- uid: WeihanLi.Common.Helpers.CompressDataSerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/WeihanLi.Common.Helpers.CompressDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.CompressDataSerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: WeihanLi.Common.Helpers.CompressDataSerializer.Serialize<T>(T)
  fullName.vb: WeihanLi.Common.Helpers.CompressDataSerializer.Serialize(Of T)(T)
  nameWithType: CompressDataSerializer.Serialize<T>(T)
  nameWithType.vb: CompressDataSerializer.Serialize(Of T)(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1
  name: ConcurrentSet<T>
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: T:WeihanLi.Common.Helpers.ConcurrentSet`1
  name.vb: ConcurrentSet(Of T)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T)
  nameWithType: ConcurrentSet<T>
  nameWithType.vb: ConcurrentSet(Of T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Add(`0)
  name: Add(T)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.Add(`0)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Add(T)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Add(T)
  nameWithType: ConcurrentSet<T>.Add(T)
  nameWithType.vb: ConcurrentSet(Of T).Add(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Add*
  name: Add
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Add
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Add
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Add
  nameWithType: ConcurrentSet<T>.Add
  nameWithType.vb: ConcurrentSet(Of T).Add
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Clear
  name: Clear()
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.Clear
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Clear()
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Clear()
  nameWithType: ConcurrentSet<T>.Clear()
  nameWithType.vb: ConcurrentSet(Of T).Clear()
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Clear*
  name: Clear
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Clear
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Clear
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Clear
  nameWithType: ConcurrentSet<T>.Clear
  nameWithType.vb: ConcurrentSet(Of T).Clear
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Contains(`0)
  name: Contains(T)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.Contains(`0)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Contains(T)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Contains(T)
  nameWithType: ConcurrentSet<T>.Contains(T)
  nameWithType.vb: ConcurrentSet(Of T).Contains(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Contains*
  name: Contains
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Contains
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Contains
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Contains
  nameWithType: ConcurrentSet<T>.Contains
  nameWithType.vb: ConcurrentSet(Of T).Contains
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], int)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.CopyTo(`0[],System.Int32)
  name.vb: CopyTo(T(), Integer)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.CopyTo(T[], int)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).CopyTo(T(), Integer)
  nameWithType: ConcurrentSet<T>.CopyTo(T[], int)
  nameWithType.vb: ConcurrentSet(Of T).CopyTo(T(), Integer)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.CopyTo*
  name: CopyTo
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.CopyTo
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.CopyTo
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).CopyTo
  nameWithType: ConcurrentSet<T>.CopyTo
  nameWithType.vb: ConcurrentSet(Of T).CopyTo
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Count
  name: Count
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: P:WeihanLi.Common.Helpers.ConcurrentSet`1.Count
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Count
  nameWithType: ConcurrentSet<T>.Count
  nameWithType.vb: ConcurrentSet(Of T).Count
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Count*
  name: Count
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Count
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Count
  nameWithType: ConcurrentSet<T>.Count
  nameWithType.vb: ConcurrentSet(Of T).Count
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.GetEnumerator
  name: GetEnumerator()
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.GetEnumerator
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.GetEnumerator()
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).GetEnumerator()
  nameWithType: ConcurrentSet<T>.GetEnumerator()
  nameWithType.vb: ConcurrentSet(Of T).GetEnumerator()
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.GetEnumerator
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).GetEnumerator
  nameWithType: ConcurrentSet<T>.GetEnumerator
  nameWithType.vb: ConcurrentSet(Of T).GetEnumerator
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.IsEmpty
  name: IsEmpty
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: P:WeihanLi.Common.Helpers.ConcurrentSet`1.IsEmpty
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.IsEmpty
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).IsEmpty
  nameWithType: ConcurrentSet<T>.IsEmpty
  nameWithType.vb: ConcurrentSet(Of T).IsEmpty
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.IsEmpty*
  name: IsEmpty
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.IsEmpty
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.IsEmpty
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).IsEmpty
  nameWithType: ConcurrentSet<T>.IsEmpty
  nameWithType.vb: ConcurrentSet(Of T).IsEmpty
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.IsReadOnly
  name: IsReadOnly
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: P:WeihanLi.Common.Helpers.ConcurrentSet`1.IsReadOnly
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.IsReadOnly
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).IsReadOnly
  nameWithType: ConcurrentSet<T>.IsReadOnly
  nameWithType.vb: ConcurrentSet(Of T).IsReadOnly
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.IsReadOnly*
  name: IsReadOnly
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.IsReadOnly
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.IsReadOnly
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).IsReadOnly
  nameWithType: ConcurrentSet<T>.IsReadOnly
  nameWithType.vb: ConcurrentSet(Of T).IsReadOnly
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Remove(`0)
  name: Remove(T)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.Remove(`0)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Remove(T)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Remove(T)
  nameWithType: ConcurrentSet<T>.Remove(T)
  nameWithType.vb: ConcurrentSet(Of T).Remove(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Remove*
  name: Remove
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Remove
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Remove
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Remove
  nameWithType: ConcurrentSet<T>.Remove
  nameWithType.vb: ConcurrentSet(Of T).Remove
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.TryAdd(`0)
  name: TryAdd(T)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.TryAdd(`0)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.TryAdd(T)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).TryAdd(T)
  nameWithType: ConcurrentSet<T>.TryAdd(T)
  nameWithType.vb: ConcurrentSet(Of T).TryAdd(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.TryAdd*
  name: TryAdd
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.TryAdd
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.TryAdd
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).TryAdd
  nameWithType: ConcurrentSet<T>.TryAdd
  nameWithType.vb: ConcurrentSet(Of T).TryAdd
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.TryRemove(`0)
  name: TryRemove(T)
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.TryRemove(`0)
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.TryRemove(T)
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).TryRemove(T)
  nameWithType: ConcurrentSet<T>.TryRemove(T)
  nameWithType.vb: ConcurrentSet(Of T).TryRemove(T)
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.TryRemove*
  name: TryRemove
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.TryRemove
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.TryRemove
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).TryRemove
  nameWithType: ConcurrentSet<T>.TryRemove
  nameWithType.vb: ConcurrentSet(Of T).TryRemove
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Values
  name: Values()
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: M:WeihanLi.Common.Helpers.ConcurrentSet`1.Values
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Values()
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Values()
  nameWithType: ConcurrentSet<T>.Values()
  nameWithType.vb: ConcurrentSet(Of T).Values()
- uid: WeihanLi.Common.Helpers.ConcurrentSet`1.Values*
  name: Values
  href: api/WeihanLi.Common.Helpers.ConcurrentSet-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConcurrentSet`1.Values
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConcurrentSet<T>.Values
  fullName.vb: WeihanLi.Common.Helpers.ConcurrentSet(Of T).Values
  nameWithType: ConcurrentSet<T>.Values
  nameWithType.vb: ConcurrentSet(Of T).Values
- uid: WeihanLi.Common.Helpers.ConsoleHelper
  name: ConsoleHelper
  href: api/WeihanLi.Common.Helpers.ConsoleHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ConsoleHelper
  fullName: WeihanLi.Common.Helpers.ConsoleHelper
  nameWithType: ConsoleHelper
- uid: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Action,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  name: InvokeWithConsoleColor(Action, ConsoleColor?, ConsoleColor?)
  href: api/WeihanLi.Common.Helpers.ConsoleHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Action,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  fullName: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Action, System.ConsoleColor?, System.ConsoleColor?)
  nameWithType: ConsoleHelper.InvokeWithConsoleColor(Action, ConsoleColor?, ConsoleColor?)
- uid: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Func{System.Threading.Tasks.Task},System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  name: InvokeWithConsoleColor(Func<Task>, ConsoleColor?, ConsoleColor?)
  href: api/WeihanLi.Common.Helpers.ConsoleHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Func{System.Threading.Tasks.Task},System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})
  name.vb: InvokeWithConsoleColor(Func(Of Task), ConsoleColor?, ConsoleColor?)
  fullName: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Func<System.Threading.Tasks.Task>, System.ConsoleColor?, System.ConsoleColor?)
  fullName.vb: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor(System.Func(Of System.Threading.Tasks.Task), System.ConsoleColor?, System.ConsoleColor?)
  nameWithType: ConsoleHelper.InvokeWithConsoleColor(Func<Task>, ConsoleColor?, ConsoleColor?)
  nameWithType.vb: ConsoleHelper.InvokeWithConsoleColor(Func(Of Task), ConsoleColor?, ConsoleColor?)
- uid: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor*
  name: InvokeWithConsoleColor
  href: api/WeihanLi.Common.Helpers.ConsoleHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleHelper.InvokeWithConsoleColor
  nameWithType: ConsoleHelper.InvokeWithConsoleColor
- uid: WeihanLi.Common.Helpers.ConsoleOutput
  name: ConsoleOutput
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: T:WeihanLi.Common.Helpers.ConsoleOutput
  fullName: WeihanLi.Common.Helpers.ConsoleOutput
  nameWithType: ConsoleOutput
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Capture
  name: Capture()
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleOutput.Capture
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Capture()
  nameWithType: ConsoleOutput.Capture()
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Capture*
  name: Capture
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.Capture
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Capture
  nameWithType: ConsoleOutput.Capture
- uid: WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync
  name: CaptureAsync()
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync()
  nameWithType: ConsoleOutput.CaptureAsync()
- uid: WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync*
  name: CaptureAsync
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.CaptureAsync
  nameWithType: ConsoleOutput.CaptureAsync
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Clear
  name: Clear()
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleOutput.Clear
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Clear()
  nameWithType: ConsoleOutput.Clear()
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Clear*
  name: Clear
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.Clear
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Clear
  nameWithType: ConsoleOutput.Clear
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: M:WeihanLi.Common.Helpers.ConsoleOutput.Dispose
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Dispose()
  nameWithType: ConsoleOutput.Dispose()
- uid: WeihanLi.Common.Helpers.ConsoleOutput.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.Dispose
  nameWithType: ConsoleOutput.Dispose
- uid: WeihanLi.Common.Helpers.ConsoleOutput.StandardError
  name: StandardError
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: P:WeihanLi.Common.Helpers.ConsoleOutput.StandardError
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.StandardError
  nameWithType: ConsoleOutput.StandardError
- uid: WeihanLi.Common.Helpers.ConsoleOutput.StandardError*
  name: StandardError
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.StandardError
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.StandardError
  nameWithType: ConsoleOutput.StandardError
- uid: WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput
  name: StandardOutput
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: P:WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput
  nameWithType: ConsoleOutput.StandardOutput
- uid: WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput*
  name: StandardOutput
  href: api/WeihanLi.Common.Helpers.ConsoleOutput.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConsoleOutput.StandardOutput
  nameWithType: ConsoleOutput.StandardOutput
- uid: WeihanLi.Common.Helpers.ContextAccessor`1
  name: ContextAccessor<TContext>
  href: api/WeihanLi.Common.Helpers.ContextAccessor-1.yml
  commentId: T:WeihanLi.Common.Helpers.ContextAccessor`1
  name.vb: ContextAccessor(Of TContext)
  fullName: WeihanLi.Common.Helpers.ContextAccessor<TContext>
  fullName.vb: WeihanLi.Common.Helpers.ContextAccessor(Of TContext)
  nameWithType: ContextAccessor<TContext>
  nameWithType.vb: ContextAccessor(Of TContext)
- uid: WeihanLi.Common.Helpers.ContextAccessor`1.Context
  name: Context
  href: api/WeihanLi.Common.Helpers.ContextAccessor-1.yml
  commentId: P:WeihanLi.Common.Helpers.ContextAccessor`1.Context
  fullName: WeihanLi.Common.Helpers.ContextAccessor<TContext>.Context
  fullName.vb: WeihanLi.Common.Helpers.ContextAccessor(Of TContext).Context
  nameWithType: ContextAccessor<TContext>.Context
  nameWithType.vb: ContextAccessor(Of TContext).Context
- uid: WeihanLi.Common.Helpers.ContextAccessor`1.Context*
  name: Context
  href: api/WeihanLi.Common.Helpers.ContextAccessor-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.ContextAccessor`1.Context
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ContextAccessor<TContext>.Context
  fullName.vb: WeihanLi.Common.Helpers.ContextAccessor(Of TContext).Context
  nameWithType: ContextAccessor<TContext>.Context
  nameWithType.vb: ContextAccessor(Of TContext).Context
- uid: WeihanLi.Common.Helpers.ConvertHelper
  name: ConvertHelper
  href: api/WeihanLi.Common.Helpers.ConvertHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ConvertHelper
  fullName: WeihanLi.Common.Helpers.ConvertHelper
  nameWithType: ConvertHelper
- uid: WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint(System.String,System.Int32)
  name: ToEndPoint(string, int)
  href: api/WeihanLi.Common.Helpers.ConvertHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint(System.String,System.Int32)
  name.vb: ToEndPoint(String, Integer)
  fullName: WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint(string, int)
  fullName.vb: WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint(String, Integer)
  nameWithType: ConvertHelper.ToEndPoint(string, int)
  nameWithType.vb: ConvertHelper.ToEndPoint(String, Integer)
- uid: WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint*
  name: ToEndPoint
  href: api/WeihanLi.Common.Helpers.ConvertHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ConvertHelper.ToEndPoint
  nameWithType: ConvertHelper.ToEndPoint
- uid: WeihanLi.Common.Helpers.Cron
  name: WeihanLi.Common.Helpers.Cron
  href: api/WeihanLi.Common.Helpers.Cron.yml
  commentId: N:WeihanLi.Common.Helpers.Cron
  fullName: WeihanLi.Common.Helpers.Cron
  nameWithType: WeihanLi.Common.Helpers.Cron
- uid: WeihanLi.Common.Helpers.Cron.CronExpression
  name: CronExpression
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: T:WeihanLi.Common.Helpers.Cron.CronExpression
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression
  nameWithType: CronExpression
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Equals(System.Object)
  name: Equals(object)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.Equals(System.Object)
  name.vb: Equals(Object)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Equals(object)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.Equals(Object)
  nameWithType: CronExpression.Equals(object)
  nameWithType.vb: CronExpression.Equals(Object)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Equals(WeihanLi.Common.Helpers.Cron.CronExpression)
  name: Equals(CronExpression)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.Equals(WeihanLi.Common.Helpers.Cron.CronExpression)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Equals(WeihanLi.Common.Helpers.Cron.CronExpression)
  nameWithType: CronExpression.Equals(CronExpression)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Equals*
  name: Equals
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.Equals
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Equals
  nameWithType: CronExpression.Equals
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode
  name: GetHashCode()
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode()
  nameWithType: CronExpression.GetHashCode()
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode*
  name: GetHashCode
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetHashCode
  nameWithType: CronExpression.GetHashCode
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence(System.DateTimeOffset,System.TimeZoneInfo,System.Boolean)
  name: GetNextOccurrence(DateTimeOffset, TimeZoneInfo, bool)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence(System.DateTimeOffset,System.TimeZoneInfo,System.Boolean)
  name.vb: GetNextOccurrence(DateTimeOffset, TimeZoneInfo, Boolean)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence(System.DateTimeOffset, System.TimeZoneInfo, bool)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence(System.DateTimeOffset, System.TimeZoneInfo, Boolean)
  nameWithType: CronExpression.GetNextOccurrence(DateTimeOffset, TimeZoneInfo, bool)
  nameWithType.vb: CronExpression.GetNextOccurrence(DateTimeOffset, TimeZoneInfo, Boolean)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence*
  name: GetNextOccurrence
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetNextOccurrence
  nameWithType: CronExpression.GetNextOccurrence
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences(System.DateTimeOffset,System.DateTimeOffset,System.TimeZoneInfo,System.Boolean,System.Boolean)
  name: GetOccurrences(DateTimeOffset, DateTimeOffset, TimeZoneInfo, bool, bool)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences(System.DateTimeOffset,System.DateTimeOffset,System.TimeZoneInfo,System.Boolean,System.Boolean)
  name.vb: GetOccurrences(DateTimeOffset, DateTimeOffset, TimeZoneInfo, Boolean, Boolean)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences(System.DateTimeOffset, System.DateTimeOffset, System.TimeZoneInfo, bool, bool)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences(System.DateTimeOffset, System.DateTimeOffset, System.TimeZoneInfo, Boolean, Boolean)
  nameWithType: CronExpression.GetOccurrences(DateTimeOffset, DateTimeOffset, TimeZoneInfo, bool, bool)
  nameWithType.vb: CronExpression.GetOccurrences(DateTimeOffset, DateTimeOffset, TimeZoneInfo, Boolean, Boolean)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences*
  name: GetOccurrences
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.GetOccurrences
  nameWithType: CronExpression.GetOccurrences
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.op_Equality(WeihanLi.Common.Helpers.Cron.CronExpression,WeihanLi.Common.Helpers.Cron.CronExpression)
  name: operator ==(CronExpression, CronExpression)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.op_Equality(WeihanLi.Common.Helpers.Cron.CronExpression,WeihanLi.Common.Helpers.Cron.CronExpression)
  name.vb: =(CronExpression, CronExpression)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.operator ==(WeihanLi.Common.Helpers.Cron.CronExpression, WeihanLi.Common.Helpers.Cron.CronExpression)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.=(WeihanLi.Common.Helpers.Cron.CronExpression, WeihanLi.Common.Helpers.Cron.CronExpression)
  nameWithType: CronExpression.operator ==(CronExpression, CronExpression)
  nameWithType.vb: CronExpression.=(CronExpression, CronExpression)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.op_Equality*
  name: operator ==
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.op_Equality
  isSpec: "True"
  name.vb: =
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.operator ==
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.=
  nameWithType: CronExpression.operator ==
  nameWithType.vb: CronExpression.=
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.op_Inequality(WeihanLi.Common.Helpers.Cron.CronExpression,WeihanLi.Common.Helpers.Cron.CronExpression)
  name: operator !=(CronExpression, CronExpression)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.op_Inequality(WeihanLi.Common.Helpers.Cron.CronExpression,WeihanLi.Common.Helpers.Cron.CronExpression)
  name.vb: <>(CronExpression, CronExpression)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.operator !=(WeihanLi.Common.Helpers.Cron.CronExpression, WeihanLi.Common.Helpers.Cron.CronExpression)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.<>(WeihanLi.Common.Helpers.Cron.CronExpression, WeihanLi.Common.Helpers.Cron.CronExpression)
  nameWithType: CronExpression.operator !=(CronExpression, CronExpression)
  nameWithType.vb: CronExpression.<>(CronExpression, CronExpression)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.op_Inequality*
  name: operator !=
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.op_Inequality
  isSpec: "True"
  name.vb: <>
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.operator !=
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.<>
  nameWithType: CronExpression.operator !=
  nameWithType.vb: CronExpression.<>
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(System.String,WeihanLi.Common.Helpers.Cron.CronFormat)
  name: Parse(string, CronFormat)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.Parse(System.String,WeihanLi.Common.Helpers.Cron.CronFormat)
  name.vb: Parse(String, CronFormat)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(string, WeihanLi.Common.Helpers.Cron.CronFormat)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(String, WeihanLi.Common.Helpers.Cron.CronFormat)
  nameWithType: CronExpression.Parse(string, CronFormat)
  nameWithType.vb: CronExpression.Parse(String, CronFormat)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(System.String)
  name: Parse(string)
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.Parse(System.String)
  name.vb: Parse(String)
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(string)
  fullName.vb: WeihanLi.Common.Helpers.Cron.CronExpression.Parse(String)
  nameWithType: CronExpression.Parse(string)
  nameWithType.vb: CronExpression.Parse(String)
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.Parse*
  name: Parse
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.Parse
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.Parse
  nameWithType: CronExpression.Parse
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.ToString
  name: ToString()
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: M:WeihanLi.Common.Helpers.Cron.CronExpression.ToString
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.ToString()
  nameWithType: CronExpression.ToString()
- uid: WeihanLi.Common.Helpers.Cron.CronExpression.ToString*
  name: ToString
  href: api/WeihanLi.Common.Helpers.Cron.CronExpression.yml
  commentId: Overload:WeihanLi.Common.Helpers.Cron.CronExpression.ToString
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.Cron.CronExpression.ToString
  nameWithType: CronExpression.ToString
- uid: WeihanLi.Common.Helpers.Cron.CronFormat
  name: CronFormat
  href: api/WeihanLi.Common.Helpers.Cron.CronFormat.yml
  commentId: T:WeihanLi.Common.Helpers.Cron.CronFormat
  fullName: WeihanLi.Common.Helpers.Cron.CronFormat
  nameWithType: CronFormat
- uid: WeihanLi.Common.Helpers.Cron.CronFormat.IncludeSeconds
  name: IncludeSeconds
  href: api/WeihanLi.Common.Helpers.Cron.CronFormat.yml
  commentId: F:WeihanLi.Common.Helpers.Cron.CronFormat.IncludeSeconds
  fullName: WeihanLi.Common.Helpers.Cron.CronFormat.IncludeSeconds
  nameWithType: CronFormat.IncludeSeconds
- uid: WeihanLi.Common.Helpers.Cron.CronFormat.Standard
  name: Standard
  href: api/WeihanLi.Common.Helpers.Cron.CronFormat.yml
  commentId: F:WeihanLi.Common.Helpers.Cron.CronFormat.Standard
  fullName: WeihanLi.Common.Helpers.Cron.CronFormat.Standard
  nameWithType: CronFormat.Standard
- uid: WeihanLi.Common.Helpers.CronHelper
  name: CronHelper
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: T:WeihanLi.Common.Helpers.CronHelper
  fullName: WeihanLi.Common.Helpers.CronHelper
  nameWithType: CronHelper
- uid: WeihanLi.Common.Helpers.CronHelper.Daily
  name: Daily
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Daily
  fullName: WeihanLi.Common.Helpers.CronHelper.Daily
  nameWithType: CronHelper.Daily
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(System.String,System.TimeZoneInfo)
  name: GetNextOccurrence(string, TimeZoneInfo)
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: M:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(System.String,System.TimeZoneInfo)
  name.vb: GetNextOccurrence(String, TimeZoneInfo)
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(string, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(String, System.TimeZoneInfo)
  nameWithType: CronHelper.GetNextOccurrence(string, TimeZoneInfo)
  nameWithType.vb: CronHelper.GetNextOccurrence(String, TimeZoneInfo)
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(System.String)
  name: GetNextOccurrence(string)
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: M:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(System.String)
  name.vb: GetNextOccurrence(String)
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(string)
  fullName.vb: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence(String)
  nameWithType: CronHelper.GetNextOccurrence(string)
  nameWithType.vb: CronHelper.GetNextOccurrence(String)
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence*
  name: GetNextOccurrence
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrence
  nameWithType: CronHelper.GetNextOccurrence
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(System.String,System.TimeSpan,System.TimeZoneInfo)
  name: GetNextOccurrences(string, TimeSpan, TimeZoneInfo)
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: M:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(System.String,System.TimeSpan,System.TimeZoneInfo)
  name.vb: GetNextOccurrences(String, TimeSpan, TimeZoneInfo)
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(string, System.TimeSpan, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(String, System.TimeSpan, System.TimeZoneInfo)
  nameWithType: CronHelper.GetNextOccurrences(string, TimeSpan, TimeZoneInfo)
  nameWithType.vb: CronHelper.GetNextOccurrences(String, TimeSpan, TimeZoneInfo)
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(System.String,System.TimeSpan)
  name: GetNextOccurrences(string, TimeSpan)
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: M:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(System.String,System.TimeSpan)
  name.vb: GetNextOccurrences(String, TimeSpan)
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(string, System.TimeSpan)
  fullName.vb: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences(String, System.TimeSpan)
  nameWithType: CronHelper.GetNextOccurrences(string, TimeSpan)
  nameWithType.vb: CronHelper.GetNextOccurrences(String, TimeSpan)
- uid: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences*
  name: GetNextOccurrences
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.CronHelper.GetNextOccurrences
  nameWithType: CronHelper.GetNextOccurrences
- uid: WeihanLi.Common.Helpers.CronHelper.Hourly
  name: Hourly
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Hourly
  fullName: WeihanLi.Common.Helpers.CronHelper.Hourly
  nameWithType: CronHelper.Hourly
- uid: WeihanLi.Common.Helpers.CronHelper.Minutely
  name: Minutely
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Minutely
  fullName: WeihanLi.Common.Helpers.CronHelper.Minutely
  nameWithType: CronHelper.Minutely
- uid: WeihanLi.Common.Helpers.CronHelper.Monthly
  name: Monthly
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Monthly
  fullName: WeihanLi.Common.Helpers.CronHelper.Monthly
  nameWithType: CronHelper.Monthly
- uid: WeihanLi.Common.Helpers.CronHelper.Secondly
  name: Secondly
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Secondly
  fullName: WeihanLi.Common.Helpers.CronHelper.Secondly
  nameWithType: CronHelper.Secondly
- uid: WeihanLi.Common.Helpers.CronHelper.Weekly
  name: Weekly
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Weekly
  fullName: WeihanLi.Common.Helpers.CronHelper.Weekly
  nameWithType: CronHelper.Weekly
- uid: WeihanLi.Common.Helpers.CronHelper.Yearly
  name: Yearly
  href: api/WeihanLi.Common.Helpers.CronHelper.yml
  commentId: F:WeihanLi.Common.Helpers.CronHelper.Yearly
  fullName: WeihanLi.Common.Helpers.CronHelper.Yearly
  nameWithType: CronHelper.Yearly
- uid: WeihanLi.Common.Helpers.DelegateHelper
  name: DelegateHelper
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: T:WeihanLi.Common.Helpers.DelegateHelper
  fullName: WeihanLi.Common.Helpers.DelegateHelper
  nameWithType: DelegateHelper
- uid: WeihanLi.Common.Helpers.DelegateHelper.FromMethod(System.Reflection.MethodInfo,System.Object)
  name: FromMethod(MethodInfo, object?)
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateHelper.FromMethod(System.Reflection.MethodInfo,System.Object)
  name.vb: FromMethod(MethodInfo, Object)
  fullName: WeihanLi.Common.Helpers.DelegateHelper.FromMethod(System.Reflection.MethodInfo, object?)
  fullName.vb: WeihanLi.Common.Helpers.DelegateHelper.FromMethod(System.Reflection.MethodInfo, Object)
  nameWithType: DelegateHelper.FromMethod(MethodInfo, object?)
  nameWithType.vb: DelegateHelper.FromMethod(MethodInfo, Object)
- uid: WeihanLi.Common.Helpers.DelegateHelper.FromMethod*
  name: FromMethod
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateHelper.FromMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateHelper.FromMethod
  nameWithType: DelegateHelper.FromMethod
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetAction(System.Type[])
  name: GetAction(params Type[]?)
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateHelper.GetAction(System.Type[])
  name.vb: GetAction(ParamArray Type())
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetAction(params System.Type[]?)
  fullName.vb: WeihanLi.Common.Helpers.DelegateHelper.GetAction(ParamArray System.Type())
  nameWithType: DelegateHelper.GetAction(params Type[]?)
  nameWithType.vb: DelegateHelper.GetAction(ParamArray Type())
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetAction*
  name: GetAction
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateHelper.GetAction
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetAction
  nameWithType: DelegateHelper.GetAction
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetDelegate(System.Type[],System.Type)
  name: GetDelegate(Type[]?, Type?)
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateHelper.GetDelegate(System.Type[],System.Type)
  name.vb: GetDelegate(Type(), Type)
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetDelegate(System.Type[]?, System.Type?)
  fullName.vb: WeihanLi.Common.Helpers.DelegateHelper.GetDelegate(System.Type(), System.Type)
  nameWithType: DelegateHelper.GetDelegate(Type[]?, Type?)
  nameWithType.vb: DelegateHelper.GetDelegate(Type(), Type)
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetDelegate*
  name: GetDelegate
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateHelper.GetDelegate
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetDelegate
  nameWithType: DelegateHelper.GetDelegate
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType(System.Reflection.MethodInfo)
  name: GetDelegateType(MethodInfo)
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType(System.Reflection.MethodInfo)
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType(System.Reflection.MethodInfo)
  nameWithType: DelegateHelper.GetDelegateType(MethodInfo)
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType*
  name: GetDelegateType
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetDelegateType
  nameWithType: DelegateHelper.GetDelegateType
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetFunc(System.Type,System.Type[])
  name: GetFunc(Type, params Type[]?)
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateHelper.GetFunc(System.Type,System.Type[])
  name.vb: GetFunc(Type, ParamArray Type())
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetFunc(System.Type, params System.Type[]?)
  fullName.vb: WeihanLi.Common.Helpers.DelegateHelper.GetFunc(System.Type, ParamArray System.Type())
  nameWithType: DelegateHelper.GetFunc(Type, params Type[]?)
  nameWithType.vb: DelegateHelper.GetFunc(Type, ParamArray Type())
- uid: WeihanLi.Common.Helpers.DelegateHelper.GetFunc*
  name: GetFunc
  href: api/WeihanLi.Common.Helpers.DelegateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateHelper.GetFunc
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateHelper.GetFunc
  nameWithType: DelegateHelper.GetFunc
- uid: WeihanLi.Common.Helpers.DelegateTextWriter
  name: DelegateTextWriter
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: T:WeihanLi.Common.Helpers.DelegateTextWriter
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter
  nameWithType: DelegateTextWriter
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.#ctor(System.Action{System.String})
  name: DelegateTextWriter(Action<string>)
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateTextWriter.#ctor(System.Action{System.String})
  name.vb: New(Action(Of String))
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.DelegateTextWriter(System.Action<string>)
  fullName.vb: WeihanLi.Common.Helpers.DelegateTextWriter.New(System.Action(Of String))
  nameWithType: DelegateTextWriter.DelegateTextWriter(Action<string>)
  nameWithType.vb: DelegateTextWriter.New(Action(Of String))
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.#ctor*
  name: DelegateTextWriter
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.DelegateTextWriter
  fullName.vb: WeihanLi.Common.Helpers.DelegateTextWriter.New
  nameWithType: DelegateTextWriter.DelegateTextWriter
  nameWithType.vb: DelegateTextWriter.New
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Encoding
  name: Encoding
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: P:WeihanLi.Common.Helpers.DelegateTextWriter.Encoding
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Encoding
  nameWithType: DelegateTextWriter.Encoding
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Encoding*
  name: Encoding
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.Encoding
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Encoding
  nameWithType: DelegateTextWriter.Encoding
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Flush
  name: Flush()
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateTextWriter.Flush
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Flush()
  nameWithType: DelegateTextWriter.Flush()
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Flush*
  name: Flush
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.Flush
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Flush
  nameWithType: DelegateTextWriter.Flush
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync
  name: FlushAsync()
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync()
  nameWithType: DelegateTextWriter.FlushAsync()
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync*
  name: FlushAsync
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.FlushAsync
  nameWithType: DelegateTextWriter.FlushAsync
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Write(System.Char)
  name: Write(char)
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateTextWriter.Write(System.Char)
  name.vb: Write(Char)
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Write(char)
  fullName.vb: WeihanLi.Common.Helpers.DelegateTextWriter.Write(Char)
  nameWithType: DelegateTextWriter.Write(char)
  nameWithType.vb: DelegateTextWriter.Write(Char)
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.Write*
  name: Write
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.Write
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.Write
  nameWithType: DelegateTextWriter.Write
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync(System.Char)
  name: WriteAsync(char)
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: M:WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync(System.Char)
  name.vb: WriteAsync(Char)
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync(char)
  fullName.vb: WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync(Char)
  nameWithType: DelegateTextWriter.WriteAsync(char)
  nameWithType.vb: DelegateTextWriter.WriteAsync(Char)
- uid: WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync*
  name: WriteAsync
  href: api/WeihanLi.Common.Helpers.DelegateTextWriter.yml
  commentId: Overload:WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.DelegateTextWriter.WriteAsync
  nameWithType: DelegateTextWriter.WriteAsync
- uid: WeihanLi.Common.Helpers.EnumHelper
  name: EnumHelper
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: T:WeihanLi.Common.Helpers.EnumHelper
  fullName: WeihanLi.Common.Helpers.EnumHelper
  nameWithType: EnumHelper
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList*
  name: ToIdNameDescList
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList
  nameWithType: EnumHelper.ToIdNameDescList
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList``1
  name: ToIdNameDescList<TEnum>()
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: M:WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList``1
  name.vb: ToIdNameDescList(Of TEnum)()
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList<TEnum>()
  fullName.vb: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList(Of TEnum)()
  nameWithType: EnumHelper.ToIdNameDescList<TEnum>()
  nameWithType.vb: EnumHelper.ToIdNameDescList(Of TEnum)()
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList``2
  name: ToIdNameDescList<TEnum, TValue>()
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: M:WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList``2
  name.vb: ToIdNameDescList(Of TEnum, TValue)()
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList<TEnum, TValue>()
  fullName.vb: WeihanLi.Common.Helpers.EnumHelper.ToIdNameDescList(Of TEnum, TValue)()
  nameWithType: EnumHelper.ToIdNameDescList<TEnum, TValue>()
  nameWithType.vb: EnumHelper.ToIdNameDescList(Of TEnum, TValue)()
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList*
  name: ToIdNameList
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.EnumHelper.ToIdNameList
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList
  nameWithType: EnumHelper.ToIdNameList
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList``1
  name: ToIdNameList<TEnum>()
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: M:WeihanLi.Common.Helpers.EnumHelper.ToIdNameList``1
  name.vb: ToIdNameList(Of TEnum)()
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList<TEnum>()
  fullName.vb: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList(Of TEnum)()
  nameWithType: EnumHelper.ToIdNameList<TEnum>()
  nameWithType.vb: EnumHelper.ToIdNameList(Of TEnum)()
- uid: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList``2
  name: ToIdNameList<TEnum, TValue>()
  href: api/WeihanLi.Common.Helpers.EnumHelper.yml
  commentId: M:WeihanLi.Common.Helpers.EnumHelper.ToIdNameList``2
  name.vb: ToIdNameList(Of TEnum, TValue)()
  fullName: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList<TEnum, TValue>()
  fullName.vb: WeihanLi.Common.Helpers.EnumHelper.ToIdNameList(Of TEnum, TValue)()
  nameWithType: EnumHelper.ToIdNameList<TEnum, TValue>()
  nameWithType.vb: EnumHelper.ToIdNameList(Of TEnum, TValue)()
- uid: WeihanLi.Common.Helpers.ExpressionHelper
  name: ExpressionHelper
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ExpressionHelper
  fullName: WeihanLi.Common.Helpers.ExpressionHelper
  nameWithType: ExpressionHelper
- uid: WeihanLi.Common.Helpers.ExpressionHelper.False*
  name: "False"
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ExpressionHelper.False
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.False
  nameWithType: ExpressionHelper.False
- uid: WeihanLi.Common.Helpers.ExpressionHelper.False``1
  name: False<T>()
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ExpressionHelper.False``1
  name.vb: False(Of T)()
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.False<T>()
  fullName.vb: WeihanLi.Common.Helpers.ExpressionHelper.False(Of T)()
  nameWithType: ExpressionHelper.False<T>()
  nameWithType.vb: ExpressionHelper.False(Of T)()
- uid: WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector*
  name: GetPropertySelector
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector
  nameWithType: ExpressionHelper.GetPropertySelector
- uid: WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector``2(System.String)
  name: GetPropertySelector<T, TProperty>(string)
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector``2(System.String)
  name.vb: GetPropertySelector(Of T, TProperty)(String)
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector<T, TProperty>(string)
  fullName.vb: WeihanLi.Common.Helpers.ExpressionHelper.GetPropertySelector(Of T, TProperty)(String)
  nameWithType: ExpressionHelper.GetPropertySelector<T, TProperty>(string)
  nameWithType.vb: ExpressionHelper.GetPropertySelector(Of T, TProperty)(String)
- uid: WeihanLi.Common.Helpers.ExpressionHelper.True*
  name: "True"
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ExpressionHelper.True
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.True
  nameWithType: ExpressionHelper.True
- uid: WeihanLi.Common.Helpers.ExpressionHelper.True``1
  name: True<T>()
  href: api/WeihanLi.Common.Helpers.ExpressionHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ExpressionHelper.True``1
  name.vb: True(Of T)()
  fullName: WeihanLi.Common.Helpers.ExpressionHelper.True<T>()
  fullName.vb: WeihanLi.Common.Helpers.ExpressionHelper.True(Of T)()
  nameWithType: ExpressionHelper.True<T>()
  nameWithType.vb: ExpressionHelper.True(Of T)()
- uid: WeihanLi.Common.Helpers.HashHelper
  name: HashHelper
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: T:WeihanLi.Common.Helpers.HashHelper
  fullName: WeihanLi.Common.Helpers.HashHelper
  nameWithType: HashHelper
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Byte[])
  name: GetHashedBytes(HashType, byte[], byte[]?)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Byte[])
  name.vb: GetHashedBytes(HashType, Byte(), Byte())
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, byte[], byte[]?)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, Byte(), Byte())
  nameWithType: HashHelper.GetHashedBytes(HashType, byte[], byte[]?)
  nameWithType.vb: HashHelper.GetHashedBytes(HashType, Byte(), Byte())
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.Byte[])
  name: GetHashedBytes(HashType, byte[])
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.Byte[])
  name.vb: GetHashedBytes(HashType, Byte())
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, byte[])
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, Byte())
  nameWithType: HashHelper.GetHashedBytes(HashType, byte[])
  nameWithType.vb: HashHelper.GetHashedBytes(HashType, Byte())
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.String,System.Text.Encoding)
  name: GetHashedBytes(HashType, string, Encoding)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.String,System.Text.Encoding)
  name.vb: GetHashedBytes(HashType, String, Encoding)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, string, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, String, System.Text.Encoding)
  nameWithType: HashHelper.GetHashedBytes(HashType, string, Encoding)
  nameWithType.vb: HashHelper.GetHashedBytes(HashType, String, Encoding)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.String)
  name: GetHashedBytes(HashType, string)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType,System.String)
  name.vb: GetHashedBytes(HashType, String)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, string)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes(WeihanLi.Common.Helpers.HashType, String)
  nameWithType: HashHelper.GetHashedBytes(HashType, string)
  nameWithType.vb: HashHelper.GetHashedBytes(HashType, String)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes*
  name: GetHashedBytes
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HashHelper.GetHashedBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedBytes
  nameWithType: HashHelper.GetHashedBytes
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Boolean)
  name: GetHashedString(HashType, byte[], bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Boolean)
  name.vb: GetHashedString(HashType, Byte(), Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, byte[], bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, Byte(), Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, byte[], bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, Byte(), Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Byte[],System.Boolean)
  name: GetHashedString(HashType, byte[], byte[]?, bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[],System.Byte[],System.Boolean)
  name.vb: GetHashedString(HashType, Byte(), Byte(), Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, byte[], byte[]?, bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, Byte(), Byte(), Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, byte[], byte[]?, bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, Byte(), Byte(), Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[])
  name: GetHashedString(HashType, byte[])
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.Byte[])
  name.vb: GetHashedString(HashType, Byte())
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, byte[])
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, Byte())
  nameWithType: HashHelper.GetHashedString(HashType, byte[])
  nameWithType.vb: HashHelper.GetHashedString(HashType, Byte())
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.Boolean)
  name: GetHashedString(HashType, string, bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.Boolean)
  name.vb: GetHashedString(HashType, String, Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, string, bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, String, Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, string, bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, String, Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.String,System.Boolean)
  name: GetHashedString(HashType, string, string?, bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.String,System.Boolean)
  name.vb: GetHashedString(HashType, String, String, Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, string, string?, bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, String, String, Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, string, string?, bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, String, String, Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.String,System.Text.Encoding,System.Boolean)
  name: GetHashedString(HashType, string, string?, Encoding, bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.String,System.Text.Encoding,System.Boolean)
  name.vb: GetHashedString(HashType, String, String, Encoding, Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, string, string?, System.Text.Encoding, bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, String, String, System.Text.Encoding, Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, string, string?, Encoding, bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, String, String, Encoding, Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.Text.Encoding,System.Boolean)
  name: GetHashedString(HashType, string, Encoding, bool)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String,System.Text.Encoding,System.Boolean)
  name.vb: GetHashedString(HashType, String, Encoding, Boolean)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, string, System.Text.Encoding, bool)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, String, System.Text.Encoding, Boolean)
  nameWithType: HashHelper.GetHashedString(HashType, string, Encoding, bool)
  nameWithType.vb: HashHelper.GetHashedString(HashType, String, Encoding, Boolean)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String)
  name: GetHashedString(HashType, string)
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType,System.String)
  name.vb: GetHashedString(HashType, String)
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, string)
  fullName.vb: WeihanLi.Common.Helpers.HashHelper.GetHashedString(WeihanLi.Common.Helpers.HashType, String)
  nameWithType: HashHelper.GetHashedString(HashType, string)
  nameWithType.vb: HashHelper.GetHashedString(HashType, String)
- uid: WeihanLi.Common.Helpers.HashHelper.GetHashedString*
  name: GetHashedString
  href: api/WeihanLi.Common.Helpers.HashHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HashHelper.GetHashedString
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HashHelper.GetHashedString
  nameWithType: HashHelper.GetHashedString
- uid: WeihanLi.Common.Helpers.HashType
  name: HashType
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: T:WeihanLi.Common.Helpers.HashType
  fullName: WeihanLi.Common.Helpers.HashType
  nameWithType: HashType
- uid: WeihanLi.Common.Helpers.HashType.MD5
  name: MD5
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: F:WeihanLi.Common.Helpers.HashType.MD5
  fullName: WeihanLi.Common.Helpers.HashType.MD5
  nameWithType: HashType.MD5
- uid: WeihanLi.Common.Helpers.HashType.SHA1
  name: SHA1
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: F:WeihanLi.Common.Helpers.HashType.SHA1
  fullName: WeihanLi.Common.Helpers.HashType.SHA1
  nameWithType: HashType.SHA1
- uid: WeihanLi.Common.Helpers.HashType.SHA256
  name: SHA256
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: F:WeihanLi.Common.Helpers.HashType.SHA256
  fullName: WeihanLi.Common.Helpers.HashType.SHA256
  nameWithType: HashType.SHA256
- uid: WeihanLi.Common.Helpers.HashType.SHA384
  name: SHA384
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: F:WeihanLi.Common.Helpers.HashType.SHA384
  fullName: WeihanLi.Common.Helpers.HashType.SHA384
  nameWithType: HashType.SHA384
- uid: WeihanLi.Common.Helpers.HashType.SHA512
  name: SHA512
  href: api/WeihanLi.Common.Helpers.HashType.yml
  commentId: F:WeihanLi.Common.Helpers.HashType.SHA512
  fullName: WeihanLi.Common.Helpers.HashType.SHA512
  nameWithType: HashType.SHA512
- uid: WeihanLi.Common.Helpers.HttpHelper
  name: HttpHelper
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: T:WeihanLi.Common.Helpers.HttpHelper
  fullName: WeihanLi.Common.Helpers.HttpHelper
  nameWithType: HttpHelper
- uid: WeihanLi.Common.Helpers.HttpHelper.FormDataContentType
  name: FormDataContentType
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: F:WeihanLi.Common.Helpers.HttpHelper.FormDataContentType
  fullName: WeihanLi.Common.Helpers.HttpHelper.FormDataContentType
  nameWithType: HttpHelper.FormDataContentType
- uid: WeihanLi.Common.Helpers.HttpHelper.GetUserAgent(System.Boolean)
  name: GetUserAgent(bool)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.GetUserAgent(System.Boolean)
  name.vb: GetUserAgent(Boolean)
  fullName: WeihanLi.Common.Helpers.HttpHelper.GetUserAgent(bool)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.GetUserAgent(Boolean)
  nameWithType: HttpHelper.GetUserAgent(bool)
  nameWithType.vb: HttpHelper.GetUserAgent(Boolean)
- uid: WeihanLi.Common.Helpers.HttpHelper.GetUserAgent*
  name: GetUserAgent
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.GetUserAgent
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.GetUserAgent
  nameWithType: HttpHelper.GetUserAgent
- uid: WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent
  name: GetWeChatUserAgent()
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent
  fullName: WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent()
  nameWithType: HttpHelper.GetWeChatUserAgent()
- uid: WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent*
  name: GetWeChatUserAgent
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.GetWeChatUserAgent
  nameWithType: HttpHelper.GetWeChatUserAgent
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpClient
  name: HttpClient
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: F:WeihanLi.Common.Helpers.HttpHelper.HttpClient
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpClient
  nameWithType: HttpHelper.HttpClient
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor*
  name: HttpGetFor
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetFor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor
  nameWithType: HttpHelper.HttpGetFor
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetFor<T>(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetFor(Of T)(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor<T>(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor(Of T)(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetFor<T>(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetFor(Of T)(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetFor<T>(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetFor(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor<T>(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor(Of T)(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetFor<T>(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetFor(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetFor<T>(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetFor(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor<T>(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor(Of T)(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetFor<T>(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetFor(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String)
  name: HttpGetFor<T>(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetFor``1(System.String)
  name.vb: HttpGetFor(Of T)(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor<T>(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetFor(Of T)(String)
  nameWithType: HttpHelper.HttpGetFor<T>(string)
  nameWithType.vb: HttpHelper.HttpGetFor(Of T)(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync*
  name: HttpGetForAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync
  nameWithType: HttpHelper.HttpGetForAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetForAsync<T>(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetForAsync(Of T)(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync<T>(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync(Of T)(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetForAsync<T>(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetForAsync(Of T)(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetForAsync<T>(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetForAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync<T>(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync(Of T)(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetForAsync<T>(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetForAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetForAsync<T>(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetForAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync<T>(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync(Of T)(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetForAsync<T>(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetForAsync(Of T)(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String)
  name: HttpGetForAsync<T>(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync``1(System.String)
  name.vb: HttpGetForAsync(Of T)(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync<T>(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForAsync(Of T)(String)
  nameWithType: HttpHelper.HttpGetForAsync<T>(string)
  nameWithType.vb: HttpHelper.HttpGetForAsync(Of T)(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetForBytes(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetForBytes(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetForBytes(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetForBytes(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetForBytes(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetForBytes(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetForBytes(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetForBytes(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetForBytes(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetForBytes(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetForBytes(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetForBytes(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String)
  name: HttpGetForBytes(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(System.String)
  name.vb: HttpGetForBytes(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes(String)
  nameWithType: HttpHelper.HttpGetForBytes(string)
  nameWithType.vb: HttpHelper.HttpGetForBytes(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes*
  name: HttpGetForBytes
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytes
  nameWithType: HttpHelper.HttpGetForBytes
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetForBytesAsync(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetForBytesAsync(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetForBytesAsync(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetForBytesAsync(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetForBytesAsync(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetForBytesAsync(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetForBytesAsync(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetForBytesAsync(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetForBytesAsync(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetForBytesAsync(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetForBytesAsync(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetForBytesAsync(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String)
  name: HttpGetForBytesAsync(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(System.String)
  name.vb: HttpGetForBytesAsync(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync(String)
  nameWithType: HttpHelper.HttpGetForBytesAsync(string)
  nameWithType.vb: HttpHelper.HttpGetForBytesAsync(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync*
  name: HttpGetForBytesAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetForBytesAsync
  nameWithType: HttpHelper.HttpGetForBytesAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetString(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetString(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetString(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetString(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetString(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetString(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetString(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetString(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetString(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetString(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetString(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetString(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String)
  name: HttpGetString(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetString(System.String)
  name.vb: HttpGetString(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetString(String)
  nameWithType: HttpHelper.HttpGetString(string)
  nameWithType.vb: HttpHelper.HttpGetString(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetString*
  name: HttpGetString
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetString
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetString
  nameWithType: HttpHelper.HttpGetString
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpGetStringAsync(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpGetStringAsync(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpGetStringAsync(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpGetStringAsync(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpGetStringAsync(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpGetStringAsync(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpGetStringAsync(string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpGetStringAsync(String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpGetStringAsync(string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpGetStringAsync(String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpGetStringAsync(string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpGetStringAsync(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String)
  name: HttpGetStringAsync(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(System.String)
  name.vb: HttpGetStringAsync(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync(String)
  nameWithType: HttpHelper.HttpGetStringAsync(string)
  nameWithType.vb: HttpHelper.HttpGetStringAsync(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync*
  name: HttpGetStringAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpGetStringAsync
  nameWithType: HttpHelper.HttpGetStringAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPost(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPost(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPost(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPost(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPost(string, byte[], bool, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPost(String, Byte(), Boolean, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPost(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPost(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpPost(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpPost(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPost(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPost(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpPost(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpPost(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPost*
  name: HttpPost
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPost
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPost
  nameWithType: HttpHelper.HttpPost
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostAsync(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostAsync(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(string, byte[], bool, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(String, Byte(), Boolean, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostAsync(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostAsync(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostAsync(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostAsync(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostAsync(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostAsync(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name: HttpPostAsync(string, IDictionary<string, string>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: HttpPostAsync(String, IDictionary(Of String, String))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(string, System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync(String, System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: HttpHelper.HttpPostAsync(string, IDictionary<string, string>?)
  nameWithType.vb: HttpHelper.HttpPostAsync(String, IDictionary(Of String, String))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync*
  name: HttpPostAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostAsync
  nameWithType: HttpHelper.HttpPostAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFile(string, IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFile(String, IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Byte())), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFile(string, IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFile(String, IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFile(string, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFile(String, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(string, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(String, System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFile(string, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFile(String, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFile(string, string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFile(String, String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(string, string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(String, String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFile(string, string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFile(String, String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFile(string, string, string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFile(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile(String, String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFile(string, string, string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFile(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile*
  name: HttpPostFile
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostFile
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFile
  nameWithType: HttpHelper.HttpPostFile
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFileAsync(string, IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFileAsync(String, IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Byte())), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFileAsync(string, IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFileAsync(String, IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFileAsync(string, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFileAsync(String, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(string, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFileAsync(string, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFileAsync(String, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFileAsync(string, string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFileAsync(String, String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(string, string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(String, String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFileAsync(string, string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFileAsync(String, String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: HttpPostFileAsync(string, string, string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: HttpPostFileAsync(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync(String, String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpHelper.HttpPostFileAsync(string, string, string, IEnumerable<KeyValuePair<string, string>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpHelper.HttpPostFileAsync(String, String, String, IEnumerable(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync*
  name: HttpPostFileAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFileAsync
  nameWithType: HttpHelper.HttpPostFileAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFor*
  name: HttpPostFor
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostFor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFor
  nameWithType: HttpHelper.HttpPostFor
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostFor``1(System.String,System.Byte[],System.Boolean)
  name: HttpPostFor<T>(string, byte[], bool)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostFor``1(System.String,System.Byte[],System.Boolean)
  name.vb: HttpPostFor(Of T)(String, Byte(), Boolean)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostFor<T>(string, byte[], bool)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostFor(Of T)(String, Byte(), Boolean)
  nameWithType: HttpHelper.HttpPostFor<T>(string, byte[], bool)
  nameWithType.vb: HttpHelper.HttpPostFor(Of T)(String, Byte(), Boolean)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync*
  name: HttpPostForAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync
  nameWithType: HttpHelper.HttpPostForAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync``1(System.String,System.Byte[],System.Boolean)
  name: HttpPostForAsync<T>(string, byte[], bool)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync``1(System.String,System.Byte[],System.Boolean)
  name.vb: HttpPostForAsync(Of T)(String, Byte(), Boolean)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync<T>(string, byte[], bool)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostForAsync(Of T)(String, Byte(), Boolean)
  nameWithType: HttpHelper.HttpPostForAsync<T>(string, byte[], bool)
  nameWithType.vb: HttpHelper.HttpPostForAsync(Of T)(String, Byte(), Boolean)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostForBytes(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostForBytes(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(string, byte[], bool, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(String, Byte(), Boolean, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostForBytes(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostForBytes(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostForBytes(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostForBytes(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostForBytes(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostForBytes(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes*
  name: HttpPostForBytes
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytes
  nameWithType: HttpHelper.HttpPostForBytes
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostForBytesAsync(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(System.String,System.Byte[],System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostForBytesAsync(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(string, byte[], bool, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(String, Byte(), Boolean, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostForBytesAsync(string, byte[], bool, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostForBytesAsync(String, Byte(), Boolean, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name: HttpPostForBytesAsync(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.WebProxy)
  name.vb: HttpPostForBytesAsync(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?, System.Net.WebProxy?)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)), System.Net.WebProxy)
  nameWithType: HttpHelper.HttpPostForBytesAsync(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?, WebProxy?)
  nameWithType.vb: HttpHelper.HttpPostForBytesAsync(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)), WebProxy)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync*
  name: HttpPostForBytesAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostForBytesAsync
  nameWithType: HttpHelper.HttpPostForBytesAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson*
  name: HttpPostJson
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostJson
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson
  nameWithType: HttpHelper.HttpPostJson
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson``1(System.String,``0,System.Text.Encoding)
  name: HttpPostJson<T>(string, T, Encoding)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJson``1(System.String,``0,System.Text.Encoding)
  name.vb: HttpPostJson(Of T)(String, T, Encoding)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson<T>(string, T, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson(Of T)(String, T, System.Text.Encoding)
  nameWithType: HttpHelper.HttpPostJson<T>(string, T, Encoding)
  nameWithType.vb: HttpHelper.HttpPostJson(Of T)(String, T, Encoding)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson``1(System.String,``0)
  name: HttpPostJson<T>(string, T)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJson``1(System.String,``0)
  name.vb: HttpPostJson(Of T)(String, T)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson<T>(string, T)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJson(Of T)(String, T)
  nameWithType: HttpHelper.HttpPostJson<T>(string, T)
  nameWithType.vb: HttpHelper.HttpPostJson(Of T)(String, T)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync*
  name: HttpPostJsonAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync
  nameWithType: HttpHelper.HttpPostJsonAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync``1(System.String,``0,System.Text.Encoding)
  name: HttpPostJsonAsync<T>(string, T, Encoding)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync``1(System.String,``0,System.Text.Encoding)
  name.vb: HttpPostJsonAsync(Of T)(String, T, Encoding)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync<T>(string, T, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync(Of T)(String, T, System.Text.Encoding)
  nameWithType: HttpHelper.HttpPostJsonAsync<T>(string, T, Encoding)
  nameWithType.vb: HttpHelper.HttpPostJsonAsync(Of T)(String, T, Encoding)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync``1(System.String,``0)
  name: HttpPostJsonAsync<T>(string, T)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync``1(System.String,``0)
  name.vb: HttpPostJsonAsync(Of T)(String, T)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync<T>(string, T)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonAsync(Of T)(String, T)
  nameWithType: HttpHelper.HttpPostJsonAsync<T>(string, T)
  nameWithType.vb: HttpHelper.HttpPostJsonAsync(Of T)(String, T)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor*
  name: HttpPostJsonFor
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor
  nameWithType: HttpHelper.HttpPostJsonFor
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor``2(System.String,``0,System.Text.Encoding)
  name: HttpPostJsonFor<TRequest, TResponse>(string, TRequest, Encoding)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor``2(System.String,``0,System.Text.Encoding)
  name.vb: HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest, Encoding)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor<TRequest, TResponse>(string, TRequest, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest, System.Text.Encoding)
  nameWithType: HttpHelper.HttpPostJsonFor<TRequest, TResponse>(string, TRequest, Encoding)
  nameWithType.vb: HttpHelper.HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest, Encoding)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor``2(System.String,``0)
  name: HttpPostJsonFor<TRequest, TResponse>(string, TRequest)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor``2(System.String,``0)
  name.vb: HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor<TRequest, TResponse>(string, TRequest)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest)
  nameWithType: HttpHelper.HttpPostJsonFor<TRequest, TResponse>(string, TRequest)
  nameWithType.vb: HttpHelper.HttpPostJsonFor(Of TRequest, TResponse)(String, TRequest)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync*
  name: HttpPostJsonForAsync
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync
  nameWithType: HttpHelper.HttpPostJsonForAsync
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync``2(System.String,``0,System.Text.Encoding)
  name: HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest, Encoding)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync``2(System.String,``0,System.Text.Encoding)
  name.vb: HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest, Encoding)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest, System.Text.Encoding)
  nameWithType: HttpHelper.HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest, Encoding)
  nameWithType.vb: HttpHelper.HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest, Encoding)
- uid: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync``2(System.String,``0)
  name: HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync``2(System.String,``0)
  name.vb: HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest)
  fullName: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest)
  nameWithType: HttpHelper.HttpPostJsonForAsync<TRequest, TResponse>(string, TRequest)
  nameWithType.vb: HttpHelper.HttpPostJsonForAsync(Of TRequest, TResponse)(String, TRequest)
- uid: WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader(System.String)
  name: IsWellKnownContentHeader(string)
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader(System.String)
  name.vb: IsWellKnownContentHeader(String)
  fullName: WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader(string)
  fullName.vb: WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader(String)
  nameWithType: HttpHelper.IsWellKnownContentHeader(string)
  nameWithType.vb: HttpHelper.IsWellKnownContentHeader(String)
- uid: WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader*
  name: IsWellKnownContentHeader
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.HttpHelper.IsWellKnownContentHeader
  nameWithType: HttpHelper.IsWellKnownContentHeader
- uid: WeihanLi.Common.Helpers.HttpHelper.JsonContentType
  name: JsonContentType
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: F:WeihanLi.Common.Helpers.HttpHelper.JsonContentType
  fullName: WeihanLi.Common.Helpers.HttpHelper.JsonContentType
  nameWithType: HttpHelper.JsonContentType
- uid: WeihanLi.Common.Helpers.HttpHelper.WellKnownContentHeaders
  name: WellKnownContentHeaders
  href: api/WeihanLi.Common.Helpers.HttpHelper.yml
  commentId: F:WeihanLi.Common.Helpers.HttpHelper.WellKnownContentHeaders
  fullName: WeihanLi.Common.Helpers.HttpHelper.WellKnownContentHeaders
  nameWithType: HttpHelper.WellKnownContentHeaders
- uid: WeihanLi.Common.Helpers.IAsyncEnricher`1
  name: IAsyncEnricher<TContext>
  href: api/WeihanLi.Common.Helpers.IAsyncEnricher-1.yml
  commentId: T:WeihanLi.Common.Helpers.IAsyncEnricher`1
  name.vb: IAsyncEnricher(Of TContext)
  fullName: WeihanLi.Common.Helpers.IAsyncEnricher<TContext>
  fullName.vb: WeihanLi.Common.Helpers.IAsyncEnricher(Of TContext)
  nameWithType: IAsyncEnricher<TContext>
  nameWithType.vb: IAsyncEnricher(Of TContext)
- uid: WeihanLi.Common.Helpers.IAsyncEnricher`1.Enrich(`0)
  name: Enrich(TContext)
  href: api/WeihanLi.Common.Helpers.IAsyncEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.IAsyncEnricher`1.Enrich(`0)
  fullName: WeihanLi.Common.Helpers.IAsyncEnricher<TContext>.Enrich(TContext)
  fullName.vb: WeihanLi.Common.Helpers.IAsyncEnricher(Of TContext).Enrich(TContext)
  nameWithType: IAsyncEnricher<TContext>.Enrich(TContext)
  nameWithType.vb: IAsyncEnricher(Of TContext).Enrich(TContext)
- uid: WeihanLi.Common.Helpers.IAsyncEnricher`1.Enrich*
  name: Enrich
  href: api/WeihanLi.Common.Helpers.IAsyncEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IAsyncEnricher`1.Enrich
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IAsyncEnricher<TContext>.Enrich
  fullName.vb: WeihanLi.Common.Helpers.IAsyncEnricher(Of TContext).Enrich
  nameWithType: IAsyncEnricher<TContext>.Enrich
  nameWithType.vb: IAsyncEnricher(Of TContext).Enrich
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1
  name: IAsyncPipelineBuilder<TContext>
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: T:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1
  name.vb: IAsyncPipelineBuilder(Of TContext)
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext)
  nameWithType: IAsyncPipelineBuilder<TContext>
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext)
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Build
  name: Build()
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Build
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.Build()
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).Build()
  nameWithType: IAsyncPipelineBuilder<TContext>.Build()
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).Build()
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Build*
  name: Build
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Build
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.Build
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).Build
  nameWithType: IAsyncPipelineBuilder<TContext>.Build
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).Build
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.New
  name: New()
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.New
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.New()
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).New()
  nameWithType: IAsyncPipelineBuilder<TContext>.New()
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).New()
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.New*
  name: New
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.New
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.New
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).New
  nameWithType: IAsyncPipelineBuilder<TContext>.New
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).New
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Use(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task}})
  name: Use(Func<Func<TContext, Task>, Func<TContext, Task>>)
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Use(System.Func{System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Threading.Tasks.Task}})
  name.vb: Use(Func(Of Func(Of TContext, Task), Func(Of TContext, Task)))
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.Use(System.Func<System.Func<TContext, System.Threading.Tasks.Task>, System.Func<TContext, System.Threading.Tasks.Task>>)
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).Use(System.Func(Of System.Func(Of TContext, System.Threading.Tasks.Task), System.Func(Of TContext, System.Threading.Tasks.Task)))
  nameWithType: IAsyncPipelineBuilder<TContext>.Use(Func<Func<TContext, Task>, Func<TContext, Task>>)
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).Use(Func(Of Func(Of TContext, Task), Func(Of TContext, Task)))
- uid: WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Use*
  name: Use
  href: api/WeihanLi.Common.Helpers.IAsyncPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IAsyncPipelineBuilder`1.Use
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>.Use
  fullName.vb: WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext).Use
  nameWithType: IAsyncPipelineBuilder<TContext>.Use
  nameWithType.vb: IAsyncPipelineBuilder(Of TContext).Use
- uid: WeihanLi.Common.Helpers.IDataSerializer
  name: IDataSerializer
  href: api/WeihanLi.Common.Helpers.IDataSerializer.yml
  commentId: T:WeihanLi.Common.Helpers.IDataSerializer
  fullName: WeihanLi.Common.Helpers.IDataSerializer
  nameWithType: IDataSerializer
- uid: WeihanLi.Common.Helpers.IDataSerializer.Deserialize*
  name: Deserialize
  href: api/WeihanLi.Common.Helpers.IDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.IDataSerializer.Deserialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IDataSerializer.Deserialize
  nameWithType: IDataSerializer.Deserialize
- uid: WeihanLi.Common.Helpers.IDataSerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/WeihanLi.Common.Helpers.IDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.IDataSerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: WeihanLi.Common.Helpers.IDataSerializer.Deserialize<T>(byte[])
  fullName.vb: WeihanLi.Common.Helpers.IDataSerializer.Deserialize(Of T)(Byte())
  nameWithType: IDataSerializer.Deserialize<T>(byte[])
  nameWithType.vb: IDataSerializer.Deserialize(Of T)(Byte())
- uid: WeihanLi.Common.Helpers.IDataSerializer.Serialize*
  name: Serialize
  href: api/WeihanLi.Common.Helpers.IDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.IDataSerializer.Serialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IDataSerializer.Serialize
  nameWithType: IDataSerializer.Serialize
- uid: WeihanLi.Common.Helpers.IDataSerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/WeihanLi.Common.Helpers.IDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.IDataSerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: WeihanLi.Common.Helpers.IDataSerializer.Serialize<T>(T)
  fullName.vb: WeihanLi.Common.Helpers.IDataSerializer.Serialize(Of T)(T)
  nameWithType: IDataSerializer.Serialize<T>(T)
  nameWithType.vb: IDataSerializer.Serialize(Of T)(T)
- uid: WeihanLi.Common.Helpers.IEnricher`1
  name: IEnricher<TContext>
  href: api/WeihanLi.Common.Helpers.IEnricher-1.yml
  commentId: T:WeihanLi.Common.Helpers.IEnricher`1
  name.vb: IEnricher(Of TContext)
  fullName: WeihanLi.Common.Helpers.IEnricher<TContext>
  fullName.vb: WeihanLi.Common.Helpers.IEnricher(Of TContext)
  nameWithType: IEnricher<TContext>
  nameWithType.vb: IEnricher(Of TContext)
- uid: WeihanLi.Common.Helpers.IEnricher`1.Enrich(`0)
  name: Enrich(TContext)
  href: api/WeihanLi.Common.Helpers.IEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.IEnricher`1.Enrich(`0)
  fullName: WeihanLi.Common.Helpers.IEnricher<TContext>.Enrich(TContext)
  fullName.vb: WeihanLi.Common.Helpers.IEnricher(Of TContext).Enrich(TContext)
  nameWithType: IEnricher<TContext>.Enrich(TContext)
  nameWithType.vb: IEnricher(Of TContext).Enrich(TContext)
- uid: WeihanLi.Common.Helpers.IEnricher`1.Enrich*
  name: Enrich
  href: api/WeihanLi.Common.Helpers.IEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IEnricher`1.Enrich
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IEnricher<TContext>.Enrich
  fullName.vb: WeihanLi.Common.Helpers.IEnricher(Of TContext).Enrich
  nameWithType: IEnricher<TContext>.Enrich
  nameWithType.vb: IEnricher(Of TContext).Enrich
- uid: WeihanLi.Common.Helpers.InterlockedHelper
  name: InterlockedHelper
  href: api/WeihanLi.Common.Helpers.InterlockedHelper.yml
  commentId: T:WeihanLi.Common.Helpers.InterlockedHelper
  fullName: WeihanLi.Common.Helpers.InterlockedHelper
  nameWithType: InterlockedHelper
- uid: WeihanLi.Common.Helpers.InterlockedHelper.Read(System.Int32@)
  name: Read(ref int)
  href: api/WeihanLi.Common.Helpers.InterlockedHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InterlockedHelper.Read(System.Int32@)
  name.vb: Read(Integer)
  fullName: WeihanLi.Common.Helpers.InterlockedHelper.Read(ref int)
  fullName.vb: WeihanLi.Common.Helpers.InterlockedHelper.Read(Integer)
  nameWithType: InterlockedHelper.Read(ref int)
  nameWithType.vb: InterlockedHelper.Read(Integer)
- uid: WeihanLi.Common.Helpers.InterlockedHelper.Read*
  name: Read
  href: api/WeihanLi.Common.Helpers.InterlockedHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InterlockedHelper.Read
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InterlockedHelper.Read
  nameWithType: InterlockedHelper.Read
- uid: WeihanLi.Common.Helpers.InterlockedHelper.Read``1(``0@)
  name: Read<T>(ref T?)
  href: api/WeihanLi.Common.Helpers.InterlockedHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InterlockedHelper.Read``1(``0@)
  name.vb: Read(Of T)(T)
  fullName: WeihanLi.Common.Helpers.InterlockedHelper.Read<T>(ref T?)
  fullName.vb: WeihanLi.Common.Helpers.InterlockedHelper.Read(Of T)(T)
  nameWithType: InterlockedHelper.Read<T>(ref T?)
  nameWithType.vb: InterlockedHelper.Read(Of T)(T)
- uid: WeihanLi.Common.Helpers.InvokeHelper
  name: InvokeHelper
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: T:WeihanLi.Common.Helpers.InvokeHelper
  fullName: WeihanLi.Common.Helpers.InvokeHelper
  nameWithType: InvokeHelper
- uid: WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException
  name: OnInvokeException
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: P:WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException
  fullName: WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException
  nameWithType: InvokeHelper.OnInvokeException
- uid: WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException*
  name: OnInvokeException
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InvokeHelper.OnInvokeException
  nameWithType: InvokeHelper.OnInvokeException
- uid: WeihanLi.Common.Helpers.InvokeHelper.Profile(System.Action)
  name: Profile(Action)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.Profile(System.Action)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.Profile(System.Action)
  nameWithType: InvokeHelper.Profile(Action)
- uid: WeihanLi.Common.Helpers.InvokeHelper.Profile*
  name: Profile
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InvokeHelper.Profile
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InvokeHelper.Profile
  nameWithType: InvokeHelper.Profile
- uid: WeihanLi.Common.Helpers.InvokeHelper.Profile``1(System.Action{``0},``0)
  name: Profile<T>(Action<T>, T)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.Profile``1(System.Action{``0},``0)
  name.vb: Profile(Of T)(Action(Of T), T)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.Profile<T>(System.Action<T>, T)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.Profile(Of T)(System.Action(Of T), T)
  nameWithType: InvokeHelper.Profile<T>(Action<T>, T)
  nameWithType.vb: InvokeHelper.Profile(Of T)(Action(Of T), T)
- uid: WeihanLi.Common.Helpers.InvokeHelper.Profile``2(System.Action{``0,``1},``0,``1)
  name: Profile<T1, T2>(Action<T1, T2>, T1, T2)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.Profile``2(System.Action{``0,``1},``0,``1)
  name.vb: Profile(Of T1, T2)(Action(Of T1, T2), T1, T2)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.Profile<T1, T2>(System.Action<T1, T2>, T1, T2)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.Profile(Of T1, T2)(System.Action(Of T1, T2), T1, T2)
  nameWithType: InvokeHelper.Profile<T1, T2>(Action<T1, T2>, T1, T2)
  nameWithType.vb: InvokeHelper.Profile(Of T1, T2)(Action(Of T1, T2), T1, T2)
- uid: WeihanLi.Common.Helpers.InvokeHelper.Profile``3(System.Action{``0,``1,``2},``0,``1,``2)
  name: Profile<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.Profile``3(System.Action{``0,``1,``2},``0,``1,``2)
  name.vb: Profile(Of T1, T2, T3)(Action(Of T1, T2, T3), T1, T2, T3)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.Profile<T1, T2, T3>(System.Action<T1, T2, T3>, T1, T2, T3)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.Profile(Of T1, T2, T3)(System.Action(Of T1, T2, T3), T1, T2, T3)
  nameWithType: InvokeHelper.Profile<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3)
  nameWithType.vb: InvokeHelper.Profile(Of T1, T2, T3)(Action(Of T1, T2, T3), T1, T2, T3)
- uid: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(System.Func{System.Threading.Tasks.Task})
  name: ProfileAsync(Func<Task>)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(System.Func{System.Threading.Tasks.Task})
  name.vb: ProfileAsync(Func(Of Task))
  fullName: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(System.Func(Of System.Threading.Tasks.Task))
  nameWithType: InvokeHelper.ProfileAsync(Func<Task>)
  nameWithType.vb: InvokeHelper.ProfileAsync(Func(Of Task))
- uid: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync*
  name: ProfileAsync
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync
  nameWithType: InvokeHelper.ProfileAsync
- uid: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  name: ProfileAsync<T>(Func<T, Task>, T)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  name.vb: ProfileAsync(Of T)(Func(Of T, Task), T)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync<T>(System.Func<T, System.Threading.Tasks.Task>, T)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(Of T)(System.Func(Of T, System.Threading.Tasks.Task), T)
  nameWithType: InvokeHelper.ProfileAsync<T>(Func<T, Task>, T)
  nameWithType.vb: InvokeHelper.ProfileAsync(Of T)(Func(Of T, Task), T)
- uid: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)
  name: ProfileAsync<T1, T2>(Func<T1, T2, Task>, T1, T2)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)
  name.vb: ProfileAsync(Of T1, T2)(Func(Of T1, T2, Task), T1, T2)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync<T1, T2>(System.Func<T1, T2, System.Threading.Tasks.Task>, T1, T2)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(Of T1, T2)(System.Func(Of T1, T2, System.Threading.Tasks.Task), T1, T2)
  nameWithType: InvokeHelper.ProfileAsync<T1, T2>(Func<T1, T2, Task>, T1, T2)
  nameWithType.vb: InvokeHelper.ProfileAsync(Of T1, T2)(Func(Of T1, T2, Task), T1, T2)
- uid: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2)
  name: ProfileAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2)
  name.vb: ProfileAsync(Of T1, T2, T3)(Func(Of T1, T2, T3, Task), T1, T2, T3)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync<T1, T2, T3>(System.Func<T1, T2, T3, System.Threading.Tasks.Task>, T1, T2, T3)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.ProfileAsync(Of T1, T2, T3)(System.Func(Of T1, T2, T3, System.Threading.Tasks.Task), T1, T2, T3)
  nameWithType: InvokeHelper.ProfileAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3)
  nameWithType.vb: InvokeHelper.ProfileAsync(Of T1, T2, T3)(Func(Of T1, T2, T3, Task), T1, T2, T3)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(System.Action)
  name: TryInvoke(Action)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(System.Action)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(System.Action)
  nameWithType: InvokeHelper.TryInvoke(Action)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke*
  name: TryInvoke
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InvokeHelper.TryInvoke
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke
  nameWithType: InvokeHelper.TryInvoke
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``1(System.Action{``0},``0)
  name: TryInvoke<T>(Action<T>, T)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``1(System.Action{``0},``0)
  name.vb: TryInvoke(Of T)(Action(Of T), T)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke<T>(System.Action<T>, T)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(Of T)(System.Action(Of T), T)
  nameWithType: InvokeHelper.TryInvoke<T>(Action<T>, T)
  nameWithType.vb: InvokeHelper.TryInvoke(Of T)(Action(Of T), T)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``2(System.Action{``0,``1},``0,``1)
  name: TryInvoke<T1, T2>(Action<T1, T2>, T1, T2)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``2(System.Action{``0,``1},``0,``1)
  name.vb: TryInvoke(Of T1, T2)(Action(Of T1, T2), T1, T2)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke<T1, T2>(System.Action<T1, T2>, T1, T2)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(Of T1, T2)(System.Action(Of T1, T2), T1, T2)
  nameWithType: InvokeHelper.TryInvoke<T1, T2>(Action<T1, T2>, T1, T2)
  nameWithType.vb: InvokeHelper.TryInvoke(Of T1, T2)(Action(Of T1, T2), T1, T2)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``3(System.Action{``0,``1,``2},``0,``1,``2)
  name: TryInvoke<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvoke``3(System.Action{``0,``1,``2},``0,``1,``2)
  name.vb: TryInvoke(Of T1, T2, T3)(Action(Of T1, T2, T3), T1, T2, T3)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke<T1, T2, T3>(System.Action<T1, T2, T3>, T1, T2, T3)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvoke(Of T1, T2, T3)(System.Action(Of T1, T2, T3), T1, T2, T3)
  nameWithType: InvokeHelper.TryInvoke<T1, T2, T3>(Action<T1, T2, T3>, T1, T2, T3)
  nameWithType.vb: InvokeHelper.TryInvoke(Of T1, T2, T3)(Action(Of T1, T2, T3), T1, T2, T3)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task})
  name: TryInvokeAsync(Func<Task>)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task})
  name.vb: TryInvokeAsync(Func(Of Task))
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(System.Func(Of System.Threading.Tasks.Task))
  nameWithType: InvokeHelper.TryInvokeAsync(Func<Task>)
  nameWithType.vb: InvokeHelper.TryInvokeAsync(Func(Of Task))
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync*
  name: TryInvokeAsync
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync
  nameWithType: InvokeHelper.TryInvokeAsync
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  name: TryInvokeAsync<T>(Func<T, Task>, T)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
  name.vb: TryInvokeAsync(Of T)(Func(Of T, Task), T)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync<T>(System.Func<T, System.Threading.Tasks.Task>, T)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(Of T)(System.Func(Of T, System.Threading.Tasks.Task), T)
  nameWithType: InvokeHelper.TryInvokeAsync<T>(Func<T, Task>, T)
  nameWithType.vb: InvokeHelper.TryInvokeAsync(Of T)(Func(Of T, Task), T)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)
  name: TryInvokeAsync<T1, T2>(Func<T1, T2, Task>, T1, T2)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)
  name.vb: TryInvokeAsync(Of T1, T2)(Func(Of T1, T2, Task), T1, T2)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync<T1, T2>(System.Func<T1, T2, System.Threading.Tasks.Task>, T1, T2)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(Of T1, T2)(System.Func(Of T1, T2, System.Threading.Tasks.Task), T1, T2)
  nameWithType: InvokeHelper.TryInvokeAsync<T1, T2>(Func<T1, T2, Task>, T1, T2)
  nameWithType.vb: InvokeHelper.TryInvokeAsync(Of T1, T2)(Func(Of T1, T2, Task), T1, T2)
- uid: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2)
  name: TryInvokeAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3)
  href: api/WeihanLi.Common.Helpers.InvokeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task},``0,``1,``2)
  name.vb: TryInvokeAsync(Of T1, T2, T3)(Func(Of T1, T2, T3, Task), T1, T2, T3)
  fullName: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync<T1, T2, T3>(System.Func<T1, T2, T3, System.Threading.Tasks.Task>, T1, T2, T3)
  fullName.vb: WeihanLi.Common.Helpers.InvokeHelper.TryInvokeAsync(Of T1, T2, T3)(System.Func(Of T1, T2, T3, System.Threading.Tasks.Task), T1, T2, T3)
  nameWithType: InvokeHelper.TryInvokeAsync<T1, T2, T3>(Func<T1, T2, T3, Task>, T1, T2, T3)
  nameWithType.vb: InvokeHelper.TryInvokeAsync(Of T1, T2, T3)(Func(Of T1, T2, T3, Task), T1, T2, T3)
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1
  name: IPipelineBuilder<TContext>
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: T:WeihanLi.Common.Helpers.IPipelineBuilder`1
  name.vb: IPipelineBuilder(Of TContext)
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext)
  nameWithType: IPipelineBuilder<TContext>
  nameWithType.vb: IPipelineBuilder(Of TContext)
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.Build
  name: Build()
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IPipelineBuilder`1.Build
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.Build()
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).Build()
  nameWithType: IPipelineBuilder<TContext>.Build()
  nameWithType.vb: IPipelineBuilder(Of TContext).Build()
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.Build*
  name: Build
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPipelineBuilder`1.Build
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.Build
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).Build
  nameWithType: IPipelineBuilder<TContext>.Build
  nameWithType.vb: IPipelineBuilder(Of TContext).Build
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.New
  name: New()
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IPipelineBuilder`1.New
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.New()
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).New()
  nameWithType: IPipelineBuilder<TContext>.New()
  nameWithType.vb: IPipelineBuilder(Of TContext).New()
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.New*
  name: New
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPipelineBuilder`1.New
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.New
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).New
  nameWithType: IPipelineBuilder<TContext>.New
  nameWithType.vb: IPipelineBuilder(Of TContext).New
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.Use(System.Func{System.Action{`0},System.Action{`0}})
  name: Use(Func<Action<TContext>, Action<TContext>>)
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: M:WeihanLi.Common.Helpers.IPipelineBuilder`1.Use(System.Func{System.Action{`0},System.Action{`0}})
  name.vb: Use(Func(Of Action(Of TContext), Action(Of TContext)))
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.Use(System.Func<System.Action<TContext>, System.Action<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).Use(System.Func(Of System.Action(Of TContext), System.Action(Of TContext)))
  nameWithType: IPipelineBuilder<TContext>.Use(Func<Action<TContext>, Action<TContext>>)
  nameWithType.vb: IPipelineBuilder(Of TContext).Use(Func(Of Action(Of TContext), Action(Of TContext)))
- uid: WeihanLi.Common.Helpers.IPipelineBuilder`1.Use*
  name: Use
  href: api/WeihanLi.Common.Helpers.IPipelineBuilder-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPipelineBuilder`1.Use
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPipelineBuilder<TContext>.Use
  fullName.vb: WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext).Use
  nameWithType: IPipelineBuilder<TContext>.Use
  nameWithType.vb: IPipelineBuilder(Of TContext).Use
- uid: WeihanLi.Common.Helpers.IPNetwork
  name: IPNetwork
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: T:WeihanLi.Common.Helpers.IPNetwork
  fullName: WeihanLi.Common.Helpers.IPNetwork
  nameWithType: IPNetwork
- uid: WeihanLi.Common.Helpers.IPNetwork.#ctor(System.Net.IPAddress,System.Int32)
  name: IPNetwork(IPAddress, int)
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: M:WeihanLi.Common.Helpers.IPNetwork.#ctor(System.Net.IPAddress,System.Int32)
  name.vb: New(IPAddress, Integer)
  fullName: WeihanLi.Common.Helpers.IPNetwork.IPNetwork(System.Net.IPAddress, int)
  fullName.vb: WeihanLi.Common.Helpers.IPNetwork.New(System.Net.IPAddress, Integer)
  nameWithType: IPNetwork.IPNetwork(IPAddress, int)
  nameWithType.vb: IPNetwork.New(IPAddress, Integer)
- uid: WeihanLi.Common.Helpers.IPNetwork.#ctor(System.String,System.Int32)
  name: IPNetwork(string, int)
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: M:WeihanLi.Common.Helpers.IPNetwork.#ctor(System.String,System.Int32)
  name.vb: New(String, Integer)
  fullName: WeihanLi.Common.Helpers.IPNetwork.IPNetwork(string, int)
  fullName.vb: WeihanLi.Common.Helpers.IPNetwork.New(String, Integer)
  nameWithType: IPNetwork.IPNetwork(string, int)
  nameWithType.vb: IPNetwork.New(String, Integer)
- uid: WeihanLi.Common.Helpers.IPNetwork.#ctor(System.String)
  name: IPNetwork(string)
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: M:WeihanLi.Common.Helpers.IPNetwork.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Helpers.IPNetwork.IPNetwork(string)
  fullName.vb: WeihanLi.Common.Helpers.IPNetwork.New(String)
  nameWithType: IPNetwork.IPNetwork(string)
  nameWithType.vb: IPNetwork.New(String)
- uid: WeihanLi.Common.Helpers.IPNetwork.#ctor*
  name: IPNetwork
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPNetwork.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.IPNetwork.IPNetwork
  fullName.vb: WeihanLi.Common.Helpers.IPNetwork.New
  nameWithType: IPNetwork.IPNetwork
  nameWithType.vb: IPNetwork.New
- uid: WeihanLi.Common.Helpers.IPNetwork.Contains(System.Net.IPAddress)
  name: Contains(IPAddress)
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: M:WeihanLi.Common.Helpers.IPNetwork.Contains(System.Net.IPAddress)
  fullName: WeihanLi.Common.Helpers.IPNetwork.Contains(System.Net.IPAddress)
  nameWithType: IPNetwork.Contains(IPAddress)
- uid: WeihanLi.Common.Helpers.IPNetwork.Contains*
  name: Contains
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPNetwork.Contains
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPNetwork.Contains
  nameWithType: IPNetwork.Contains
- uid: WeihanLi.Common.Helpers.IPNetwork.Prefix
  name: Prefix
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: P:WeihanLi.Common.Helpers.IPNetwork.Prefix
  fullName: WeihanLi.Common.Helpers.IPNetwork.Prefix
  nameWithType: IPNetwork.Prefix
- uid: WeihanLi.Common.Helpers.IPNetwork.Prefix*
  name: Prefix
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPNetwork.Prefix
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPNetwork.Prefix
  nameWithType: IPNetwork.Prefix
- uid: WeihanLi.Common.Helpers.IPNetwork.PrefixLength
  name: PrefixLength
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: P:WeihanLi.Common.Helpers.IPNetwork.PrefixLength
  fullName: WeihanLi.Common.Helpers.IPNetwork.PrefixLength
  nameWithType: IPNetwork.PrefixLength
- uid: WeihanLi.Common.Helpers.IPNetwork.PrefixLength*
  name: PrefixLength
  href: api/WeihanLi.Common.Helpers.IPNetwork.yml
  commentId: Overload:WeihanLi.Common.Helpers.IPNetwork.PrefixLength
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.IPNetwork.PrefixLength
  nameWithType: IPNetwork.PrefixLength
- uid: WeihanLi.Common.Helpers.JsonDataSerializer
  name: JsonDataSerializer
  href: api/WeihanLi.Common.Helpers.JsonDataSerializer.yml
  commentId: T:WeihanLi.Common.Helpers.JsonDataSerializer
  fullName: WeihanLi.Common.Helpers.JsonDataSerializer
  nameWithType: JsonDataSerializer
- uid: WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize*
  name: Deserialize
  href: api/WeihanLi.Common.Helpers.JsonDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize
  nameWithType: JsonDataSerializer.Deserialize
- uid: WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/WeihanLi.Common.Helpers.JsonDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize<T>(byte[])
  fullName.vb: WeihanLi.Common.Helpers.JsonDataSerializer.Deserialize(Of T)(Byte())
  nameWithType: JsonDataSerializer.Deserialize<T>(byte[])
  nameWithType.vb: JsonDataSerializer.Deserialize(Of T)(Byte())
- uid: WeihanLi.Common.Helpers.JsonDataSerializer.Serialize*
  name: Serialize
  href: api/WeihanLi.Common.Helpers.JsonDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.JsonDataSerializer.Serialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.JsonDataSerializer.Serialize
  nameWithType: JsonDataSerializer.Serialize
- uid: WeihanLi.Common.Helpers.JsonDataSerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/WeihanLi.Common.Helpers.JsonDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.JsonDataSerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: WeihanLi.Common.Helpers.JsonDataSerializer.Serialize<T>(T)
  fullName.vb: WeihanLi.Common.Helpers.JsonDataSerializer.Serialize(Of T)(T)
  nameWithType: JsonDataSerializer.Serialize<T>(T)
  nameWithType.vb: JsonDataSerializer.Serialize(Of T)(T)
- uid: WeihanLi.Common.Helpers.LibraryInfo
  name: LibraryInfo
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: T:WeihanLi.Common.Helpers.LibraryInfo
  fullName: WeihanLi.Common.Helpers.LibraryInfo
  nameWithType: LibraryInfo
- uid: WeihanLi.Common.Helpers.LibraryInfo.LibraryHash
  name: LibraryHash
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: P:WeihanLi.Common.Helpers.LibraryInfo.LibraryHash
  fullName: WeihanLi.Common.Helpers.LibraryInfo.LibraryHash
  nameWithType: LibraryInfo.LibraryHash
- uid: WeihanLi.Common.Helpers.LibraryInfo.LibraryHash*
  name: LibraryHash
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.LibraryInfo.LibraryHash
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.LibraryInfo.LibraryHash
  nameWithType: LibraryInfo.LibraryHash
- uid: WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion
  name: LibraryVersion
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: P:WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion
  fullName: WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion
  nameWithType: LibraryInfo.LibraryVersion
- uid: WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion*
  name: LibraryVersion
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.LibraryInfo.LibraryVersion
  nameWithType: LibraryInfo.LibraryVersion
- uid: WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl
  name: RepositoryUrl
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: P:WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl
  fullName: WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl
  nameWithType: LibraryInfo.RepositoryUrl
- uid: WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl*
  name: RepositoryUrl
  href: api/WeihanLi.Common.Helpers.LibraryInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.LibraryInfo.RepositoryUrl
  nameWithType: LibraryInfo.RepositoryUrl
- uid: WeihanLi.Common.Helpers.LogHelper
  name: LogHelper
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: T:WeihanLi.Common.Helpers.LogHelper
  fullName: WeihanLi.Common.Helpers.LogHelper
  nameWithType: LogHelper
- uid: WeihanLi.Common.Helpers.LogHelper.ConfigureLogging(System.Action{WeihanLi.Common.Logging.ILogHelperLoggingBuilder})
  name: ConfigureLogging(Action<ILogHelperLoggingBuilder>)
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: M:WeihanLi.Common.Helpers.LogHelper.ConfigureLogging(System.Action{WeihanLi.Common.Logging.ILogHelperLoggingBuilder})
  name.vb: ConfigureLogging(Action(Of ILogHelperLoggingBuilder))
  fullName: WeihanLi.Common.Helpers.LogHelper.ConfigureLogging(System.Action<WeihanLi.Common.Logging.ILogHelperLoggingBuilder>)
  fullName.vb: WeihanLi.Common.Helpers.LogHelper.ConfigureLogging(System.Action(Of WeihanLi.Common.Logging.ILogHelperLoggingBuilder))
  nameWithType: LogHelper.ConfigureLogging(Action<ILogHelperLoggingBuilder>)
  nameWithType.vb: LogHelper.ConfigureLogging(Action(Of ILogHelperLoggingBuilder))
- uid: WeihanLi.Common.Helpers.LogHelper.ConfigureLogging*
  name: ConfigureLogging
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.LogHelper.ConfigureLogging
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.LogHelper.ConfigureLogging
  nameWithType: LogHelper.ConfigureLogging
- uid: WeihanLi.Common.Helpers.LogHelper.GetLogger(System.String)
  name: GetLogger(string)
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: M:WeihanLi.Common.Helpers.LogHelper.GetLogger(System.String)
  name.vb: GetLogger(String)
  fullName: WeihanLi.Common.Helpers.LogHelper.GetLogger(string)
  fullName.vb: WeihanLi.Common.Helpers.LogHelper.GetLogger(String)
  nameWithType: LogHelper.GetLogger(string)
  nameWithType.vb: LogHelper.GetLogger(String)
- uid: WeihanLi.Common.Helpers.LogHelper.GetLogger(System.Type)
  name: GetLogger(Type)
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: M:WeihanLi.Common.Helpers.LogHelper.GetLogger(System.Type)
  fullName: WeihanLi.Common.Helpers.LogHelper.GetLogger(System.Type)
  nameWithType: LogHelper.GetLogger(Type)
- uid: WeihanLi.Common.Helpers.LogHelper.GetLogger*
  name: GetLogger
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.LogHelper.GetLogger
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.LogHelper.GetLogger
  nameWithType: LogHelper.GetLogger
- uid: WeihanLi.Common.Helpers.LogHelper.GetLogger``1
  name: GetLogger<T>()
  href: api/WeihanLi.Common.Helpers.LogHelper.yml
  commentId: M:WeihanLi.Common.Helpers.LogHelper.GetLogger``1
  name.vb: GetLogger(Of T)()
  fullName: WeihanLi.Common.Helpers.LogHelper.GetLogger<T>()
  fullName.vb: WeihanLi.Common.Helpers.LogHelper.GetLogger(Of T)()
  nameWithType: LogHelper.GetLogger<T>()
  nameWithType.vb: LogHelper.GetLogger(Of T)()
- uid: WeihanLi.Common.Helpers.MapHelper
  name: MapHelper
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: T:WeihanLi.Common.Helpers.MapHelper
  fullName: WeihanLi.Common.Helpers.MapHelper
  nameWithType: MapHelper
- uid: WeihanLi.Common.Helpers.MapHelper.Map*
  name: Map
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.MapHelper.Map
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.MapHelper.Map
  nameWithType: MapHelper.Map
- uid: WeihanLi.Common.Helpers.MapHelper.Map``2(``0)
  name: Map<TSource, TTarget>(TSource)
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: M:WeihanLi.Common.Helpers.MapHelper.Map``2(``0)
  name.vb: Map(Of TSource, TTarget)(TSource)
  fullName: WeihanLi.Common.Helpers.MapHelper.Map<TSource, TTarget>(TSource)
  fullName.vb: WeihanLi.Common.Helpers.MapHelper.Map(Of TSource, TTarget)(TSource)
  nameWithType: MapHelper.Map<TSource, TTarget>(TSource)
  nameWithType.vb: MapHelper.Map(Of TSource, TTarget)(TSource)
- uid: WeihanLi.Common.Helpers.MapHelper.MapWith*
  name: MapWith
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.MapHelper.MapWith
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.MapHelper.MapWith
  nameWithType: MapHelper.MapWith
- uid: WeihanLi.Common.Helpers.MapHelper.MapWith``2(``0,System.String[])
  name: MapWith<TSource, TTarget>(TSource, params string[])
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: M:WeihanLi.Common.Helpers.MapHelper.MapWith``2(``0,System.String[])
  name.vb: MapWith(Of TSource, TTarget)(TSource, ParamArray String())
  fullName: WeihanLi.Common.Helpers.MapHelper.MapWith<TSource, TTarget>(TSource, params string[])
  fullName.vb: WeihanLi.Common.Helpers.MapHelper.MapWith(Of TSource, TTarget)(TSource, ParamArray String())
  nameWithType: MapHelper.MapWith<TSource, TTarget>(TSource, params string[])
  nameWithType.vb: MapHelper.MapWith(Of TSource, TTarget)(TSource, ParamArray String())
- uid: WeihanLi.Common.Helpers.MapHelper.MapWithout*
  name: MapWithout
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.MapHelper.MapWithout
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.MapHelper.MapWithout
  nameWithType: MapHelper.MapWithout
- uid: WeihanLi.Common.Helpers.MapHelper.MapWithout``2(``0,System.String[])
  name: MapWithout<TSource, TTarget>(TSource, params string[])
  href: api/WeihanLi.Common.Helpers.MapHelper.yml
  commentId: M:WeihanLi.Common.Helpers.MapHelper.MapWithout``2(``0,System.String[])
  name.vb: MapWithout(Of TSource, TTarget)(TSource, ParamArray String())
  fullName: WeihanLi.Common.Helpers.MapHelper.MapWithout<TSource, TTarget>(TSource, params string[])
  fullName.vb: WeihanLi.Common.Helpers.MapHelper.MapWithout(Of TSource, TTarget)(TSource, ParamArray String())
  nameWithType: MapHelper.MapWithout<TSource, TTarget>(TSource, params string[])
  nameWithType.vb: MapHelper.MapWithout(Of TSource, TTarget)(TSource, ParamArray String())
- uid: WeihanLi.Common.Helpers.NetHelper
  name: NetHelper
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: T:WeihanLi.Common.Helpers.NetHelper
  fullName: WeihanLi.Common.Helpers.NetHelper
  nameWithType: NetHelper
- uid: WeihanLi.Common.Helpers.NetHelper.GetRandomPort(System.Int32,System.Int32)
  name: GetRandomPort(int, int)
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: M:WeihanLi.Common.Helpers.NetHelper.GetRandomPort(System.Int32,System.Int32)
  name.vb: GetRandomPort(Integer, Integer)
  fullName: WeihanLi.Common.Helpers.NetHelper.GetRandomPort(int, int)
  fullName.vb: WeihanLi.Common.Helpers.NetHelper.GetRandomPort(Integer, Integer)
  nameWithType: NetHelper.GetRandomPort(int, int)
  nameWithType.vb: NetHelper.GetRandomPort(Integer, Integer)
- uid: WeihanLi.Common.Helpers.NetHelper.GetRandomPort*
  name: GetRandomPort
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.NetHelper.GetRandomPort
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.NetHelper.GetRandomPort
  nameWithType: NetHelper.GetRandomPort
- uid: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(System.Net.IPAddress)
  name: IsPrivateIP(IPAddress)
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: M:WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(System.Net.IPAddress)
  fullName: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(System.Net.IPAddress)
  nameWithType: NetHelper.IsPrivateIP(IPAddress)
- uid: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(System.String)
  name: IsPrivateIP(string)
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: M:WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(System.String)
  name.vb: IsPrivateIP(String)
  fullName: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(string)
  fullName.vb: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP(String)
  nameWithType: NetHelper.IsPrivateIP(string)
  nameWithType.vb: NetHelper.IsPrivateIP(String)
- uid: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP*
  name: IsPrivateIP
  href: api/WeihanLi.Common.Helpers.NetHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.NetHelper.IsPrivateIP
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.NetHelper.IsPrivateIP
  nameWithType: NetHelper.IsPrivateIP
- uid: WeihanLi.Common.Helpers.NewFuncHelper`1
  name: NewFuncHelper<T>
  href: api/WeihanLi.Common.Helpers.NewFuncHelper-1.yml
  commentId: T:WeihanLi.Common.Helpers.NewFuncHelper`1
  name.vb: NewFuncHelper(Of T)
  fullName: WeihanLi.Common.Helpers.NewFuncHelper<T>
  fullName.vb: WeihanLi.Common.Helpers.NewFuncHelper(Of T)
  nameWithType: NewFuncHelper<T>
  nameWithType.vb: NewFuncHelper(Of T)
- uid: WeihanLi.Common.Helpers.NewFuncHelper`1.Instance
  name: Instance
  href: api/WeihanLi.Common.Helpers.NewFuncHelper-1.yml
  commentId: F:WeihanLi.Common.Helpers.NewFuncHelper`1.Instance
  fullName: WeihanLi.Common.Helpers.NewFuncHelper<T>.Instance
  fullName.vb: WeihanLi.Common.Helpers.NewFuncHelper(Of T).Instance
  nameWithType: NewFuncHelper<T>.Instance
  nameWithType.vb: NewFuncHelper(Of T).Instance
- uid: WeihanLi.Common.Helpers.ObjectFactory
  name: ObjectFactory
  href: api/WeihanLi.Common.Helpers.ObjectFactory.yml
  commentId: T:WeihanLi.Common.Helpers.ObjectFactory
  fullName: WeihanLi.Common.Helpers.ObjectFactory
  nameWithType: ObjectFactory
- uid: WeihanLi.Common.Helpers.PeriodBatching
  name: WeihanLi.Common.Helpers.PeriodBatching
  href: api/WeihanLi.Common.Helpers.PeriodBatching.yml
  commentId: N:WeihanLi.Common.Helpers.PeriodBatching
  fullName: WeihanLi.Common.Helpers.PeriodBatching
  nameWithType: WeihanLi.Common.Helpers.PeriodBatching
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1
  name: PeriodicBatching<TEvent>
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: T:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1
  name.vb: PeriodicBatching(Of TEvent)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent)
  nameWithType: PeriodicBatching<TEvent>
  nameWithType.vb: PeriodicBatching(Of TEvent)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor(System.Int32,System.TimeSpan,System.Int32)
  name: PeriodicBatching(int, TimeSpan, int)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor(System.Int32,System.TimeSpan,System.Int32)
  name.vb: New(Integer, TimeSpan, Integer)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.PeriodicBatching(int, System.TimeSpan, int)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).New(Integer, System.TimeSpan, Integer)
  nameWithType: PeriodicBatching<TEvent>.PeriodicBatching(int, TimeSpan, int)
  nameWithType.vb: PeriodicBatching(Of TEvent).New(Integer, TimeSpan, Integer)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor(System.Int32,System.TimeSpan)
  name: PeriodicBatching(int, TimeSpan)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor(System.Int32,System.TimeSpan)
  name.vb: New(Integer, TimeSpan)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.PeriodicBatching(int, System.TimeSpan)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).New(Integer, System.TimeSpan)
  nameWithType: PeriodicBatching<TEvent>.PeriodicBatching(int, TimeSpan)
  nameWithType.vb: PeriodicBatching(Of TEvent).New(Integer, TimeSpan)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor*
  name: PeriodicBatching
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.PeriodicBatching
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).New
  nameWithType: PeriodicBatching<TEvent>.PeriodicBatching
  nameWithType.vb: PeriodicBatching(Of TEvent).New
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.CanInclude(`0)
  name: CanInclude(TEvent?)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.CanInclude(`0)
  name.vb: CanInclude(TEvent)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.CanInclude(TEvent?)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).CanInclude(TEvent)
  nameWithType: PeriodicBatching<TEvent>.CanInclude(TEvent?)
  nameWithType.vb: PeriodicBatching(Of TEvent).CanInclude(TEvent)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.CanInclude*
  name: CanInclude
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.CanInclude
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.CanInclude
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).CanInclude
  nameWithType: PeriodicBatching<TEvent>.CanInclude
  nameWithType.vb: PeriodicBatching(Of TEvent).CanInclude
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.Dispose()
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).Dispose()
  nameWithType: PeriodicBatching<TEvent>.Dispose()
  nameWithType.vb: PeriodicBatching(Of TEvent).Dispose()
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose(System.Boolean)
  name: Dispose(bool)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose(System.Boolean)
  name.vb: Dispose(Boolean)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.Dispose(bool)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).Dispose(Boolean)
  nameWithType: PeriodicBatching<TEvent>.Dispose(bool)
  nameWithType.vb: PeriodicBatching(Of TEvent).Dispose(Boolean)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.Dispose
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).Dispose
  nameWithType: PeriodicBatching<TEvent>.Dispose
  nameWithType.vb: PeriodicBatching(Of TEvent).Dispose
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Emit(`0)
  name: Emit(TEvent)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Emit(`0)
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.Emit(TEvent)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).Emit(TEvent)
  nameWithType: PeriodicBatching<TEvent>.Emit(TEvent)
  nameWithType.vb: PeriodicBatching(Of TEvent).Emit(TEvent)
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Emit*
  name: Emit
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.Emit
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.Emit
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).Emit
  nameWithType: PeriodicBatching<TEvent>.Emit
  nameWithType.vb: PeriodicBatching(Of TEvent).Emit
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatch(System.Collections.Generic.IEnumerable{`0})
  name: EmitBatch(IEnumerable<TEvent>)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatch(System.Collections.Generic.IEnumerable{`0})
  name.vb: EmitBatch(IEnumerable(Of TEvent))
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.EmitBatch(System.Collections.Generic.IEnumerable<TEvent>)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).EmitBatch(System.Collections.Generic.IEnumerable(Of TEvent))
  nameWithType: PeriodicBatching<TEvent>.EmitBatch(IEnumerable<TEvent>)
  nameWithType.vb: PeriodicBatching(Of TEvent).EmitBatch(IEnumerable(Of TEvent))
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatch*
  name: EmitBatch
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatch
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.EmitBatch
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).EmitBatch
  nameWithType: PeriodicBatching<TEvent>.EmitBatch
  nameWithType.vb: PeriodicBatching(Of TEvent).EmitBatch
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatchAsync(System.Collections.Generic.IEnumerable{`0})
  name: EmitBatchAsync(IEnumerable<TEvent>)
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatchAsync(System.Collections.Generic.IEnumerable{`0})
  name.vb: EmitBatchAsync(IEnumerable(Of TEvent))
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.EmitBatchAsync(System.Collections.Generic.IEnumerable<TEvent>)
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).EmitBatchAsync(System.Collections.Generic.IEnumerable(Of TEvent))
  nameWithType: PeriodicBatching<TEvent>.EmitBatchAsync(IEnumerable<TEvent>)
  nameWithType.vb: PeriodicBatching(Of TEvent).EmitBatchAsync(IEnumerable(Of TEvent))
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatchAsync*
  name: EmitBatchAsync
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.EmitBatchAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.EmitBatchAsync
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).EmitBatchAsync
  nameWithType: PeriodicBatching<TEvent>.EmitBatchAsync
  nameWithType.vb: PeriodicBatching(Of TEvent).EmitBatchAsync
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatch
  name: OnEmptyBatch()
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatch
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.OnEmptyBatch()
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).OnEmptyBatch()
  nameWithType: PeriodicBatching<TEvent>.OnEmptyBatch()
  nameWithType.vb: PeriodicBatching(Of TEvent).OnEmptyBatch()
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatch*
  name: OnEmptyBatch
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatch
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.OnEmptyBatch
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).OnEmptyBatch
  nameWithType: PeriodicBatching<TEvent>.OnEmptyBatch
  nameWithType.vb: PeriodicBatching(Of TEvent).OnEmptyBatch
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatchAsync
  name: OnEmptyBatchAsync()
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: M:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatchAsync
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.OnEmptyBatchAsync()
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).OnEmptyBatchAsync()
  nameWithType: PeriodicBatching<TEvent>.OnEmptyBatchAsync()
  nameWithType.vb: PeriodicBatching(Of TEvent).OnEmptyBatchAsync()
- uid: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatchAsync*
  name: OnEmptyBatchAsync
  href: api/WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching`1.OnEmptyBatchAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching<TEvent>.OnEmptyBatchAsync
  fullName.vb: WeihanLi.Common.Helpers.PeriodBatching.PeriodicBatching(Of TEvent).OnEmptyBatchAsync
  nameWithType: PeriodicBatching<TEvent>.OnEmptyBatchAsync
  nameWithType.vb: PeriodicBatching(Of TEvent).OnEmptyBatchAsync
- uid: WeihanLi.Common.Helpers.PipelineBuilder
  name: PipelineBuilder
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: T:WeihanLi.Common.Helpers.PipelineBuilder
  fullName: WeihanLi.Common.Helpers.PipelineBuilder
  nameWithType: PipelineBuilder
- uid: WeihanLi.Common.Helpers.PipelineBuilder.Create*
  name: Create
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilder.Create
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.Create
  nameWithType: PipelineBuilder.Create
- uid: WeihanLi.Common.Helpers.PipelineBuilder.Create``1
  name: Create<TContext>()
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilder.Create``1
  name.vb: Create(Of TContext)()
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.Create<TContext>()
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilder.Create(Of TContext)()
  nameWithType: PipelineBuilder.Create<TContext>()
  nameWithType.vb: PipelineBuilder.Create(Of TContext)()
- uid: WeihanLi.Common.Helpers.PipelineBuilder.Create``1(System.Action{``0})
  name: Create<TContext>(Action<TContext>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilder.Create``1(System.Action{``0})
  name.vb: Create(Of TContext)(Action(Of TContext))
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.Create<TContext>(System.Action<TContext>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilder.Create(Of TContext)(System.Action(Of TContext))
  nameWithType: PipelineBuilder.Create<TContext>(Action<TContext>)
  nameWithType.vb: PipelineBuilder.Create(Of TContext)(Action(Of TContext))
- uid: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync*
  name: CreateAsync
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync
  nameWithType: PipelineBuilder.CreateAsync
- uid: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync``1
  name: CreateAsync<TContext>()
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync``1
  name.vb: CreateAsync(Of TContext)()
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync<TContext>()
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync(Of TContext)()
  nameWithType: PipelineBuilder.CreateAsync<TContext>()
  nameWithType.vb: PipelineBuilder.CreateAsync(Of TContext)()
- uid: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name: CreateAsync<TContext>(Func<TContext, Task>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilder.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name.vb: CreateAsync(Of TContext)(Func(Of TContext, Task))
  fullName: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync<TContext>(System.Func<TContext, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilder.CreateAsync(Of TContext)(System.Func(Of TContext, System.Threading.Tasks.Task))
  nameWithType: PipelineBuilder.CreateAsync<TContext>(Func<TContext, Task>)
  nameWithType.vb: PipelineBuilder.CreateAsync(Of TContext)(Func(Of TContext, Task))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions
  name: PipelineBuilderExtensions
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: T:WeihanLi.Common.Helpers.PipelineBuilderExtensions
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions
  nameWithType: PipelineBuilderExtensions
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run*
  name: Run
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run
  nameWithType: PipelineBuilderExtensions.Run
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Threading.Tasks.Task})
  name: Run<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Task>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Threading.Tasks.Task})
  name.vb: Run(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Task))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run<TContext>(WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>, System.Func<TContext, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run(Of TContext)(WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext), System.Func(Of TContext, System.Threading.Tasks.Task))
  nameWithType: PipelineBuilderExtensions.Run<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Task>)
  nameWithType.vb: PipelineBuilderExtensions.Run(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Task))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0})
  name: Run<TContext>(IPipelineBuilder<TContext>, Action<TContext>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0})
  name.vb: Run(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run<TContext>(WeihanLi.Common.Helpers.IPipelineBuilder<TContext>, System.Action<TContext>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Run(Of TContext)(WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext), System.Action(Of TContext))
  nameWithType: PipelineBuilderExtensions.Run<TContext>(IPipelineBuilder<TContext>, Action<TContext>)
  nameWithType.vb: PipelineBuilderExtensions.Run(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use*
  name: Use
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use
  nameWithType: PipelineBuilderExtensions.Use
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Func{``0,System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: Use<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Func<TContext, Task>, Task>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Func{``0,System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: Use(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Func(Of TContext, Task), Task))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use<TContext>(WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>, System.Func<TContext, System.Func<TContext, System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use(Of TContext)(WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext), System.Func(Of TContext, System.Func(Of TContext, System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: PipelineBuilderExtensions.Use<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Func<TContext, Task>, Task>)
  nameWithType.vb: PipelineBuilderExtensions.Use(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Func(Of TContext, Task), Task))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: Use<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Func<Task>, Task>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: Use(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Func(Of Task), Task))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use<TContext>(WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>, System.Func<TContext, System.Func<System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use(Of TContext)(WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext), System.Func(Of TContext, System.Func(Of System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: PipelineBuilderExtensions.Use<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, Func<Task>, Task>)
  nameWithType.vb: PipelineBuilderExtensions.Use(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Func(Of Task), Task))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0,System.Action{``0}})
  name: Use<TContext>(IPipelineBuilder<TContext>, Action<TContext, Action<TContext>>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0,System.Action{``0}})
  name.vb: Use(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext, Action(Of TContext)))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use<TContext>(WeihanLi.Common.Helpers.IPipelineBuilder<TContext>, System.Action<TContext, System.Action<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use(Of TContext)(WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext), System.Action(Of TContext, System.Action(Of TContext)))
  nameWithType: PipelineBuilderExtensions.Use<TContext>(IPipelineBuilder<TContext>, Action<TContext, Action<TContext>>)
  nameWithType.vb: PipelineBuilderExtensions.Use(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext, Action(Of TContext)))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0,System.Action})
  name: Use<TContext>(IPipelineBuilder<TContext>, Action<TContext, Action>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Action{``0,System.Action})
  name.vb: Use(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext, Action))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use<TContext>(WeihanLi.Common.Helpers.IPipelineBuilder<TContext>, System.Action<TContext, System.Action>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.Use(Of TContext)(WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext), System.Action(Of TContext, System.Action))
  nameWithType: PipelineBuilderExtensions.Use<TContext>(IPipelineBuilder<TContext>, Action<TContext, Action>)
  nameWithType.vb: PipelineBuilderExtensions.Use(Of TContext)(IPipelineBuilder(Of TContext), Action(Of TContext, Action))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen*
  name: UseWhen
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen
  nameWithType: PipelineBuilderExtensions.UseWhen
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0}})
  name: UseWhen<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, bool>, Action<IAsyncPipelineBuilder<TContext>>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0}})
  name.vb: UseWhen(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IAsyncPipelineBuilder(Of TContext)))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen<TContext>(WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>, System.Func<TContext, bool>, System.Action<WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen(Of TContext)(WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext), System.Func(Of TContext, Boolean), System.Action(Of WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext)))
  nameWithType: PipelineBuilderExtensions.UseWhen<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, bool>, Action<IAsyncPipelineBuilder<TContext>>)
  nameWithType.vb: PipelineBuilderExtensions.UseWhen(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IAsyncPipelineBuilder(Of TContext)))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IPipelineBuilder{``0}})
  name: UseWhen<TContext>(IPipelineBuilder<TContext>, Func<TContext, bool>, Action<IPipelineBuilder<TContext>>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IPipelineBuilder{``0}})
  name.vb: UseWhen(Of TContext)(IPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IPipelineBuilder(Of TContext)))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen<TContext>(WeihanLi.Common.Helpers.IPipelineBuilder<TContext>, System.Func<TContext, bool>, System.Action<WeihanLi.Common.Helpers.IPipelineBuilder<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.UseWhen(Of TContext)(WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext), System.Func(Of TContext, Boolean), System.Action(Of WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext)))
  nameWithType: PipelineBuilderExtensions.UseWhen<TContext>(IPipelineBuilder<TContext>, Func<TContext, bool>, Action<IPipelineBuilder<TContext>>)
  nameWithType.vb: PipelineBuilderExtensions.UseWhen(Of TContext)(IPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IPipelineBuilder(Of TContext)))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When*
  name: When
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: Overload:WeihanLi.Common.Helpers.PipelineBuilderExtensions.When
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When
  nameWithType: PipelineBuilderExtensions.When
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0}})
  name: When<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, bool>, Action<IAsyncPipelineBuilder<TContext>>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.When``1(WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IAsyncPipelineBuilder{``0}})
  name.vb: When(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IAsyncPipelineBuilder(Of TContext)))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When<TContext>(WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>, System.Func<TContext, bool>, System.Action<WeihanLi.Common.Helpers.IAsyncPipelineBuilder<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When(Of TContext)(WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext), System.Func(Of TContext, Boolean), System.Action(Of WeihanLi.Common.Helpers.IAsyncPipelineBuilder(Of TContext)))
  nameWithType: PipelineBuilderExtensions.When<TContext>(IAsyncPipelineBuilder<TContext>, Func<TContext, bool>, Action<IAsyncPipelineBuilder<TContext>>)
  nameWithType.vb: PipelineBuilderExtensions.When(Of TContext)(IAsyncPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IAsyncPipelineBuilder(Of TContext)))
- uid: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IPipelineBuilder{``0}})
  name: When<TContext>(IPipelineBuilder<TContext>, Func<TContext, bool>, Action<IPipelineBuilder<TContext>>)
  href: api/WeihanLi.Common.Helpers.PipelineBuilderExtensions.yml
  commentId: M:WeihanLi.Common.Helpers.PipelineBuilderExtensions.When``1(WeihanLi.Common.Helpers.IPipelineBuilder{``0},System.Func{``0,System.Boolean},System.Action{WeihanLi.Common.Helpers.IPipelineBuilder{``0}})
  name.vb: When(Of TContext)(IPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IPipelineBuilder(Of TContext)))
  fullName: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When<TContext>(WeihanLi.Common.Helpers.IPipelineBuilder<TContext>, System.Func<TContext, bool>, System.Action<WeihanLi.Common.Helpers.IPipelineBuilder<TContext>>)
  fullName.vb: WeihanLi.Common.Helpers.PipelineBuilderExtensions.When(Of TContext)(WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext), System.Func(Of TContext, Boolean), System.Action(Of WeihanLi.Common.Helpers.IPipelineBuilder(Of TContext)))
  nameWithType: PipelineBuilderExtensions.When<TContext>(IPipelineBuilder<TContext>, Func<TContext, bool>, Action<IPipelineBuilder<TContext>>)
  nameWithType.vb: PipelineBuilderExtensions.When(Of TContext)(IPipelineBuilder(Of TContext), Func(Of TContext, Boolean), Action(Of IPipelineBuilder(Of TContext)))
- uid: WeihanLi.Common.Helpers.ProcessExecutor
  name: ProcessExecutor
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: T:WeihanLi.Common.Helpers.ProcessExecutor
  fullName: WeihanLi.Common.Helpers.ProcessExecutor
  nameWithType: ProcessExecutor
- uid: WeihanLi.Common.Helpers.ProcessExecutor._process
  name: _process
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: F:WeihanLi.Common.Helpers.ProcessExecutor._process
  fullName: WeihanLi.Common.Helpers.ProcessExecutor._process
  nameWithType: ProcessExecutor._process
- uid: WeihanLi.Common.Helpers.ProcessExecutor._started
  name: _started
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: F:WeihanLi.Common.Helpers.ProcessExecutor._started
  fullName: WeihanLi.Common.Helpers.ProcessExecutor._started
  nameWithType: ProcessExecutor._started
- uid: WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.Diagnostics.ProcessStartInfo)
  name: ProcessExecutor(ProcessStartInfo)
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.Diagnostics.ProcessStartInfo)
  name.vb: New(ProcessStartInfo)
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ProcessExecutor(System.Diagnostics.ProcessStartInfo)
  fullName.vb: WeihanLi.Common.Helpers.ProcessExecutor.New(System.Diagnostics.ProcessStartInfo)
  nameWithType: ProcessExecutor.ProcessExecutor(ProcessStartInfo)
  nameWithType.vb: ProcessExecutor.New(ProcessStartInfo)
- uid: WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.String,System.String)
  name: ProcessExecutor(string, string)
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.String,System.String)
  name.vb: New(String, String)
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ProcessExecutor(string, string)
  fullName.vb: WeihanLi.Common.Helpers.ProcessExecutor.New(String, String)
  nameWithType: ProcessExecutor.ProcessExecutor(string, string)
  nameWithType.vb: ProcessExecutor.New(String, String)
- uid: WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.String)
  name: ProcessExecutor(string)
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ProcessExecutor(string)
  fullName.vb: WeihanLi.Common.Helpers.ProcessExecutor.New(String)
  nameWithType: ProcessExecutor.ProcessExecutor(string)
  nameWithType.vb: ProcessExecutor.New(String)
- uid: WeihanLi.Common.Helpers.ProcessExecutor.#ctor*
  name: ProcessExecutor
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ProcessExecutor
  fullName.vb: WeihanLi.Common.Helpers.ProcessExecutor.New
  nameWithType: ProcessExecutor.ProcessExecutor
  nameWithType.vb: ProcessExecutor.New
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.Dispose
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Dispose()
  nameWithType: ProcessExecutor.Dispose()
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Dispose
  nameWithType: ProcessExecutor.Dispose
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Execute
  name: Execute()
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.Execute
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Execute()
  nameWithType: ProcessExecutor.Execute()
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Execute*
  name: Execute
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.Execute
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Execute
  nameWithType: ProcessExecutor.Execute
- uid: WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync
  name: ExecuteAsync()
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync()
  nameWithType: ProcessExecutor.ExecuteAsync()
- uid: WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.ExecuteAsync
  nameWithType: ProcessExecutor.ExecuteAsync
- uid: WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents
  name: InitializeEvents()
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents()
  nameWithType: ProcessExecutor.InitializeEvents()
- uid: WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents*
  name: InitializeEvents
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.InitializeEvents
  nameWithType: ProcessExecutor.InitializeEvents
- uid: WeihanLi.Common.Helpers.ProcessExecutor.OnErrorDataReceived
  name: OnErrorDataReceived
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: E:WeihanLi.Common.Helpers.ProcessExecutor.OnErrorDataReceived
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.OnErrorDataReceived
  nameWithType: ProcessExecutor.OnErrorDataReceived
- uid: WeihanLi.Common.Helpers.ProcessExecutor.OnExited
  name: OnExited
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: E:WeihanLi.Common.Helpers.ProcessExecutor.OnExited
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.OnExited
  nameWithType: ProcessExecutor.OnExited
- uid: WeihanLi.Common.Helpers.ProcessExecutor.OnOutputDataReceived
  name: OnOutputDataReceived
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: E:WeihanLi.Common.Helpers.ProcessExecutor.OnOutputDataReceived
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.OnOutputDataReceived
  nameWithType: ProcessExecutor.OnOutputDataReceived
- uid: WeihanLi.Common.Helpers.ProcessExecutor.SendInput(System.String)
  name: SendInput(string)
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.SendInput(System.String)
  name.vb: SendInput(String)
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.SendInput(string)
  fullName.vb: WeihanLi.Common.Helpers.ProcessExecutor.SendInput(String)
  nameWithType: ProcessExecutor.SendInput(string)
  nameWithType.vb: ProcessExecutor.SendInput(String)
- uid: WeihanLi.Common.Helpers.ProcessExecutor.SendInput*
  name: SendInput
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.SendInput
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.SendInput
  nameWithType: ProcessExecutor.SendInput
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Start
  name: Start()
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: M:WeihanLi.Common.Helpers.ProcessExecutor.Start
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Start()
  nameWithType: ProcessExecutor.Start()
- uid: WeihanLi.Common.Helpers.ProcessExecutor.Start*
  name: Start
  href: api/WeihanLi.Common.Helpers.ProcessExecutor.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProcessExecutor.Start
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProcessExecutor.Start
  nameWithType: ProcessExecutor.Start
- uid: WeihanLi.Common.Helpers.ProfilerHelper
  name: ProfilerHelper
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ProfilerHelper
  fullName: WeihanLi.Common.Helpers.ProfilerHelper
  nameWithType: ProfilerHelper
- uid: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(System.Int64,System.Int64)
  name: GetElapsedTime(long, long)
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(System.Int64,System.Int64)
  name.vb: GetElapsedTime(Long, Long)
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(long, long)
  fullName.vb: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(Long, Long)
  nameWithType: ProfilerHelper.GetElapsedTime(long, long)
  nameWithType.vb: ProfilerHelper.GetElapsedTime(Long, Long)
- uid: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(System.Int64)
  name: GetElapsedTime(long)
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(System.Int64)
  name.vb: GetElapsedTime(Long)
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(long)
  fullName.vb: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime(Long)
  nameWithType: ProfilerHelper.GetElapsedTime(long)
  nameWithType.vb: ProfilerHelper.GetElapsedTime(Long)
- uid: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime*
  name: GetElapsedTime
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.GetElapsedTime
  nameWithType: ProfilerHelper.GetElapsedTime
- uid: WeihanLi.Common.Helpers.ProfilerHelper.Profile(System.Diagnostics.Stopwatch,System.Action{System.TimeSpan})
  name: Profile(Stopwatch, Action<TimeSpan>)
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerHelper.Profile(System.Diagnostics.Stopwatch,System.Action{System.TimeSpan})
  name.vb: Profile(Stopwatch, Action(Of TimeSpan))
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.Profile(System.Diagnostics.Stopwatch, System.Action<System.TimeSpan>)
  fullName.vb: WeihanLi.Common.Helpers.ProfilerHelper.Profile(System.Diagnostics.Stopwatch, System.Action(Of System.TimeSpan))
  nameWithType: ProfilerHelper.Profile(Stopwatch, Action<TimeSpan>)
  nameWithType.vb: ProfilerHelper.Profile(Stopwatch, Action(Of TimeSpan))
- uid: WeihanLi.Common.Helpers.ProfilerHelper.Profile*
  name: Profile
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProfilerHelper.Profile
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.Profile
  nameWithType: ProfilerHelper.Profile
- uid: WeihanLi.Common.Helpers.ProfilerHelper.StartNew(WeihanLi.Common.IProfiler,System.Action{System.TimeSpan})
  name: StartNew(IProfiler, Action<TimeSpan>)
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerHelper.StartNew(WeihanLi.Common.IProfiler,System.Action{System.TimeSpan})
  name.vb: StartNew(IProfiler, Action(Of TimeSpan))
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.StartNew(WeihanLi.Common.IProfiler, System.Action<System.TimeSpan>)
  fullName.vb: WeihanLi.Common.Helpers.ProfilerHelper.StartNew(WeihanLi.Common.IProfiler, System.Action(Of System.TimeSpan))
  nameWithType: ProfilerHelper.StartNew(IProfiler, Action<TimeSpan>)
  nameWithType.vb: ProfilerHelper.StartNew(IProfiler, Action(Of TimeSpan))
- uid: WeihanLi.Common.Helpers.ProfilerHelper.StartNew*
  name: StartNew
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProfilerHelper.StartNew
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.StartNew
  nameWithType: ProfilerHelper.StartNew
- uid: WeihanLi.Common.Helpers.ProfilerHelper.TicksPerTimestamp
  name: TicksPerTimestamp
  href: api/WeihanLi.Common.Helpers.ProfilerHelper.yml
  commentId: F:WeihanLi.Common.Helpers.ProfilerHelper.TicksPerTimestamp
  fullName: WeihanLi.Common.Helpers.ProfilerHelper.TicksPerTimestamp
  nameWithType: ProfilerHelper.TicksPerTimestamp
- uid: WeihanLi.Common.Helpers.ProfilerStopper
  name: ProfilerStopper
  href: api/WeihanLi.Common.Helpers.ProfilerStopper.yml
  commentId: T:WeihanLi.Common.Helpers.ProfilerStopper
  fullName: WeihanLi.Common.Helpers.ProfilerStopper
  nameWithType: ProfilerStopper
- uid: WeihanLi.Common.Helpers.ProfilerStopper.#ctor(WeihanLi.Common.IProfiler,System.Action{System.TimeSpan})
  name: ProfilerStopper(IProfiler, Action<TimeSpan>)
  href: api/WeihanLi.Common.Helpers.ProfilerStopper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerStopper.#ctor(WeihanLi.Common.IProfiler,System.Action{System.TimeSpan})
  name.vb: New(IProfiler, Action(Of TimeSpan))
  fullName: WeihanLi.Common.Helpers.ProfilerStopper.ProfilerStopper(WeihanLi.Common.IProfiler, System.Action<System.TimeSpan>)
  fullName.vb: WeihanLi.Common.Helpers.ProfilerStopper.New(WeihanLi.Common.IProfiler, System.Action(Of System.TimeSpan))
  nameWithType: ProfilerStopper.ProfilerStopper(IProfiler, Action<TimeSpan>)
  nameWithType.vb: ProfilerStopper.New(IProfiler, Action(Of TimeSpan))
- uid: WeihanLi.Common.Helpers.ProfilerStopper.#ctor*
  name: ProfilerStopper
  href: api/WeihanLi.Common.Helpers.ProfilerStopper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProfilerStopper.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.ProfilerStopper.ProfilerStopper
  fullName.vb: WeihanLi.Common.Helpers.ProfilerStopper.New
  nameWithType: ProfilerStopper.ProfilerStopper
  nameWithType.vb: ProfilerStopper.New
- uid: WeihanLi.Common.Helpers.ProfilerStopper.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Helpers.ProfilerStopper.yml
  commentId: M:WeihanLi.Common.Helpers.ProfilerStopper.Dispose
  fullName: WeihanLi.Common.Helpers.ProfilerStopper.Dispose()
  nameWithType: ProfilerStopper.Dispose()
- uid: WeihanLi.Common.Helpers.ProfilerStopper.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Helpers.ProfilerStopper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ProfilerStopper.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ProfilerStopper.Dispose
  nameWithType: ProfilerStopper.Dispose
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1
  name: PropertyEnricher<TContext>
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: T:WeihanLi.Common.Helpers.PropertyEnricher`1
  name.vb: PropertyEnricher(Of TContext)
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext)
  nameWithType: PropertyEnricher<TContext>
  nameWithType.vb: PropertyEnricher(Of TContext)
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Boolean)
  name: PropertyEnricher(string, Func<TContext, object>, bool)
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Boolean)
  name.vb: New(String, Func(Of TContext, Object), Boolean)
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.PropertyEnricher(string, System.Func<TContext, object>, bool)
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).New(String, System.Func(Of TContext, Object), Boolean)
  nameWithType: PropertyEnricher<TContext>.PropertyEnricher(string, Func<TContext, object>, bool)
  nameWithType.vb: PropertyEnricher(Of TContext).New(String, Func(Of TContext, Object), Boolean)
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Func{`0,System.Boolean},System.Boolean)
  name: PropertyEnricher(string, Func<TContext, object>, Func<TContext, bool>?, bool)
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Func{`0,System.Object},System.Func{`0,System.Boolean},System.Boolean)
  name.vb: New(String, Func(Of TContext, Object), Func(Of TContext, Boolean), Boolean)
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.PropertyEnricher(string, System.Func<TContext, object>, System.Func<TContext, bool>?, bool)
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).New(String, System.Func(Of TContext, Object), System.Func(Of TContext, Boolean), Boolean)
  nameWithType: PropertyEnricher<TContext>.PropertyEnricher(string, Func<TContext, object>, Func<TContext, bool>?, bool)
  nameWithType.vb: PropertyEnricher(Of TContext).New(String, Func(Of TContext, Object), Func(Of TContext, Boolean), Boolean)
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Object,System.Boolean)
  name: PropertyEnricher(string, object, bool)
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor(System.String,System.Object,System.Boolean)
  name.vb: New(String, Object, Boolean)
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.PropertyEnricher(string, object, bool)
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).New(String, Object, Boolean)
  nameWithType: PropertyEnricher<TContext>.PropertyEnricher(string, object, bool)
  nameWithType.vb: PropertyEnricher(Of TContext).New(String, Object, Boolean)
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor*
  name: PropertyEnricher
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PropertyEnricher`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.PropertyEnricher
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).New
  nameWithType: PropertyEnricher<TContext>.PropertyEnricher
  nameWithType.vb: PropertyEnricher(Of TContext).New
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.Enrich(`0)
  name: Enrich(TContext)
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: M:WeihanLi.Common.Helpers.PropertyEnricher`1.Enrich(`0)
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.Enrich(TContext)
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).Enrich(TContext)
  nameWithType: PropertyEnricher<TContext>.Enrich(TContext)
  nameWithType.vb: PropertyEnricher(Of TContext).Enrich(TContext)
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.Enrich*
  name: Enrich
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PropertyEnricher`1.Enrich
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.Enrich
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).Enrich
  nameWithType: PropertyEnricher<TContext>.Enrich
  nameWithType.vb: PropertyEnricher(Of TContext).Enrich
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.EnrichAction
  name: EnrichAction
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: P:WeihanLi.Common.Helpers.PropertyEnricher`1.EnrichAction
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.EnrichAction
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).EnrichAction
  nameWithType: PropertyEnricher<TContext>.EnrichAction
  nameWithType.vb: PropertyEnricher(Of TContext).EnrichAction
- uid: WeihanLi.Common.Helpers.PropertyEnricher`1.EnrichAction*
  name: EnrichAction
  href: api/WeihanLi.Common.Helpers.PropertyEnricher-1.yml
  commentId: Overload:WeihanLi.Common.Helpers.PropertyEnricher`1.EnrichAction
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.PropertyEnricher<TContext>.EnrichAction
  fullName.vb: WeihanLi.Common.Helpers.PropertyEnricher(Of TContext).EnrichAction
  nameWithType: PropertyEnricher<TContext>.EnrichAction
  nameWithType.vb: PropertyEnricher(Of TContext).EnrichAction
- uid: WeihanLi.Common.Helpers.ReflectHelper
  name: ReflectHelper
  href: api/WeihanLi.Common.Helpers.ReflectHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ReflectHelper
  fullName: WeihanLi.Common.Helpers.ReflectHelper
  nameWithType: ReflectHelper
- uid: WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies
  name: GetAssemblies()
  href: api/WeihanLi.Common.Helpers.ReflectHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies
  fullName: WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies()
  nameWithType: ReflectHelper.GetAssemblies()
- uid: WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies*
  name: GetAssemblies
  href: api/WeihanLi.Common.Helpers.ReflectHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ReflectHelper.GetAssemblies
  nameWithType: ReflectHelper.GetAssemblies
- uid: WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable(System.Type)
  name: IsAwaitable(Type)
  href: api/WeihanLi.Common.Helpers.ReflectHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable(System.Type)
  fullName: WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable(System.Type)
  nameWithType: ReflectHelper.IsAwaitable(Type)
- uid: WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable*
  name: IsAwaitable
  href: api/WeihanLi.Common.Helpers.ReflectHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ReflectHelper.IsAwaitable
  nameWithType: ReflectHelper.IsAwaitable
- uid: WeihanLi.Common.Helpers.RequestHelper
  name: RequestHelper
  href: api/WeihanLi.Common.Helpers.RequestHelper.yml
  commentId: T:WeihanLi.Common.Helpers.RequestHelper
  fullName: WeihanLi.Common.Helpers.RequestHelper
  nameWithType: RequestHelper
- uid: WeihanLi.Common.Helpers.RequestHelper.GetParamCollection(System.String)
  name: GetParamCollection(string)
  href: api/WeihanLi.Common.Helpers.RequestHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RequestHelper.GetParamCollection(System.String)
  name.vb: GetParamCollection(String)
  fullName: WeihanLi.Common.Helpers.RequestHelper.GetParamCollection(string)
  fullName.vb: WeihanLi.Common.Helpers.RequestHelper.GetParamCollection(String)
  nameWithType: RequestHelper.GetParamCollection(string)
  nameWithType.vb: RequestHelper.GetParamCollection(String)
- uid: WeihanLi.Common.Helpers.RequestHelper.GetParamCollection*
  name: GetParamCollection
  href: api/WeihanLi.Common.Helpers.RequestHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.RequestHelper.GetParamCollection
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RequestHelper.GetParamCollection
  nameWithType: RequestHelper.GetParamCollection
- uid: WeihanLi.Common.Helpers.RetryHelper
  name: RetryHelper
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: T:WeihanLi.Common.Helpers.RetryHelper
  fullName: WeihanLi.Common.Helpers.RetryHelper
  nameWithType: RetryHelper
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Action,System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke(Action, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Action,System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Action, Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Action, int, System.Action<int, System.TimeSpan, System.Exception?>?, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Action, Integer, System.Action(Of Integer, System.TimeSpan, System.Exception), System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke(Action, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Action, Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Func{System.Boolean},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke(Func<bool>, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Func{System.Boolean},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Func(Of Boolean), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Func<bool>, int, System.Action<int, System.TimeSpan, System.Exception?>?, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(System.Func(Of Boolean), Integer, System.Action(Of Integer, System.TimeSpan, System.Exception), System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke(Func<bool>, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Func(Of Boolean), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke*
  name: TryInvoke
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.RetryHelper.TryInvoke
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke
  nameWithType: RetryHelper.TryInvoke
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke``1(System.Func{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke<TResult>(Func<TResult?>, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke``1(System.Func{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Of TResult)(Func(Of TResult), Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke<TResult>(System.Func<TResult?>, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(Of TResult)(System.Func(Of TResult), System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke<TResult>(Func<TResult?>, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Of TResult)(Func(Of TResult), Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke``2(System.Func{``0,``1},``0,System.Func{``1,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke<T1, TResult>(Func<T1, TResult?>, T1, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke``2(System.Func{``0,``1},``0,System.Func{``1,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Of T1, TResult)(Func(Of T1, TResult), T1, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke<T1, TResult>(System.Func<T1, TResult?>, T1, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(Of T1, TResult)(System.Func(Of T1, TResult), T1, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke<T1, TResult>(Func<T1, TResult?>, T1, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Of T1, TResult)(Func(Of T1, TResult), T1, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke``3(System.Func{``0,``1,``2},``0,``1,System.Func{``2,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke<T1, T2, TResult>(Func<T1, T2, TResult?>, T1, T2, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke``3(System.Func{``0,``1,``2},``0,``1,System.Func{``2,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Of T1, T2, TResult)(Func(Of T1, T2, TResult), T1, T2, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke<T1, T2, TResult>(System.Func<T1, T2, TResult?>, T1, T2, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(Of T1, T2, TResult)(System.Func(Of T1, T2, TResult), T1, T2, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke<T1, T2, TResult>(Func<T1, T2, TResult?>, T1, T2, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Of T1, T2, TResult)(Func(Of T1, T2, TResult), T1, T2, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Func{``3,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult?>, T1, T2, T3, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Func{``3,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, TResult), T1, T2, T3, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke<T1, T2, T3, TResult>(System.Func<T1, T2, T3, TResult?>, T1, T2, T3, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(Of T1, T2, T3, TResult)(System.Func(Of T1, T2, T3, TResult), T1, T2, T3, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult?>, T1, T2, T3, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, TResult), T1, T2, T3, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvoke``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Func{``4,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvoke<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<TResult, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvoke``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Func{``4,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvoke(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvoke<T1, T2, T3, T4, TResult>(System.Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, System.Func<TResult, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvoke(Of T1, T2, T3, T4, TResult)(System.Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvoke<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, Func<TResult, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvoke(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan},System.Threading.CancellationToken)
  name: TryInvokeAsync(Func<Task<bool>>, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?, CancellationToken)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan},System.Threading.CancellationToken)
  name.vb: TryInvokeAsync(Func(Of Task(Of Boolean)), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan), CancellationToken)
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func<System.Threading.Tasks.Task<bool>>, int, System.Action<int, System.TimeSpan, System.Exception?>?, System.Func<int, System.TimeSpan>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func(Of System.Threading.Tasks.Task(Of Boolean)), Integer, System.Action(Of Integer, System.TimeSpan, System.Exception), System.Func(Of Integer, System.TimeSpan), System.Threading.CancellationToken)
  nameWithType: RetryHelper.TryInvokeAsync(Func<Task<bool>>, int, Action<int, TimeSpan, Exception?>?, Func<int, TimeSpan>?, CancellationToken)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Func(Of Task(Of Boolean)), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan), CancellationToken)
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan},System.Threading.CancellationToken)
  name: TryInvokeAsync(Func<Task>, int, Action<int, TimeSpan, Exception>?, Func<int, TimeSpan>?, CancellationToken)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Action{System.Int32,System.TimeSpan,System.Exception},System.Func{System.Int32,System.TimeSpan},System.Threading.CancellationToken)
  name.vb: TryInvokeAsync(Func(Of Task), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan), CancellationToken)
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func<System.Threading.Tasks.Task>, int, System.Action<int, System.TimeSpan, System.Exception>?, System.Func<int, System.TimeSpan>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(System.Func(Of System.Threading.Tasks.Task), Integer, System.Action(Of Integer, System.TimeSpan, System.Exception), System.Func(Of Integer, System.TimeSpan), System.Threading.CancellationToken)
  nameWithType: RetryHelper.TryInvokeAsync(Func<Task>, int, Action<int, TimeSpan, Exception>?, Func<int, TimeSpan>?, CancellationToken)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Func(Of Task), Integer, Action(Of Integer, TimeSpan, Exception), Func(Of Integer, TimeSpan), CancellationToken)
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync*
  name: TryInvokeAsync
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync
  nameWithType: RetryHelper.TryInvokeAsync
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvokeAsync<TResult>(Func<Task<TResult?>>, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvokeAsync(Of TResult)(Func(Of Task(Of TResult)), Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult?>>, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvokeAsync<TResult>(Func<Task<TResult?>>, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Of TResult)(Func(Of Task(Of TResult)), Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Func{``1,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvokeAsync<T1, TResult>(Func<T1, Task<TResult?>>, T1, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Func{``1,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvokeAsync(Of T1, TResult)(Func(Of T1, Task(Of TResult)), T1, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync<T1, TResult>(System.Func<T1, System.Threading.Tasks.Task<TResult?>>, T1, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(Of T1, TResult)(System.Func(Of T1, System.Threading.Tasks.Task(Of TResult)), T1, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvokeAsync<T1, TResult>(Func<T1, Task<TResult?>>, T1, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Of T1, TResult)(Func(Of T1, Task(Of TResult)), T1, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,System.Func{``2,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvokeAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult?>>, T1, T2, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,System.Func{``2,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvokeAsync(Of T1, T2, TResult)(Func(Of T1, T2, Task(Of TResult)), T1, T2, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync<T1, T2, TResult>(System.Func<T1, T2, System.Threading.Tasks.Task<TResult?>>, T1, T2, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(Of T1, T2, TResult)(System.Func(Of T1, T2, System.Threading.Tasks.Task(Of TResult)), T1, T2, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvokeAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult?>>, T1, T2, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Of T1, T2, TResult)(Func(Of T1, T2, Task(Of TResult)), T1, T2, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.Func{``3,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvokeAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult?>>, T1, T2, T3, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,System.Func{``3,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvokeAsync(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, Task(Of TResult)), T1, T2, T3, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync<T1, T2, T3, TResult>(System.Func<T1, T2, T3, System.Threading.Tasks.Task<TResult?>>, T1, T2, T3, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(Of T1, T2, T3, TResult)(System.Func(Of T1, T2, T3, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvokeAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult?>>, T1, T2, T3, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, Task(Of TResult)), T1, T2, T3, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.Func{``4,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name: TryInvokeAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  href: api/WeihanLi.Common.Helpers.RetryHelper.yml
  commentId: M:WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,System.Func{``4,System.Boolean},System.Int32,System.Func{System.Int32,System.TimeSpan})
  name.vb: TryInvokeAsync(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, Task(Of TResult)), T1, T2, T3, T4, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
  fullName: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync<T1, T2, T3, T4, TResult>(System.Func<T1, T2, T3, T4, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, System.Func<TResult?, bool>, int, System.Func<int, System.TimeSpan>?)
  fullName.vb: WeihanLi.Common.Helpers.RetryHelper.TryInvokeAsync(Of T1, T2, T3, T4, TResult)(System.Func(Of T1, T2, T3, T4, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, System.Func(Of TResult, Boolean), Integer, System.Func(Of Integer, System.TimeSpan))
  nameWithType: RetryHelper.TryInvokeAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, Func<TResult?, bool>, int, Func<int, TimeSpan>?)
  nameWithType.vb: RetryHelper.TryInvokeAsync(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, Task(Of TResult)), T1, T2, T3, T4, Func(Of TResult, Boolean), Integer, Func(Of Integer, TimeSpan))
- uid: WeihanLi.Common.Helpers.RuntimeInfo
  name: RuntimeInfo
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: T:WeihanLi.Common.Helpers.RuntimeInfo
  fullName: WeihanLi.Common.Helpers.RuntimeInfo
  nameWithType: RuntimeInfo
- uid: WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription
  name: FrameworkDescription
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription
  nameWithType: RuntimeInfo.FrameworkDescription
- uid: WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription*
  name: FrameworkDescription
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.FrameworkDescription
  nameWithType: RuntimeInfo.FrameworkDescription
- uid: WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer
  name: IsInContainer
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer
  nameWithType: RuntimeInfo.IsInContainer
- uid: WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer*
  name: IsInContainer
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.IsInContainer
  nameWithType: RuntimeInfo.IsInContainer
- uid: WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes
  name: IsInKubernetes
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes
  nameWithType: RuntimeInfo.IsInKubernetes
- uid: WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes*
  name: IsInKubernetes
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.IsInKubernetes
  nameWithType: RuntimeInfo.IsInKubernetes
- uid: WeihanLi.Common.Helpers.RuntimeInfo.MachineName
  name: MachineName
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.MachineName
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.MachineName
  nameWithType: RuntimeInfo.MachineName
- uid: WeihanLi.Common.Helpers.RuntimeInfo.MachineName*
  name: MachineName
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.MachineName
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.MachineName
  nameWithType: RuntimeInfo.MachineName
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture
  name: OSArchitecture
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture
  nameWithType: RuntimeInfo.OSArchitecture
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture*
  name: OSArchitecture
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSArchitecture
  nameWithType: RuntimeInfo.OSArchitecture
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSDescription
  name: OSDescription
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.OSDescription
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSDescription
  nameWithType: RuntimeInfo.OSDescription
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSDescription*
  name: OSDescription
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.OSDescription
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSDescription
  nameWithType: RuntimeInfo.OSDescription
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSVersion
  name: OSVersion
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.OSVersion
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSVersion
  nameWithType: RuntimeInfo.OSVersion
- uid: WeihanLi.Common.Helpers.RuntimeInfo.OSVersion*
  name: OSVersion
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.OSVersion
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.OSVersion
  nameWithType: RuntimeInfo.OSVersion
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessId
  name: ProcessId
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.ProcessId
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessId
  nameWithType: RuntimeInfo.ProcessId
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessId*
  name: ProcessId
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.ProcessId
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessId
  nameWithType: RuntimeInfo.ProcessId
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount
  name: ProcessorCount
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount
  nameWithType: RuntimeInfo.ProcessorCount
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount*
  name: ProcessorCount
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessorCount
  nameWithType: RuntimeInfo.ProcessorCount
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath
  name: ProcessPath
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath
  nameWithType: RuntimeInfo.ProcessPath
- uid: WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath*
  name: ProcessPath
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.ProcessPath
  nameWithType: RuntimeInfo.ProcessPath
- uid: WeihanLi.Common.Helpers.RuntimeInfo.Version
  name: Version
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.Version
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.Version
  nameWithType: RuntimeInfo.Version
- uid: WeihanLi.Common.Helpers.RuntimeInfo.Version*
  name: Version
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.Version
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.Version
  nameWithType: RuntimeInfo.Version
- uid: WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory
  name: WorkingDirectory
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: P:WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory
  nameWithType: RuntimeInfo.WorkingDirectory
- uid: WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory*
  name: WorkingDirectory
  href: api/WeihanLi.Common.Helpers.RuntimeInfo.yml
  commentId: Overload:WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.RuntimeInfo.WorkingDirectory
  nameWithType: RuntimeInfo.WorkingDirectory
- uid: WeihanLi.Common.Helpers.SecurityHelper
  name: SecurityHelper
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: T:WeihanLi.Common.Helpers.SecurityHelper
  fullName: WeihanLi.Common.Helpers.SecurityHelper
  nameWithType: SecurityHelper
- uid: WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode(System.Int32,System.Boolean)
  name: GenerateRandomCode(int, bool)
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: M:WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode(System.Int32,System.Boolean)
  name.vb: GenerateRandomCode(Integer, Boolean)
  fullName: WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode(int, bool)
  fullName.vb: WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode(Integer, Boolean)
  nameWithType: SecurityHelper.GenerateRandomCode(int, bool)
  nameWithType.vb: SecurityHelper.GenerateRandomCode(Integer, Boolean)
- uid: WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode*
  name: GenerateRandomCode
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.GenerateRandomCode
  nameWithType: SecurityHelper.GenerateRandomCode
- uid: WeihanLi.Common.Helpers.SecurityHelper.MD5(System.String,System.Boolean)
  name: MD5(string, bool)
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: M:WeihanLi.Common.Helpers.SecurityHelper.MD5(System.String,System.Boolean)
  name.vb: MD5(String, Boolean)
  fullName: WeihanLi.Common.Helpers.SecurityHelper.MD5(string, bool)
  fullName.vb: WeihanLi.Common.Helpers.SecurityHelper.MD5(String, Boolean)
  nameWithType: SecurityHelper.MD5(string, bool)
  nameWithType.vb: SecurityHelper.MD5(String, Boolean)
- uid: WeihanLi.Common.Helpers.SecurityHelper.MD5*
  name: MD5
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.MD5
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.MD5
  nameWithType: SecurityHelper.MD5
- uid: WeihanLi.Common.Helpers.SecurityHelper.Random
  name: Random
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: P:WeihanLi.Common.Helpers.SecurityHelper.Random
  fullName: WeihanLi.Common.Helpers.SecurityHelper.Random
  nameWithType: SecurityHelper.Random
- uid: WeihanLi.Common.Helpers.SecurityHelper.Random*
  name: Random
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.Random
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.Random
  nameWithType: SecurityHelper.Random
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA1(System.String,System.Boolean)
  name: SHA1(string, bool)
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: M:WeihanLi.Common.Helpers.SecurityHelper.SHA1(System.String,System.Boolean)
  name.vb: SHA1(String, Boolean)
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA1(string, bool)
  fullName.vb: WeihanLi.Common.Helpers.SecurityHelper.SHA1(String, Boolean)
  nameWithType: SecurityHelper.SHA1(string, bool)
  nameWithType.vb: SecurityHelper.SHA1(String, Boolean)
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA1*
  name: SHA1
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.SHA1
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA1
  nameWithType: SecurityHelper.SHA1
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA256(System.String,System.Boolean)
  name: SHA256(string, bool)
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: M:WeihanLi.Common.Helpers.SecurityHelper.SHA256(System.String,System.Boolean)
  name.vb: SHA256(String, Boolean)
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA256(string, bool)
  fullName.vb: WeihanLi.Common.Helpers.SecurityHelper.SHA256(String, Boolean)
  nameWithType: SecurityHelper.SHA256(string, bool)
  nameWithType.vb: SecurityHelper.SHA256(String, Boolean)
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA256*
  name: SHA256
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.SHA256
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA256
  nameWithType: SecurityHelper.SHA256
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA512(System.String,System.Boolean)
  name: SHA512(string, bool)
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: M:WeihanLi.Common.Helpers.SecurityHelper.SHA512(System.String,System.Boolean)
  name.vb: SHA512(String, Boolean)
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA512(string, bool)
  fullName.vb: WeihanLi.Common.Helpers.SecurityHelper.SHA512(String, Boolean)
  nameWithType: SecurityHelper.SHA512(string, bool)
  nameWithType.vb: SecurityHelper.SHA512(String, Boolean)
- uid: WeihanLi.Common.Helpers.SecurityHelper.SHA512*
  name: SHA512
  href: api/WeihanLi.Common.Helpers.SecurityHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.SecurityHelper.SHA512
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SecurityHelper.SHA512
  nameWithType: SecurityHelper.SHA512
- uid: WeihanLi.Common.Helpers.SequentialGuidGenerator
  name: SequentialGuidGenerator
  href: api/WeihanLi.Common.Helpers.SequentialGuidGenerator.yml
  commentId: T:WeihanLi.Common.Helpers.SequentialGuidGenerator
  fullName: WeihanLi.Common.Helpers.SequentialGuidGenerator
  nameWithType: SequentialGuidGenerator
- uid: WeihanLi.Common.Helpers.SequentialGuidGenerator.Create(WeihanLi.Common.Helpers.SequentialGuidType)
  name: Create(SequentialGuidType)
  href: api/WeihanLi.Common.Helpers.SequentialGuidGenerator.yml
  commentId: M:WeihanLi.Common.Helpers.SequentialGuidGenerator.Create(WeihanLi.Common.Helpers.SequentialGuidType)
  fullName: WeihanLi.Common.Helpers.SequentialGuidGenerator.Create(WeihanLi.Common.Helpers.SequentialGuidType)
  nameWithType: SequentialGuidGenerator.Create(SequentialGuidType)
- uid: WeihanLi.Common.Helpers.SequentialGuidGenerator.Create*
  name: Create
  href: api/WeihanLi.Common.Helpers.SequentialGuidGenerator.yml
  commentId: Overload:WeihanLi.Common.Helpers.SequentialGuidGenerator.Create
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.SequentialGuidGenerator.Create
  nameWithType: SequentialGuidGenerator.Create
- uid: WeihanLi.Common.Helpers.SequentialGuidType
  name: SequentialGuidType
  href: api/WeihanLi.Common.Helpers.SequentialGuidType.yml
  commentId: T:WeihanLi.Common.Helpers.SequentialGuidType
  fullName: WeihanLi.Common.Helpers.SequentialGuidType
  nameWithType: SequentialGuidType
- uid: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsBinary
  name: SequentialAsBinary
  href: api/WeihanLi.Common.Helpers.SequentialGuidType.yml
  commentId: F:WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsBinary
  fullName: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsBinary
  nameWithType: SequentialGuidType.SequentialAsBinary
- uid: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsString
  name: SequentialAsString
  href: api/WeihanLi.Common.Helpers.SequentialGuidType.yml
  commentId: F:WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsString
  fullName: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAsString
  nameWithType: SequentialGuidType.SequentialAsString
- uid: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAtEnd
  name: SequentialAtEnd
  href: api/WeihanLi.Common.Helpers.SequentialGuidType.yml
  commentId: F:WeihanLi.Common.Helpers.SequentialGuidType.SequentialAtEnd
  fullName: WeihanLi.Common.Helpers.SequentialGuidType.SequentialAtEnd
  nameWithType: SequentialGuidType.SequentialAtEnd
- uid: WeihanLi.Common.Helpers.StopwatchStopper
  name: StopwatchStopper
  href: api/WeihanLi.Common.Helpers.StopwatchStopper.yml
  commentId: T:WeihanLi.Common.Helpers.StopwatchStopper
  fullName: WeihanLi.Common.Helpers.StopwatchStopper
  nameWithType: StopwatchStopper
- uid: WeihanLi.Common.Helpers.StopwatchStopper.#ctor(System.Diagnostics.Stopwatch,System.Action{System.TimeSpan})
  name: StopwatchStopper(Stopwatch, Action<TimeSpan>)
  href: api/WeihanLi.Common.Helpers.StopwatchStopper.yml
  commentId: M:WeihanLi.Common.Helpers.StopwatchStopper.#ctor(System.Diagnostics.Stopwatch,System.Action{System.TimeSpan})
  name.vb: New(Stopwatch, Action(Of TimeSpan))
  fullName: WeihanLi.Common.Helpers.StopwatchStopper.StopwatchStopper(System.Diagnostics.Stopwatch, System.Action<System.TimeSpan>)
  fullName.vb: WeihanLi.Common.Helpers.StopwatchStopper.New(System.Diagnostics.Stopwatch, System.Action(Of System.TimeSpan))
  nameWithType: StopwatchStopper.StopwatchStopper(Stopwatch, Action<TimeSpan>)
  nameWithType.vb: StopwatchStopper.New(Stopwatch, Action(Of TimeSpan))
- uid: WeihanLi.Common.Helpers.StopwatchStopper.#ctor*
  name: StopwatchStopper
  href: api/WeihanLi.Common.Helpers.StopwatchStopper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StopwatchStopper.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Helpers.StopwatchStopper.StopwatchStopper
  fullName.vb: WeihanLi.Common.Helpers.StopwatchStopper.New
  nameWithType: StopwatchStopper.StopwatchStopper
  nameWithType.vb: StopwatchStopper.New
- uid: WeihanLi.Common.Helpers.StopwatchStopper.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.Helpers.StopwatchStopper.yml
  commentId: M:WeihanLi.Common.Helpers.StopwatchStopper.Dispose
  fullName: WeihanLi.Common.Helpers.StopwatchStopper.Dispose()
  nameWithType: StopwatchStopper.Dispose()
- uid: WeihanLi.Common.Helpers.StopwatchStopper.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.Helpers.StopwatchStopper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StopwatchStopper.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StopwatchStopper.Dispose
  nameWithType: StopwatchStopper.Dispose
- uid: WeihanLi.Common.Helpers.StringHelper
  name: StringHelper
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: T:WeihanLi.Common.Helpers.StringHelper
  fullName: WeihanLi.Common.Helpers.StringHelper
  nameWithType: StringHelper
- uid: WeihanLi.Common.Helpers.StringHelper.CarriageReturn
  name: CarriageReturn
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.CarriageReturn
  fullName: WeihanLi.Common.Helpers.StringHelper.CarriageReturn
  nameWithType: StringHelper.CarriageReturn
- uid: WeihanLi.Common.Helpers.StringHelper.CarriageReturnLineFeed
  name: CarriageReturnLineFeed
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.CarriageReturnLineFeed
  fullName: WeihanLi.Common.Helpers.StringHelper.CarriageReturnLineFeed
  nameWithType: StringHelper.CarriageReturnLineFeed
- uid: WeihanLi.Common.Helpers.StringHelper.Empty
  name: Empty
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.Empty
  fullName: WeihanLi.Common.Helpers.StringHelper.Empty
  nameWithType: StringHelper.Empty
- uid: WeihanLi.Common.Helpers.StringHelper.EndsWith(System.String,System.Char)
  name: EndsWith(string, char)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.EndsWith(System.String,System.Char)
  name.vb: EndsWith(String, Char)
  fullName: WeihanLi.Common.Helpers.StringHelper.EndsWith(string, char)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.EndsWith(String, Char)
  nameWithType: StringHelper.EndsWith(string, char)
  nameWithType.vb: StringHelper.EndsWith(String, Char)
- uid: WeihanLi.Common.Helpers.StringHelper.EndsWith*
  name: EndsWith
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.EndsWith
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.EndsWith
  nameWithType: StringHelper.EndsWith
- uid: WeihanLi.Common.Helpers.StringHelper.HideEmailDetails(System.String,System.Int32)
  name: HideEmailDetails(string?, int)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.HideEmailDetails(System.String,System.Int32)
  name.vb: HideEmailDetails(String, Integer)
  fullName: WeihanLi.Common.Helpers.StringHelper.HideEmailDetails(string?, int)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.HideEmailDetails(String, Integer)
  nameWithType: StringHelper.HideEmailDetails(string?, int)
  nameWithType.vb: StringHelper.HideEmailDetails(String, Integer)
- uid: WeihanLi.Common.Helpers.StringHelper.HideEmailDetails*
  name: HideEmailDetails
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.HideEmailDetails
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.HideEmailDetails
  nameWithType: StringHelper.HideEmailDetails
- uid: WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)
  name: HideSensitiveInfo(string?, int, int, int, bool)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)
  name.vb: HideSensitiveInfo(String, Integer, Integer, Integer, Boolean)
  fullName: WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo(string?, int, int, int, bool)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo(String, Integer, Integer, Integer, Boolean)
  nameWithType: StringHelper.HideSensitiveInfo(string?, int, int, int, bool)
  nameWithType.vb: StringHelper.HideSensitiveInfo(String, Integer, Integer, Integer, Boolean)
- uid: WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo*
  name: HideSensitiveInfo
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.HideSensitiveInfo
  nameWithType: StringHelper.HideSensitiveInfo
- uid: WeihanLi.Common.Helpers.StringHelper.HideTelDetails(System.String,System.Int32,System.Int32)
  name: HideTelDetails(string?, int, int)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.HideTelDetails(System.String,System.Int32,System.Int32)
  name.vb: HideTelDetails(String, Integer, Integer)
  fullName: WeihanLi.Common.Helpers.StringHelper.HideTelDetails(string?, int, int)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.HideTelDetails(String, Integer, Integer)
  nameWithType: StringHelper.HideTelDetails(string?, int, int)
  nameWithType.vb: StringHelper.HideTelDetails(String, Integer, Integer)
- uid: WeihanLi.Common.Helpers.StringHelper.HideTelDetails*
  name: HideTelDetails
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.HideTelDetails
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.HideTelDetails
  nameWithType: StringHelper.HideTelDetails
- uid: WeihanLi.Common.Helpers.StringHelper.Html2Text(System.String,System.Boolean)
  name: Html2Text(string, bool)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.Html2Text(System.String,System.Boolean)
  name.vb: Html2Text(String, Boolean)
  fullName: WeihanLi.Common.Helpers.StringHelper.Html2Text(string, bool)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.Html2Text(String, Boolean)
  nameWithType: StringHelper.Html2Text(string, bool)
  nameWithType.vb: StringHelper.Html2Text(String, Boolean)
- uid: WeihanLi.Common.Helpers.StringHelper.Html2Text*
  name: Html2Text
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.Html2Text
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.Html2Text
  nameWithType: StringHelper.Html2Text
- uid: WeihanLi.Common.Helpers.StringHelper.LineFeed
  name: LineFeed
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.LineFeed
  fullName: WeihanLi.Common.Helpers.StringHelper.LineFeed
  nameWithType: StringHelper.LineFeed
- uid: WeihanLi.Common.Helpers.StringHelper.SensitiveChar
  name: SensitiveChar
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.SensitiveChar
  fullName: WeihanLi.Common.Helpers.StringHelper.SensitiveChar
  nameWithType: StringHelper.SensitiveChar
- uid: WeihanLi.Common.Helpers.StringHelper.StartsWith(System.String,System.Char)
  name: StartsWith(string?, char)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.StartsWith(System.String,System.Char)
  name.vb: StartsWith(String, Char)
  fullName: WeihanLi.Common.Helpers.StringHelper.StartsWith(string?, char)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.StartsWith(String, Char)
  nameWithType: StringHelper.StartsWith(string?, char)
  nameWithType.vb: StringHelper.StartsWith(String, Char)
- uid: WeihanLi.Common.Helpers.StringHelper.StartsWith*
  name: StartsWith
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.StartsWith
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.StartsWith
  nameWithType: StringHelper.StartsWith
- uid: WeihanLi.Common.Helpers.StringHelper.Tab
  name: Tab
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: F:WeihanLi.Common.Helpers.StringHelper.Tab
  fullName: WeihanLi.Common.Helpers.StringHelper.Tab
  nameWithType: StringHelper.Tab
- uid: WeihanLi.Common.Helpers.StringHelper.ToCamelCase(System.String)
  name: ToCamelCase(string)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.ToCamelCase(System.String)
  name.vb: ToCamelCase(String)
  fullName: WeihanLi.Common.Helpers.StringHelper.ToCamelCase(string)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.ToCamelCase(String)
  nameWithType: StringHelper.ToCamelCase(string)
  nameWithType.vb: StringHelper.ToCamelCase(String)
- uid: WeihanLi.Common.Helpers.StringHelper.ToCamelCase*
  name: ToCamelCase
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.ToCamelCase
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.ToCamelCase
  nameWithType: StringHelper.ToCamelCase
- uid: WeihanLi.Common.Helpers.StringHelper.ToKebabCase(System.String)
  name: ToKebabCase(string)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.ToKebabCase(System.String)
  name.vb: ToKebabCase(String)
  fullName: WeihanLi.Common.Helpers.StringHelper.ToKebabCase(string)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.ToKebabCase(String)
  nameWithType: StringHelper.ToKebabCase(string)
  nameWithType.vb: StringHelper.ToKebabCase(String)
- uid: WeihanLi.Common.Helpers.StringHelper.ToKebabCase*
  name: ToKebabCase
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.ToKebabCase
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.ToKebabCase
  nameWithType: StringHelper.ToKebabCase
- uid: WeihanLi.Common.Helpers.StringHelper.ToPascalCase(System.String)
  name: ToPascalCase(string)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.ToPascalCase(System.String)
  name.vb: ToPascalCase(String)
  fullName: WeihanLi.Common.Helpers.StringHelper.ToPascalCase(string)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.ToPascalCase(String)
  nameWithType: StringHelper.ToPascalCase(string)
  nameWithType.vb: StringHelper.ToPascalCase(String)
- uid: WeihanLi.Common.Helpers.StringHelper.ToPascalCase*
  name: ToPascalCase
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.ToPascalCase
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.ToPascalCase
  nameWithType: StringHelper.ToPascalCase
- uid: WeihanLi.Common.Helpers.StringHelper.ToSnakeCase(System.String)
  name: ToSnakeCase(string)
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: M:WeihanLi.Common.Helpers.StringHelper.ToSnakeCase(System.String)
  name.vb: ToSnakeCase(String)
  fullName: WeihanLi.Common.Helpers.StringHelper.ToSnakeCase(string)
  fullName.vb: WeihanLi.Common.Helpers.StringHelper.ToSnakeCase(String)
  nameWithType: StringHelper.ToSnakeCase(string)
  nameWithType.vb: StringHelper.ToSnakeCase(String)
- uid: WeihanLi.Common.Helpers.StringHelper.ToSnakeCase*
  name: ToSnakeCase
  href: api/WeihanLi.Common.Helpers.StringHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.StringHelper.ToSnakeCase
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.StringHelper.ToSnakeCase
  nameWithType: StringHelper.ToSnakeCase
- uid: WeihanLi.Common.Helpers.TaskHelper
  name: TaskHelper
  href: api/WeihanLi.Common.Helpers.TaskHelper.yml
  commentId: T:WeihanLi.Common.Helpers.TaskHelper
  fullName: WeihanLi.Common.Helpers.TaskHelper
  nameWithType: TaskHelper
- uid: WeihanLi.Common.Helpers.TotpHelper
  name: TotpHelper
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: T:WeihanLi.Common.Helpers.TotpHelper
  fullName: WeihanLi.Common.Helpers.TotpHelper
  nameWithType: TotpHelper
- uid: WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions(System.Action{WeihanLi.Common.Otp.TotpOptions})
  name: ConfigureTotpOptions(Action<TotpOptions>)
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions(System.Action{WeihanLi.Common.Otp.TotpOptions})
  name.vb: ConfigureTotpOptions(Action(Of TotpOptions))
  fullName: WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions(System.Action<WeihanLi.Common.Otp.TotpOptions>)
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions(System.Action(Of WeihanLi.Common.Otp.TotpOptions))
  nameWithType: TotpHelper.ConfigureTotpOptions(Action<TotpOptions>)
  nameWithType.vb: TotpHelper.ConfigureTotpOptions(Action(Of TotpOptions))
- uid: WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions*
  name: ConfigureTotpOptions
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.TotpHelper.ConfigureTotpOptions
  nameWithType: TotpHelper.ConfigureTotpOptions
- uid: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(System.Byte[])
  name: GenerateCode(byte[])
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.GenerateCode(System.Byte[])
  name.vb: GenerateCode(Byte())
  fullName: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(byte[])
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(Byte())
  nameWithType: TotpHelper.GenerateCode(byte[])
  nameWithType.vb: TotpHelper.GenerateCode(Byte())
- uid: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(System.String)
  name: GenerateCode(string)
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.GenerateCode(System.String)
  name.vb: GenerateCode(String)
  fullName: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(string)
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.GenerateCode(String)
  nameWithType: TotpHelper.GenerateCode(string)
  nameWithType.vb: TotpHelper.GenerateCode(String)
- uid: WeihanLi.Common.Helpers.TotpHelper.GenerateCode*
  name: GenerateCode
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.TotpHelper.GenerateCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.TotpHelper.GenerateCode
  nameWithType: TotpHelper.GenerateCode
- uid: WeihanLi.Common.Helpers.TotpHelper.TTL(System.Byte[])
  name: TTL(byte[])
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.TTL(System.Byte[])
  name.vb: TTL(Byte())
  fullName: WeihanLi.Common.Helpers.TotpHelper.TTL(byte[])
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.TTL(Byte())
  nameWithType: TotpHelper.TTL(byte[])
  nameWithType.vb: TotpHelper.TTL(Byte())
- uid: WeihanLi.Common.Helpers.TotpHelper.TTL(System.String)
  name: TTL(string)
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.TTL(System.String)
  name.vb: TTL(String)
  fullName: WeihanLi.Common.Helpers.TotpHelper.TTL(string)
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.TTL(String)
  nameWithType: TotpHelper.TTL(string)
  nameWithType.vb: TotpHelper.TTL(String)
- uid: WeihanLi.Common.Helpers.TotpHelper.TTL*
  name: TTL
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.TotpHelper.TTL
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.TotpHelper.TTL
  nameWithType: TotpHelper.TTL
- uid: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(System.Byte[],System.String,System.Int32)
  name: VerifyCode(byte[], string, int)
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.VerifyCode(System.Byte[],System.String,System.Int32)
  name.vb: VerifyCode(Byte(), String, Integer)
  fullName: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(byte[], string, int)
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(Byte(), String, Integer)
  nameWithType: TotpHelper.VerifyCode(byte[], string, int)
  nameWithType.vb: TotpHelper.VerifyCode(Byte(), String, Integer)
- uid: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(System.String,System.String,System.Int32)
  name: VerifyCode(string, string, int)
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TotpHelper.VerifyCode(System.String,System.String,System.Int32)
  name.vb: VerifyCode(String, String, Integer)
  fullName: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(string, string, int)
  fullName.vb: WeihanLi.Common.Helpers.TotpHelper.VerifyCode(String, String, Integer)
  nameWithType: TotpHelper.VerifyCode(string, string, int)
  nameWithType.vb: TotpHelper.VerifyCode(String, String, Integer)
- uid: WeihanLi.Common.Helpers.TotpHelper.VerifyCode*
  name: VerifyCode
  href: api/WeihanLi.Common.Helpers.TotpHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.TotpHelper.VerifyCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.TotpHelper.VerifyCode
  nameWithType: TotpHelper.VerifyCode
- uid: WeihanLi.Common.Helpers.TypeHelper
  name: TypeHelper
  href: api/WeihanLi.Common.Helpers.TypeHelper.yml
  commentId: T:WeihanLi.Common.Helpers.TypeHelper
  fullName: WeihanLi.Common.Helpers.TypeHelper
  nameWithType: TypeHelper
- uid: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Object,System.Boolean)
  name: GetTypeDisplayName(object?, bool)
  href: api/WeihanLi.Common.Helpers.TypeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Object,System.Boolean)
  name.vb: GetTypeDisplayName(Object, Boolean)
  fullName: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(object?, bool)
  fullName.vb: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(Object, Boolean)
  nameWithType: TypeHelper.GetTypeDisplayName(object?, bool)
  nameWithType.vb: TypeHelper.GetTypeDisplayName(Object, Boolean)
- uid: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Char)
  name: GetTypeDisplayName(Type, bool, bool, bool, char)
  href: api/WeihanLi.Common.Helpers.TypeHelper.yml
  commentId: M:WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Char)
  name.vb: GetTypeDisplayName(Type, Boolean, Boolean, Boolean, Char)
  fullName: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Type, bool, bool, bool, char)
  fullName.vb: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName(System.Type, Boolean, Boolean, Boolean, Char)
  nameWithType: TypeHelper.GetTypeDisplayName(Type, bool, bool, bool, char)
  nameWithType.vb: TypeHelper.GetTypeDisplayName(Type, Boolean, Boolean, Boolean, Char)
- uid: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName*
  name: GetTypeDisplayName
  href: api/WeihanLi.Common.Helpers.TypeHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.TypeHelper.GetTypeDisplayName
  nameWithType: TypeHelper.GetTypeDisplayName
- uid: WeihanLi.Common.Helpers.ValidateHelper
  name: ValidateHelper
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: T:WeihanLi.Common.Helpers.ValidateHelper
  fullName: WeihanLi.Common.Helpers.ValidateHelper
  nameWithType: ValidateHelper
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsDate(System.String)
  name: IsDate(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsDate(System.String)
  name.vb: IsDate(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsDate(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsDate(String)
  nameWithType: ValidateHelper.IsDate(string?)
  nameWithType.vb: ValidateHelper.IsDate(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsDate*
  name: IsDate
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsDate
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsDate
  nameWithType: ValidateHelper.IsDate
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsEmail(System.String)
  name: IsEmail(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsEmail(System.String)
  name.vb: IsEmail(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsEmail(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsEmail(String)
  nameWithType: ValidateHelper.IsEmail(string?)
  nameWithType.vb: ValidateHelper.IsEmail(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsEmail*
  name: IsEmail
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsEmail
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsEmail
  nameWithType: ValidateHelper.IsEmail
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsIdCard(System.String)
  name: IsIdCard(string)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsIdCard(System.String)
  name.vb: IsIdCard(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsIdCard(string)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsIdCard(String)
  nameWithType: ValidateHelper.IsIdCard(string)
  nameWithType.vb: ValidateHelper.IsIdCard(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsIdCard*
  name: IsIdCard
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsIdCard
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsIdCard
  nameWithType: ValidateHelper.IsIdCard
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsIP(System.String)
  name: IsIP(string)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsIP(System.String)
  name.vb: IsIP(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsIP(string)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsIP(String)
  nameWithType: ValidateHelper.IsIP(string)
  nameWithType.vb: ValidateHelper.IsIP(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsIP*
  name: IsIP
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsIP
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsIP
  nameWithType: ValidateHelper.IsIP
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsMobile(System.String)
  name: IsMobile(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsMobile(System.String)
  name.vb: IsMobile(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsMobile(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsMobile(String)
  nameWithType: ValidateHelper.IsMobile(string?)
  nameWithType.vb: ValidateHelper.IsMobile(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsMobile*
  name: IsMobile
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsMobile
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsMobile
  nameWithType: ValidateHelper.IsMobile
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsNumeric(System.String)
  name: IsNumeric(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsNumeric(System.String)
  name.vb: IsNumeric(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsNumeric(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsNumeric(String)
  nameWithType: ValidateHelper.IsNumeric(string?)
  nameWithType.vb: ValidateHelper.IsNumeric(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsNumeric*
  name: IsNumeric
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsNumeric
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsNumeric
  nameWithType: ValidateHelper.IsNumeric
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsPhone(System.String)
  name: IsPhone(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsPhone(System.String)
  name.vb: IsPhone(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsPhone(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsPhone(String)
  nameWithType: ValidateHelper.IsPhone(string?)
  nameWithType.vb: ValidateHelper.IsPhone(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsPhone*
  name: IsPhone
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsPhone
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsPhone
  nameWithType: ValidateHelper.IsPhone
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsZipCode(System.String)
  name: IsZipCode(string?)
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: M:WeihanLi.Common.Helpers.ValidateHelper.IsZipCode(System.String)
  name.vb: IsZipCode(String)
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsZipCode(string?)
  fullName.vb: WeihanLi.Common.Helpers.ValidateHelper.IsZipCode(String)
  nameWithType: ValidateHelper.IsZipCode(string?)
  nameWithType.vb: ValidateHelper.IsZipCode(String)
- uid: WeihanLi.Common.Helpers.ValidateHelper.IsZipCode*
  name: IsZipCode
  href: api/WeihanLi.Common.Helpers.ValidateHelper.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValidateHelper.IsZipCode
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValidateHelper.IsZipCode
  nameWithType: ValidateHelper.IsZipCode
- uid: WeihanLi.Common.Helpers.ValueStopwatch
  name: ValueStopwatch
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: T:WeihanLi.Common.Helpers.ValueStopwatch
  fullName: WeihanLi.Common.Helpers.ValueStopwatch
  nameWithType: ValueStopwatch
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Elapsed
  name: Elapsed
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: P:WeihanLi.Common.Helpers.ValueStopwatch.Elapsed
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Elapsed
  nameWithType: ValueStopwatch.Elapsed
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Elapsed*
  name: Elapsed
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValueStopwatch.Elapsed
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Elapsed
  nameWithType: ValueStopwatch.Elapsed
- uid: WeihanLi.Common.Helpers.ValueStopwatch.IsRunning
  name: IsRunning
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: P:WeihanLi.Common.Helpers.ValueStopwatch.IsRunning
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.IsRunning
  nameWithType: ValueStopwatch.IsRunning
- uid: WeihanLi.Common.Helpers.ValueStopwatch.IsRunning*
  name: IsRunning
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValueStopwatch.IsRunning
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.IsRunning
  nameWithType: ValueStopwatch.IsRunning
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Restart
  name: Restart()
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: M:WeihanLi.Common.Helpers.ValueStopwatch.Restart
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Restart()
  nameWithType: ValueStopwatch.Restart()
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Restart*
  name: Restart
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValueStopwatch.Restart
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Restart
  nameWithType: ValueStopwatch.Restart
- uid: WeihanLi.Common.Helpers.ValueStopwatch.StartNew
  name: StartNew()
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: M:WeihanLi.Common.Helpers.ValueStopwatch.StartNew
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.StartNew()
  nameWithType: ValueStopwatch.StartNew()
- uid: WeihanLi.Common.Helpers.ValueStopwatch.StartNew*
  name: StartNew
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValueStopwatch.StartNew
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.StartNew
  nameWithType: ValueStopwatch.StartNew
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Stop
  name: Stop()
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: M:WeihanLi.Common.Helpers.ValueStopwatch.Stop
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Stop()
  nameWithType: ValueStopwatch.Stop()
- uid: WeihanLi.Common.Helpers.ValueStopwatch.Stop*
  name: Stop
  href: api/WeihanLi.Common.Helpers.ValueStopwatch.yml
  commentId: Overload:WeihanLi.Common.Helpers.ValueStopwatch.Stop
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.ValueStopwatch.Stop
  nameWithType: ValueStopwatch.Stop
- uid: WeihanLi.Common.Helpers.XmlDataSerializer
  name: XmlDataSerializer
  href: api/WeihanLi.Common.Helpers.XmlDataSerializer.yml
  commentId: T:WeihanLi.Common.Helpers.XmlDataSerializer
  fullName: WeihanLi.Common.Helpers.XmlDataSerializer
  nameWithType: XmlDataSerializer
- uid: WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize*
  name: Deserialize
  href: api/WeihanLi.Common.Helpers.XmlDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize
  nameWithType: XmlDataSerializer.Deserialize
- uid: WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize``1(System.Byte[])
  name: Deserialize<T>(byte[])
  href: api/WeihanLi.Common.Helpers.XmlDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize``1(System.Byte[])
  name.vb: Deserialize(Of T)(Byte())
  fullName: WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize<T>(byte[])
  fullName.vb: WeihanLi.Common.Helpers.XmlDataSerializer.Deserialize(Of T)(Byte())
  nameWithType: XmlDataSerializer.Deserialize<T>(byte[])
  nameWithType.vb: XmlDataSerializer.Deserialize(Of T)(Byte())
- uid: WeihanLi.Common.Helpers.XmlDataSerializer.Serialize*
  name: Serialize
  href: api/WeihanLi.Common.Helpers.XmlDataSerializer.yml
  commentId: Overload:WeihanLi.Common.Helpers.XmlDataSerializer.Serialize
  isSpec: "True"
  fullName: WeihanLi.Common.Helpers.XmlDataSerializer.Serialize
  nameWithType: XmlDataSerializer.Serialize
- uid: WeihanLi.Common.Helpers.XmlDataSerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/WeihanLi.Common.Helpers.XmlDataSerializer.yml
  commentId: M:WeihanLi.Common.Helpers.XmlDataSerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: WeihanLi.Common.Helpers.XmlDataSerializer.Serialize<T>(T)
  fullName.vb: WeihanLi.Common.Helpers.XmlDataSerializer.Serialize(Of T)(T)
  nameWithType: XmlDataSerializer.Serialize<T>(T)
  nameWithType.vb: XmlDataSerializer.Serialize(Of T)(T)
- uid: WeihanLi.Common.Http
  name: WeihanLi.Common.Http
  href: api/WeihanLi.Common.Http.yml
  commentId: N:WeihanLi.Common.Http
  fullName: WeihanLi.Common.Http
  nameWithType: WeihanLi.Common.Http
- uid: WeihanLi.Common.Http.HttpClientHttpRequester
  name: HttpClientHttpRequester
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: T:WeihanLi.Common.Http.HttpClientHttpRequester
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester
  nameWithType: HttpClientHttpRequester
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes
  name: ExecuteBytes()
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes()
  nameWithType: HttpClientHttpRequester.ExecuteBytes()
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes*
  name: ExecuteBytes
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytes
  nameWithType: HttpClientHttpRequester.ExecuteBytes
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync
  name: ExecuteBytesAsync()
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync()
  nameWithType: HttpClientHttpRequester.ExecuteBytesAsync()
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync*
  name: ExecuteBytesAsync
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteBytesAsync
  nameWithType: HttpClientHttpRequester.ExecuteBytesAsync
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse
  name: ExecuteForResponse()
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse()
  nameWithType: HttpClientHttpRequester.ExecuteForResponse()
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse*
  name: ExecuteForResponse
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponse
  nameWithType: HttpClientHttpRequester.ExecuteForResponse
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync
  name: ExecuteForResponseAsync()
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync()
  nameWithType: HttpClientHttpRequester.ExecuteForResponseAsync()
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync*
  name: ExecuteForResponseAsync
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.ExecuteForResponseAsync
  nameWithType: HttpClientHttpRequester.ExecuteForResponseAsync
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name: WithCookie(string?, Cookie)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name.vb: WithCookie(String, Cookie)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(string?, System.Net.Cookie)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(String, System.Net.Cookie)
  nameWithType: HttpClientHttpRequester.WithCookie(string?, Cookie)
  nameWithType.vb: HttpClientHttpRequester.WithCookie(String, Cookie)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name: WithCookie(string?, CookieCollection)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name.vb: WithCookie(String, CookieCollection)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(string?, System.Net.CookieCollection)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie(String, System.Net.CookieCollection)
  nameWithType: HttpClientHttpRequester.WithCookie(string?, CookieCollection)
  nameWithType.vb: HttpClientHttpRequester.WithCookie(String, CookieCollection)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie*
  name: WithCookie
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithCookie
  nameWithType: HttpClientHttpRequester.WithCookie
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithFile(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithFile(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientHttpRequester.WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientHttpRequester.WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithFile*
  name: WithFile
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithFile
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithFile
  nameWithType: HttpClientHttpRequester.WithFile
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Byte())), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientHttpRequester.WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientHttpRequester.WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles*
  name: WithFiles
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithFiles
  nameWithType: HttpClientHttpRequester.WithFiles
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithHeaders(IEnumerable<KeyValuePair<string, string?>>?)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string?>>?)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientHttpRequester.WithHeaders(IEnumerable<KeyValuePair<string, string?>>?)
  nameWithType.vb: HttpClientHttpRequester.WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders*
  name: WithHeaders
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithHeaders
  nameWithType: HttpClientHttpRequester.WithHeaders
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  name: WithMethod(HttpMethod)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  nameWithType: HttpClientHttpRequester.WithMethod(HttpMethod)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod*
  name: WithMethod
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithMethod
  nameWithType: HttpClientHttpRequester.WithMethod
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters(System.Byte[],System.String)
  name: WithParameters(byte[], string)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters(System.Byte[],System.String)
  name.vb: WithParameters(Byte(), String)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters(byte[], string)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters(Byte(), String)
  nameWithType: HttpClientHttpRequester.WithParameters(byte[], string)
  nameWithType.vb: HttpClientHttpRequester.WithParameters(Byte(), String)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters*
  name: WithParameters
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithParameters
  nameWithType: HttpClientHttpRequester.WithParameters
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy(System.Net.IWebProxy)
  name: WithProxy(IWebProxy)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy(System.Net.IWebProxy)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy(System.Net.IWebProxy)
  nameWithType: HttpClientHttpRequester.WithProxy(IWebProxy)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy*
  name: WithProxy
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithProxy
  nameWithType: HttpClientHttpRequester.WithProxy
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer(System.String)
  name: WithReferer(string)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer(System.String)
  name.vb: WithReferer(String)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer(string)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer(String)
  nameWithType: HttpClientHttpRequester.WithReferer(string)
  nameWithType.vb: HttpClientHttpRequester.WithReferer(String)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer*
  name: WithReferer
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithReferer
  nameWithType: HttpClientHttpRequester.WithReferer
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl(System.String)
  name: WithUrl(string)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl(System.String)
  name.vb: WithUrl(String)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl(string)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl(String)
  nameWithType: HttpClientHttpRequester.WithUrl(string)
  nameWithType.vb: HttpClientHttpRequester.WithUrl(String)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl*
  name: WithUrl
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithUrl
  nameWithType: HttpClientHttpRequester.WithUrl
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent(System.String)
  name: WithUserAgent(string)
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent(System.String)
  name.vb: WithUserAgent(String)
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent(string)
  fullName.vb: WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent(String)
  nameWithType: HttpClientHttpRequester.WithUserAgent(string)
  nameWithType.vb: HttpClientHttpRequester.WithUserAgent(String)
- uid: WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent*
  name: WithUserAgent
  href: api/WeihanLi.Common.Http.HttpClientHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpClientHttpRequester.WithUserAgent
  nameWithType: HttpClientHttpRequester.WithUserAgent
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames
  name: HttpKnownHeaderNames
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: T:WeihanLi.Common.Http.HttpKnownHeaderNames
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames
  nameWithType: HttpKnownHeaderNames
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Accept
  name: Accept
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Accept
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Accept
  nameWithType: HttpKnownHeaderNames.Accept
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptCharset
  name: AcceptCharset
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptCharset
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptCharset
  nameWithType: HttpKnownHeaderNames.AcceptCharset
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptEncoding
  name: AcceptEncoding
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptEncoding
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptEncoding
  nameWithType: HttpKnownHeaderNames.AcceptEncoding
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptLanguage
  name: AcceptLanguage
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptLanguage
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptLanguage
  nameWithType: HttpKnownHeaderNames.AcceptLanguage
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptPatch
  name: AcceptPatch
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptPatch
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptPatch
  nameWithType: HttpKnownHeaderNames.AcceptPatch
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptRanges
  name: AcceptRanges
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptRanges
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AcceptRanges
  nameWithType: HttpKnownHeaderNames.AcceptRanges
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowCredentials
  name: AccessControlAllowCredentials
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowCredentials
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowCredentials
  nameWithType: HttpKnownHeaderNames.AccessControlAllowCredentials
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowHeaders
  name: AccessControlAllowHeaders
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowHeaders
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowHeaders
  nameWithType: HttpKnownHeaderNames.AccessControlAllowHeaders
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowMethods
  name: AccessControlAllowMethods
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowMethods
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowMethods
  nameWithType: HttpKnownHeaderNames.AccessControlAllowMethods
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowOrigin
  name: AccessControlAllowOrigin
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowOrigin
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlAllowOrigin
  nameWithType: HttpKnownHeaderNames.AccessControlAllowOrigin
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlExposeHeaders
  name: AccessControlExposeHeaders
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlExposeHeaders
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlExposeHeaders
  nameWithType: HttpKnownHeaderNames.AccessControlExposeHeaders
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlMaxAge
  name: AccessControlMaxAge
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlMaxAge
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AccessControlMaxAge
  nameWithType: HttpKnownHeaderNames.AccessControlMaxAge
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Age
  name: Age
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Age
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Age
  nameWithType: HttpKnownHeaderNames.Age
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Allow
  name: Allow
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Allow
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Allow
  nameWithType: HttpKnownHeaderNames.Allow
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.AltSvc
  name: AltSvc
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.AltSvc
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.AltSvc
  nameWithType: HttpKnownHeaderNames.AltSvc
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Authorization
  name: Authorization
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Authorization
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Authorization
  nameWithType: HttpKnownHeaderNames.Authorization
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.CacheControl
  name: CacheControl
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.CacheControl
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.CacheControl
  nameWithType: HttpKnownHeaderNames.CacheControl
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Connection
  name: Connection
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Connection
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Connection
  nameWithType: HttpKnownHeaderNames.Connection
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentDisposition
  name: ContentDisposition
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentDisposition
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentDisposition
  nameWithType: HttpKnownHeaderNames.ContentDisposition
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentEncoding
  name: ContentEncoding
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentEncoding
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentEncoding
  nameWithType: HttpKnownHeaderNames.ContentEncoding
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLanguage
  name: ContentLanguage
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLanguage
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLanguage
  nameWithType: HttpKnownHeaderNames.ContentLanguage
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLength
  name: ContentLength
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLength
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLength
  nameWithType: HttpKnownHeaderNames.ContentLength
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLocation
  name: ContentLocation
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLocation
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentLocation
  nameWithType: HttpKnownHeaderNames.ContentLocation
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentMD5
  name: ContentMD5
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentMD5
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentMD5
  nameWithType: HttpKnownHeaderNames.ContentMD5
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentRange
  name: ContentRange
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentRange
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentRange
  nameWithType: HttpKnownHeaderNames.ContentRange
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentSecurityPolicy
  name: ContentSecurityPolicy
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentSecurityPolicy
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentSecurityPolicy
  nameWithType: HttpKnownHeaderNames.ContentSecurityPolicy
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentType
  name: ContentType
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ContentType
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ContentType
  nameWithType: HttpKnownHeaderNames.ContentType
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie
  name: Cookie
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie
  nameWithType: HttpKnownHeaderNames.Cookie
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie2
  name: Cookie2
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie2
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Cookie2
  nameWithType: HttpKnownHeaderNames.Cookie2
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Date
  name: Date
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Date
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Date
  nameWithType: HttpKnownHeaderNames.Date
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ETag
  name: ETag
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ETag
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ETag
  nameWithType: HttpKnownHeaderNames.ETag
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Expect
  name: Expect
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Expect
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Expect
  nameWithType: HttpKnownHeaderNames.Expect
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Expires
  name: Expires
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Expires
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Expires
  nameWithType: HttpKnownHeaderNames.Expires
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.From
  name: From
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.From
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.From
  nameWithType: HttpKnownHeaderNames.From
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Host
  name: Host
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Host
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Host
  nameWithType: HttpKnownHeaderNames.Host
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.IfMatch
  name: IfMatch
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.IfMatch
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.IfMatch
  nameWithType: HttpKnownHeaderNames.IfMatch
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.IfModifiedSince
  name: IfModifiedSince
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.IfModifiedSince
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.IfModifiedSince
  nameWithType: HttpKnownHeaderNames.IfModifiedSince
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.IfNoneMatch
  name: IfNoneMatch
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.IfNoneMatch
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.IfNoneMatch
  nameWithType: HttpKnownHeaderNames.IfNoneMatch
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.IfRange
  name: IfRange
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.IfRange
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.IfRange
  nameWithType: HttpKnownHeaderNames.IfRange
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.IfUnmodifiedSince
  name: IfUnmodifiedSince
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.IfUnmodifiedSince
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.IfUnmodifiedSince
  nameWithType: HttpKnownHeaderNames.IfUnmodifiedSince
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.KeepAlive
  name: KeepAlive
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.KeepAlive
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.KeepAlive
  nameWithType: HttpKnownHeaderNames.KeepAlive
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.LastModified
  name: LastModified
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.LastModified
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.LastModified
  nameWithType: HttpKnownHeaderNames.LastModified
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Link
  name: Link
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Link
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Link
  nameWithType: HttpKnownHeaderNames.Link
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Location
  name: Location
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Location
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Location
  nameWithType: HttpKnownHeaderNames.Location
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.MaxForwards
  name: MaxForwards
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.MaxForwards
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.MaxForwards
  nameWithType: HttpKnownHeaderNames.MaxForwards
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Origin
  name: Origin
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Origin
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Origin
  nameWithType: HttpKnownHeaderNames.Origin
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.P3P
  name: P3P
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.P3P
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.P3P
  nameWithType: HttpKnownHeaderNames.P3P
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Pragma
  name: Pragma
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Pragma
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Pragma
  nameWithType: HttpKnownHeaderNames.Pragma
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthenticate
  name: ProxyAuthenticate
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthenticate
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthenticate
  nameWithType: HttpKnownHeaderNames.ProxyAuthenticate
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthorization
  name: ProxyAuthorization
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthorization
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyAuthorization
  nameWithType: HttpKnownHeaderNames.ProxyAuthorization
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyConnection
  name: ProxyConnection
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyConnection
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.ProxyConnection
  nameWithType: HttpKnownHeaderNames.ProxyConnection
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.PublicKeyPins
  name: PublicKeyPins
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.PublicKeyPins
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.PublicKeyPins
  nameWithType: HttpKnownHeaderNames.PublicKeyPins
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Range
  name: Range
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Range
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Range
  nameWithType: HttpKnownHeaderNames.Range
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Referer
  name: Referer
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Referer
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Referer
  nameWithType: HttpKnownHeaderNames.Referer
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.RetryAfter
  name: RetryAfter
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.RetryAfter
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.RetryAfter
  nameWithType: HttpKnownHeaderNames.RetryAfter
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketAccept
  name: SecWebSocketAccept
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketAccept
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketAccept
  nameWithType: HttpKnownHeaderNames.SecWebSocketAccept
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketExtensions
  name: SecWebSocketExtensions
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketExtensions
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketExtensions
  nameWithType: HttpKnownHeaderNames.SecWebSocketExtensions
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketKey
  name: SecWebSocketKey
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketKey
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketKey
  nameWithType: HttpKnownHeaderNames.SecWebSocketKey
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketProtocol
  name: SecWebSocketProtocol
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketProtocol
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketProtocol
  nameWithType: HttpKnownHeaderNames.SecWebSocketProtocol
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketVersion
  name: SecWebSocketVersion
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketVersion
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SecWebSocketVersion
  nameWithType: HttpKnownHeaderNames.SecWebSocketVersion
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Server
  name: Server
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Server
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Server
  nameWithType: HttpKnownHeaderNames.Server
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie
  name: SetCookie
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie
  nameWithType: HttpKnownHeaderNames.SetCookie
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie2
  name: SetCookie2
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie2
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.SetCookie2
  nameWithType: HttpKnownHeaderNames.SetCookie2
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.StrictTransportSecurity
  name: StrictTransportSecurity
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.StrictTransportSecurity
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.StrictTransportSecurity
  nameWithType: HttpKnownHeaderNames.StrictTransportSecurity
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.TE
  name: TE
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.TE
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.TE
  nameWithType: HttpKnownHeaderNames.TE
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Trailer
  name: Trailer
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Trailer
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Trailer
  nameWithType: HttpKnownHeaderNames.Trailer
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.TransferEncoding
  name: TransferEncoding
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.TransferEncoding
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.TransferEncoding
  nameWithType: HttpKnownHeaderNames.TransferEncoding
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.TSV
  name: TSV
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.TSV
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.TSV
  nameWithType: HttpKnownHeaderNames.TSV
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Upgrade
  name: Upgrade
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Upgrade
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Upgrade
  nameWithType: HttpKnownHeaderNames.Upgrade
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.UpgradeInsecureRequests
  name: UpgradeInsecureRequests
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.UpgradeInsecureRequests
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.UpgradeInsecureRequests
  nameWithType: HttpKnownHeaderNames.UpgradeInsecureRequests
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.UserAgent
  name: UserAgent
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.UserAgent
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.UserAgent
  nameWithType: HttpKnownHeaderNames.UserAgent
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Vary
  name: Vary
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Vary
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Vary
  nameWithType: HttpKnownHeaderNames.Vary
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Via
  name: Via
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Via
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Via
  nameWithType: HttpKnownHeaderNames.Via
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.Warning
  name: Warning
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.Warning
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.Warning
  nameWithType: HttpKnownHeaderNames.Warning
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.WWWAuthenticate
  name: WWWAuthenticate
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.WWWAuthenticate
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.WWWAuthenticate
  nameWithType: HttpKnownHeaderNames.WWWAuthenticate
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XAspNetVersion
  name: XAspNetVersion
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XAspNetVersion
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XAspNetVersion
  nameWithType: HttpKnownHeaderNames.XAspNetVersion
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XContentDuration
  name: XContentDuration
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XContentDuration
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XContentDuration
  nameWithType: HttpKnownHeaderNames.XContentDuration
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XContentTypeOptions
  name: XContentTypeOptions
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XContentTypeOptions
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XContentTypeOptions
  nameWithType: HttpKnownHeaderNames.XContentTypeOptions
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XFrameOptions
  name: XFrameOptions
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XFrameOptions
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XFrameOptions
  nameWithType: HttpKnownHeaderNames.XFrameOptions
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XMSEdgeRef
  name: XMSEdgeRef
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XMSEdgeRef
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XMSEdgeRef
  nameWithType: HttpKnownHeaderNames.XMSEdgeRef
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XPoweredBy
  name: XPoweredBy
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XPoweredBy
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XPoweredBy
  nameWithType: HttpKnownHeaderNames.XPoweredBy
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XRequestID
  name: XRequestID
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XRequestID
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XRequestID
  nameWithType: HttpKnownHeaderNames.XRequestID
- uid: WeihanLi.Common.Http.HttpKnownHeaderNames.XUACompatible
  name: XUACompatible
  href: api/WeihanLi.Common.Http.HttpKnownHeaderNames.yml
  commentId: F:WeihanLi.Common.Http.HttpKnownHeaderNames.XUACompatible
  fullName: WeihanLi.Common.Http.HttpKnownHeaderNames.XUACompatible
  nameWithType: HttpKnownHeaderNames.XUACompatible
- uid: WeihanLi.Common.Http.HttpResponse
  name: HttpResponse
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: T:WeihanLi.Common.Http.HttpResponse
  fullName: WeihanLi.Common.Http.HttpResponse
  nameWithType: HttpResponse
- uid: WeihanLi.Common.Http.HttpResponse.Headers
  name: Headers
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: P:WeihanLi.Common.Http.HttpResponse.Headers
  fullName: WeihanLi.Common.Http.HttpResponse.Headers
  nameWithType: HttpResponse.Headers
- uid: WeihanLi.Common.Http.HttpResponse.Headers*
  name: Headers
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: Overload:WeihanLi.Common.Http.HttpResponse.Headers
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpResponse.Headers
  nameWithType: HttpResponse.Headers
- uid: WeihanLi.Common.Http.HttpResponse.ResponseBytes
  name: ResponseBytes
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: P:WeihanLi.Common.Http.HttpResponse.ResponseBytes
  fullName: WeihanLi.Common.Http.HttpResponse.ResponseBytes
  nameWithType: HttpResponse.ResponseBytes
- uid: WeihanLi.Common.Http.HttpResponse.ResponseBytes*
  name: ResponseBytes
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: Overload:WeihanLi.Common.Http.HttpResponse.ResponseBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpResponse.ResponseBytes
  nameWithType: HttpResponse.ResponseBytes
- uid: WeihanLi.Common.Http.HttpResponse.StatusCode
  name: StatusCode
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: P:WeihanLi.Common.Http.HttpResponse.StatusCode
  fullName: WeihanLi.Common.Http.HttpResponse.StatusCode
  nameWithType: HttpResponse.StatusCode
- uid: WeihanLi.Common.Http.HttpResponse.StatusCode*
  name: StatusCode
  href: api/WeihanLi.Common.Http.HttpResponse.yml
  commentId: Overload:WeihanLi.Common.Http.HttpResponse.StatusCode
  isSpec: "True"
  fullName: WeihanLi.Common.Http.HttpResponse.StatusCode
  nameWithType: HttpResponse.StatusCode
- uid: WeihanLi.Common.Http.IHttpRequester
  name: IHttpRequester
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: T:WeihanLi.Common.Http.IHttpRequester
  fullName: WeihanLi.Common.Http.IHttpRequester
  nameWithType: IHttpRequester
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteBytes
  name: ExecuteBytes()
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.ExecuteBytes
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteBytes()
  nameWithType: IHttpRequester.ExecuteBytes()
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteBytes*
  name: ExecuteBytes
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.ExecuteBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteBytes
  nameWithType: IHttpRequester.ExecuteBytes
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync
  name: ExecuteBytesAsync()
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync()
  nameWithType: IHttpRequester.ExecuteBytesAsync()
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync*
  name: ExecuteBytesAsync
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteBytesAsync
  nameWithType: IHttpRequester.ExecuteBytesAsync
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse
  name: ExecuteForResponse()
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse()
  nameWithType: IHttpRequester.ExecuteForResponse()
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse*
  name: ExecuteForResponse
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponse
  nameWithType: IHttpRequester.ExecuteForResponse
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync
  name: ExecuteForResponseAsync()
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync()
  nameWithType: IHttpRequester.ExecuteForResponseAsync()
- uid: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync*
  name: ExecuteForResponseAsync
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.ExecuteForResponseAsync
  nameWithType: IHttpRequester.ExecuteForResponseAsync
- uid: WeihanLi.Common.Http.IHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name: WithCookie(string?, Cookie)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name.vb: WithCookie(String, Cookie)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithCookie(string?, System.Net.Cookie)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithCookie(String, System.Net.Cookie)
  nameWithType: IHttpRequester.WithCookie(string?, Cookie)
  nameWithType.vb: IHttpRequester.WithCookie(String, Cookie)
- uid: WeihanLi.Common.Http.IHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name: WithCookie(string?, CookieCollection)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name.vb: WithCookie(String, CookieCollection)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithCookie(string?, System.Net.CookieCollection)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithCookie(String, System.Net.CookieCollection)
  nameWithType: IHttpRequester.WithCookie(string?, CookieCollection)
  nameWithType.vb: IHttpRequester.WithCookie(String, CookieCollection)
- uid: WeihanLi.Common.Http.IHttpRequester.WithCookie*
  name: WithCookie
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithCookie
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithCookie
  nameWithType: IHttpRequester.WithCookie
- uid: WeihanLi.Common.Http.IHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.IHttpRequester.WithFile(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithFile(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: IHttpRequester.WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: IHttpRequester.WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.IHttpRequester.WithFile*
  name: WithFile
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithFile
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithFile
  nameWithType: IHttpRequester.WithFile
- uid: WeihanLi.Common.Http.IHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.IHttpRequester.WithFiles(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithFiles(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Byte())), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: IHttpRequester.WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: IHttpRequester.WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.IHttpRequester.WithFiles*
  name: WithFiles
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithFiles
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithFiles
  nameWithType: IHttpRequester.WithFiles
- uid: WeihanLi.Common.Http.IHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithHeaders(IEnumerable<KeyValuePair<string, string?>>)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.IHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string?>>)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: IHttpRequester.WithHeaders(IEnumerable<KeyValuePair<string, string?>>)
  nameWithType.vb: IHttpRequester.WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.IHttpRequester.WithHeaders*
  name: WithHeaders
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithHeaders
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithHeaders
  nameWithType: IHttpRequester.WithHeaders
- uid: WeihanLi.Common.Http.IHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  name: WithMethod(HttpMethod)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  nameWithType: IHttpRequester.WithMethod(HttpMethod)
- uid: WeihanLi.Common.Http.IHttpRequester.WithMethod*
  name: WithMethod
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithMethod
  nameWithType: IHttpRequester.WithMethod
- uid: WeihanLi.Common.Http.IHttpRequester.WithParameters(System.Byte[],System.String)
  name: WithParameters(byte[], string)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithParameters(System.Byte[],System.String)
  name.vb: WithParameters(Byte(), String)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithParameters(byte[], string)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithParameters(Byte(), String)
  nameWithType: IHttpRequester.WithParameters(byte[], string)
  nameWithType.vb: IHttpRequester.WithParameters(Byte(), String)
- uid: WeihanLi.Common.Http.IHttpRequester.WithParameters*
  name: WithParameters
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithParameters
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithParameters
  nameWithType: IHttpRequester.WithParameters
- uid: WeihanLi.Common.Http.IHttpRequester.WithProxy(System.Net.IWebProxy)
  name: WithProxy(IWebProxy)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithProxy(System.Net.IWebProxy)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithProxy(System.Net.IWebProxy)
  nameWithType: IHttpRequester.WithProxy(IWebProxy)
- uid: WeihanLi.Common.Http.IHttpRequester.WithProxy*
  name: WithProxy
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithProxy
  nameWithType: IHttpRequester.WithProxy
- uid: WeihanLi.Common.Http.IHttpRequester.WithReferer(System.String)
  name: WithReferer(string)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithReferer(System.String)
  name.vb: WithReferer(String)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithReferer(string)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithReferer(String)
  nameWithType: IHttpRequester.WithReferer(string)
  nameWithType.vb: IHttpRequester.WithReferer(String)
- uid: WeihanLi.Common.Http.IHttpRequester.WithReferer*
  name: WithReferer
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithReferer
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithReferer
  nameWithType: IHttpRequester.WithReferer
- uid: WeihanLi.Common.Http.IHttpRequester.WithUrl(System.String)
  name: WithUrl(string)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithUrl(System.String)
  name.vb: WithUrl(String)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithUrl(string)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithUrl(String)
  nameWithType: IHttpRequester.WithUrl(string)
  nameWithType.vb: IHttpRequester.WithUrl(String)
- uid: WeihanLi.Common.Http.IHttpRequester.WithUrl*
  name: WithUrl
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithUrl
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithUrl
  nameWithType: IHttpRequester.WithUrl
- uid: WeihanLi.Common.Http.IHttpRequester.WithUserAgent(System.String)
  name: WithUserAgent(string)
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.IHttpRequester.WithUserAgent(System.String)
  name.vb: WithUserAgent(String)
  fullName: WeihanLi.Common.Http.IHttpRequester.WithUserAgent(string)
  fullName.vb: WeihanLi.Common.Http.IHttpRequester.WithUserAgent(String)
  nameWithType: IHttpRequester.WithUserAgent(string)
  nameWithType.vb: IHttpRequester.WithUserAgent(String)
- uid: WeihanLi.Common.Http.IHttpRequester.WithUserAgent*
  name: WithUserAgent
  href: api/WeihanLi.Common.Http.IHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.IHttpRequester.WithUserAgent
  isSpec: "True"
  fullName: WeihanLi.Common.Http.IHttpRequester.WithUserAgent
  nameWithType: IHttpRequester.WithUserAgent
- uid: WeihanLi.Common.Http.JsonHttpContent
  name: JsonHttpContent
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: T:WeihanLi.Common.Http.JsonHttpContent
  fullName: WeihanLi.Common.Http.JsonHttpContent
  nameWithType: JsonHttpContent
- uid: WeihanLi.Common.Http.JsonHttpContent.#ctor(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name: JsonHttpContent(object, JsonSerializerSettings?)
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: M:WeihanLi.Common.Http.JsonHttpContent.#ctor(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name.vb: New(Object, JsonSerializerSettings)
  fullName: WeihanLi.Common.Http.JsonHttpContent.JsonHttpContent(object, Newtonsoft.Json.JsonSerializerSettings?)
  fullName.vb: WeihanLi.Common.Http.JsonHttpContent.New(Object, Newtonsoft.Json.JsonSerializerSettings)
  nameWithType: JsonHttpContent.JsonHttpContent(object, JsonSerializerSettings?)
  nameWithType.vb: JsonHttpContent.New(Object, JsonSerializerSettings)
- uid: WeihanLi.Common.Http.JsonHttpContent.#ctor(System.String,System.Text.Encoding)
  name: JsonHttpContent(string, Encoding)
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: M:WeihanLi.Common.Http.JsonHttpContent.#ctor(System.String,System.Text.Encoding)
  name.vb: New(String, Encoding)
  fullName: WeihanLi.Common.Http.JsonHttpContent.JsonHttpContent(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Common.Http.JsonHttpContent.New(String, System.Text.Encoding)
  nameWithType: JsonHttpContent.JsonHttpContent(string, Encoding)
  nameWithType.vb: JsonHttpContent.New(String, Encoding)
- uid: WeihanLi.Common.Http.JsonHttpContent.#ctor(System.String)
  name: JsonHttpContent(string)
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: M:WeihanLi.Common.Http.JsonHttpContent.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Http.JsonHttpContent.JsonHttpContent(string)
  fullName.vb: WeihanLi.Common.Http.JsonHttpContent.New(String)
  nameWithType: JsonHttpContent.JsonHttpContent(string)
  nameWithType.vb: JsonHttpContent.New(String)
- uid: WeihanLi.Common.Http.JsonHttpContent.#ctor*
  name: JsonHttpContent
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: Overload:WeihanLi.Common.Http.JsonHttpContent.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Http.JsonHttpContent.JsonHttpContent
  fullName.vb: WeihanLi.Common.Http.JsonHttpContent.New
  nameWithType: JsonHttpContent.JsonHttpContent
  nameWithType.vb: JsonHttpContent.New
- uid: WeihanLi.Common.Http.JsonHttpContent.From(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name: From(object?, JsonSerializerSettings?)
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: M:WeihanLi.Common.Http.JsonHttpContent.From(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name.vb: From(Object, JsonSerializerSettings)
  fullName: WeihanLi.Common.Http.JsonHttpContent.From(object?, Newtonsoft.Json.JsonSerializerSettings?)
  fullName.vb: WeihanLi.Common.Http.JsonHttpContent.From(Object, Newtonsoft.Json.JsonSerializerSettings)
  nameWithType: JsonHttpContent.From(object?, JsonSerializerSettings?)
  nameWithType.vb: JsonHttpContent.From(Object, JsonSerializerSettings)
- uid: WeihanLi.Common.Http.JsonHttpContent.From*
  name: From
  href: api/WeihanLi.Common.Http.JsonHttpContent.yml
  commentId: Overload:WeihanLi.Common.Http.JsonHttpContent.From
  isSpec: "True"
  fullName: WeihanLi.Common.Http.JsonHttpContent.From
  nameWithType: JsonHttpContent.From
- uid: WeihanLi.Common.Http.MockHttpHandler
  name: MockHttpHandler
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: T:WeihanLi.Common.Http.MockHttpHandler
  fullName: WeihanLi.Common.Http.MockHttpHandler
  nameWithType: MockHttpHandler
- uid: WeihanLi.Common.Http.MockHttpHandler.#ctor
  name: MockHttpHandler()
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Http.MockHttpHandler.MockHttpHandler()
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.New()
  nameWithType: MockHttpHandler.MockHttpHandler()
  nameWithType.vb: MockHttpHandler.New()
- uid: WeihanLi.Common.Http.MockHttpHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage})
  name: MockHttpHandler(Func<HttpRequestMessage, HttpResponseMessage>)
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage})
  name.vb: New(Func(Of HttpRequestMessage, HttpResponseMessage))
  fullName: WeihanLi.Common.Http.MockHttpHandler.MockHttpHandler(System.Func<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage>)
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.New(System.Func(Of System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage))
  nameWithType: MockHttpHandler.MockHttpHandler(Func<HttpRequestMessage, HttpResponseMessage>)
  nameWithType.vb: MockHttpHandler.New(Func(Of HttpRequestMessage, HttpResponseMessage))
- uid: WeihanLi.Common.Http.MockHttpHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})
  name: MockHttpHandler(Func<HttpRequestMessage, Task<HttpResponseMessage>>)
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})
  name.vb: New(Func(Of HttpRequestMessage, Task(Of HttpResponseMessage)))
  fullName: WeihanLi.Common.Http.MockHttpHandler.MockHttpHandler(System.Func<System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>>)
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.New(System.Func(Of System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)))
  nameWithType: MockHttpHandler.MockHttpHandler(Func<HttpRequestMessage, Task<HttpResponseMessage>>)
  nameWithType.vb: MockHttpHandler.New(Func(Of HttpRequestMessage, Task(Of HttpResponseMessage)))
- uid: WeihanLi.Common.Http.MockHttpHandler.#ctor*
  name: MockHttpHandler
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: Overload:WeihanLi.Common.Http.MockHttpHandler.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Http.MockHttpHandler.MockHttpHandler
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.New
  nameWithType: MockHttpHandler.MockHttpHandler
  nameWithType.vb: MockHttpHandler.New
- uid: WeihanLi.Common.Http.MockHttpHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  name: SendAsync(HttpRequestMessage, CancellationToken)
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  fullName: WeihanLi.Common.Http.MockHttpHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  nameWithType: MockHttpHandler.SendAsync(HttpRequestMessage, CancellationToken)
- uid: WeihanLi.Common.Http.MockHttpHandler.SendAsync*
  name: SendAsync
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: Overload:WeihanLi.Common.Http.MockHttpHandler.SendAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.MockHttpHandler.SendAsync
  nameWithType: MockHttpHandler.SendAsync
- uid: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage})
  name: SetResponseFactory(Func<HttpRequestMessage, HttpResponseMessage>)
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func{System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage})
  name.vb: SetResponseFactory(Func(Of HttpRequestMessage, HttpResponseMessage))
  fullName: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage>)
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func(Of System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage))
  nameWithType: MockHttpHandler.SetResponseFactory(Func<HttpRequestMessage, HttpResponseMessage>)
  nameWithType.vb: MockHttpHandler.SetResponseFactory(Func(Of HttpRequestMessage, HttpResponseMessage))
- uid: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})
  name: SetResponseFactory(Func<HttpRequestMessage, Task<HttpResponseMessage>>)
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: M:WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})
  name.vb: SetResponseFactory(Func(Of HttpRequestMessage, Task(Of HttpResponseMessage)))
  fullName: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func<System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>>)
  fullName.vb: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory(System.Func(Of System.Net.Http.HttpRequestMessage, System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)))
  nameWithType: MockHttpHandler.SetResponseFactory(Func<HttpRequestMessage, Task<HttpResponseMessage>>)
  nameWithType.vb: MockHttpHandler.SetResponseFactory(Func(Of HttpRequestMessage, Task(Of HttpResponseMessage)))
- uid: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory*
  name: SetResponseFactory
  href: api/WeihanLi.Common.Http.MockHttpHandler.yml
  commentId: Overload:WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory
  isSpec: "True"
  fullName: WeihanLi.Common.Http.MockHttpHandler.SetResponseFactory
  nameWithType: MockHttpHandler.SetResponseFactory
- uid: WeihanLi.Common.Http.NoProxyHttpClientHandler
  name: NoProxyHttpClientHandler
  href: api/WeihanLi.Common.Http.NoProxyHttpClientHandler.yml
  commentId: T:WeihanLi.Common.Http.NoProxyHttpClientHandler
  fullName: WeihanLi.Common.Http.NoProxyHttpClientHandler
  nameWithType: NoProxyHttpClientHandler
- uid: WeihanLi.Common.Http.NoProxyHttpClientHandler.#ctor
  name: NoProxyHttpClientHandler()
  href: api/WeihanLi.Common.Http.NoProxyHttpClientHandler.yml
  commentId: M:WeihanLi.Common.Http.NoProxyHttpClientHandler.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Http.NoProxyHttpClientHandler.NoProxyHttpClientHandler()
  fullName.vb: WeihanLi.Common.Http.NoProxyHttpClientHandler.New()
  nameWithType: NoProxyHttpClientHandler.NoProxyHttpClientHandler()
  nameWithType.vb: NoProxyHttpClientHandler.New()
- uid: WeihanLi.Common.Http.NoProxyHttpClientHandler.#ctor*
  name: NoProxyHttpClientHandler
  href: api/WeihanLi.Common.Http.NoProxyHttpClientHandler.yml
  commentId: Overload:WeihanLi.Common.Http.NoProxyHttpClientHandler.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Http.NoProxyHttpClientHandler.NoProxyHttpClientHandler
  fullName.vb: WeihanLi.Common.Http.NoProxyHttpClientHandler.New
  nameWithType: NoProxyHttpClientHandler.NoProxyHttpClientHandler
  nameWithType.vb: NoProxyHttpClientHandler.New
- uid: WeihanLi.Common.Http.WebRequestHttpRequester
  name: WebRequestHttpRequester
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: T:WeihanLi.Common.Http.WebRequestHttpRequester
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester
  nameWithType: WebRequestHttpRequester
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.#ctor
  name: WebRequestHttpRequester()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WebRequestHttpRequester()
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.New()
  nameWithType: WebRequestHttpRequester.WebRequestHttpRequester()
  nameWithType.vb: WebRequestHttpRequester.New()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.Http.HttpMethod)
  name: WebRequestHttpRequester(string, IDictionary<string, string>?, HttpMethod)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.Http.HttpMethod)
  name.vb: New(String, IDictionary(Of String, String), HttpMethod)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WebRequestHttpRequester(string, System.Collections.Generic.IDictionary<string, string>?, System.Net.Http.HttpMethod)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.New(String, System.Collections.Generic.IDictionary(Of String, String), System.Net.Http.HttpMethod)
  nameWithType: WebRequestHttpRequester.WebRequestHttpRequester(string, IDictionary<string, string>?, HttpMethod)
  nameWithType.vb: WebRequestHttpRequester.New(String, IDictionary(Of String, String), HttpMethod)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String,System.Net.Http.HttpMethod)
  name: WebRequestHttpRequester(string, HttpMethod)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String,System.Net.Http.HttpMethod)
  name.vb: New(String, HttpMethod)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WebRequestHttpRequester(string, System.Net.Http.HttpMethod)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.New(String, System.Net.Http.HttpMethod)
  nameWithType: WebRequestHttpRequester.WebRequestHttpRequester(string, HttpMethod)
  nameWithType.vb: WebRequestHttpRequester.New(String, HttpMethod)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String)
  name: WebRequestHttpRequester(string)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WebRequestHttpRequester(string)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.New(String)
  nameWithType: WebRequestHttpRequester.WebRequestHttpRequester(string)
  nameWithType.vb: WebRequestHttpRequester.New(String)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.#ctor*
  name: WebRequestHttpRequester
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WebRequestHttpRequester
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.New
  nameWithType: WebRequestHttpRequester.WebRequestHttpRequester
  nameWithType.vb: WebRequestHttpRequester.New
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync
  name: ExecuteAsync()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync()
  nameWithType: WebRequestHttpRequester.ExecuteAsync()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteAsync
  nameWithType: WebRequestHttpRequester.ExecuteAsync
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes
  name: ExecuteBytes()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes()
  nameWithType: WebRequestHttpRequester.ExecuteBytes()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes*
  name: ExecuteBytes
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytes
  nameWithType: WebRequestHttpRequester.ExecuteBytes
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync
  name: ExecuteBytesAsync()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync()
  nameWithType: WebRequestHttpRequester.ExecuteBytesAsync()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync*
  name: ExecuteBytesAsync
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteBytesAsync
  nameWithType: WebRequestHttpRequester.ExecuteBytesAsync
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse
  name: ExecuteForResponse()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse()
  nameWithType: WebRequestHttpRequester.ExecuteForResponse()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse*
  name: ExecuteForResponse
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponse
  nameWithType: WebRequestHttpRequester.ExecuteForResponse
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync
  name: ExecuteForResponseAsync()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync()
  nameWithType: WebRequestHttpRequester.ExecuteForResponseAsync()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync*
  name: ExecuteForResponseAsync
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.ExecuteForResponseAsync
  nameWithType: WebRequestHttpRequester.ExecuteForResponseAsync
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.New
  name: New()
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.New
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.New()
  nameWithType: WebRequestHttpRequester.New()
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.New*
  name: New
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.New
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.New
  nameWithType: WebRequestHttpRequester.New
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name: WithCookie(string?, Cookie)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(System.String,System.Net.Cookie)
  name.vb: WithCookie(String, Cookie)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(string?, System.Net.Cookie)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(String, System.Net.Cookie)
  nameWithType: WebRequestHttpRequester.WithCookie(string?, Cookie)
  nameWithType.vb: WebRequestHttpRequester.WithCookie(String, Cookie)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name: WithCookie(string?, CookieCollection)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(System.String,System.Net.CookieCollection)
  name.vb: WithCookie(String, CookieCollection)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(string?, System.Net.CookieCollection)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie(String, System.Net.CookieCollection)
  nameWithType: WebRequestHttpRequester.WithCookie(string?, CookieCollection)
  nameWithType.vb: WebRequestHttpRequester.WithCookie(String, CookieCollection)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie*
  name: WithCookie
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithCookie
  nameWithType: WebRequestHttpRequester.WithCookie
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(System.String,System.Byte[],System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(string, byte[], string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(String, Byte(), String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: WebRequestHttpRequester.WithFile(string, byte[], string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: WebRequestHttpRequester.WithFile(String, Byte(), String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFile(string, string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFile(String, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile(String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: WebRequestHttpRequester.WithFile(string, string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: WebRequestHttpRequester.WithFile(String, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile*
  name: WithFile
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithFile
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFile
  nameWithType: WebRequestHttpRequester.WithFile
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, byte[]>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, Byte())), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: WebRequestHttpRequester.WithFiles(IEnumerable<KeyValuePair<string, byte[]>>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: WebRequestHttpRequester.WithFiles(IEnumerable(Of KeyValuePair(Of String, Byte())), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFiles(IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFiles(IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles(System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: WebRequestHttpRequester.WithFiles(IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: WebRequestHttpRequester.WithFiles(IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles*
  name: WithFiles
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithFiles
  nameWithType: WebRequestHttpRequester.WithFiles
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithHeaders(IEnumerable<KeyValuePair<string, string?>>)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string?>>)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: WebRequestHttpRequester.WithHeaders(IEnumerable<KeyValuePair<string, string?>>)
  nameWithType.vb: WebRequestHttpRequester.WithHeaders(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Specialized.NameValueCollection)
  name: WithHeaders(NameValueCollection)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Specialized.NameValueCollection)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders(System.Collections.Specialized.NameValueCollection)
  nameWithType: WebRequestHttpRequester.WithHeaders(NameValueCollection)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders*
  name: WithHeaders
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithHeaders
  nameWithType: WebRequestHttpRequester.WithHeaders
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  name: WithMethod(HttpMethod)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod(System.Net.Http.HttpMethod)
  nameWithType: WebRequestHttpRequester.WithMethod(HttpMethod)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod*
  name: WithMethod
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithMethod
  nameWithType: WebRequestHttpRequester.WithMethod
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(System.Byte[],System.String)
  name: WithParameters(byte[], string?)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(System.Byte[],System.String)
  name.vb: WithParameters(Byte(), String)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(byte[], string?)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(Byte(), String)
  nameWithType: WebRequestHttpRequester.WithParameters(byte[], string?)
  nameWithType.vb: WebRequestHttpRequester.WithParameters(Byte(), String)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(System.Byte[])
  name: WithParameters(byte[])
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(System.Byte[])
  name.vb: WithParameters(Byte())
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(byte[])
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters(Byte())
  nameWithType: WebRequestHttpRequester.WithParameters(byte[])
  nameWithType.vb: WebRequestHttpRequester.WithParameters(Byte())
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters*
  name: WithParameters
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithParameters
  nameWithType: WebRequestHttpRequester.WithParameters
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy(System.Net.IWebProxy)
  name: WithProxy(IWebProxy)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy(System.Net.IWebProxy)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy(System.Net.IWebProxy)
  nameWithType: WebRequestHttpRequester.WithProxy(IWebProxy)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy*
  name: WithProxy
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithProxy
  nameWithType: WebRequestHttpRequester.WithProxy
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer(System.String)
  name: WithReferer(string)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer(System.String)
  name.vb: WithReferer(String)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer(string)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer(String)
  nameWithType: WebRequestHttpRequester.WithReferer(string)
  nameWithType.vb: WebRequestHttpRequester.WithReferer(String)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer*
  name: WithReferer
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithReferer
  nameWithType: WebRequestHttpRequester.WithReferer
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl(System.String)
  name: WithUrl(string)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl(System.String)
  name.vb: WithUrl(String)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl(string)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl(String)
  nameWithType: WebRequestHttpRequester.WithUrl(string)
  nameWithType.vb: WebRequestHttpRequester.WithUrl(String)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl*
  name: WithUrl
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithUrl
  nameWithType: WebRequestHttpRequester.WithUrl
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(System.Boolean)
  name: WithUserAgent(bool)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(System.Boolean)
  name.vb: WithUserAgent(Boolean)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(bool)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(Boolean)
  nameWithType: WebRequestHttpRequester.WithUserAgent(bool)
  nameWithType.vb: WebRequestHttpRequester.WithUserAgent(Boolean)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(System.String)
  name: WithUserAgent(string)
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: M:WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(System.String)
  name.vb: WithUserAgent(String)
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(string)
  fullName.vb: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent(String)
  nameWithType: WebRequestHttpRequester.WithUserAgent(string)
  nameWithType.vb: WebRequestHttpRequester.WithUserAgent(String)
- uid: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent*
  name: WithUserAgent
  href: api/WeihanLi.Common.Http.WebRequestHttpRequester.yml
  commentId: Overload:WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent
  isSpec: "True"
  fullName: WeihanLi.Common.Http.WebRequestHttpRequester.WithUserAgent
  nameWithType: WebRequestHttpRequester.WithUserAgent
- uid: WeihanLi.Common.IDependencyResolver
  name: IDependencyResolver
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: T:WeihanLi.Common.IDependencyResolver
  fullName: WeihanLi.Common.IDependencyResolver
  nameWithType: IDependencyResolver
- uid: WeihanLi.Common.IDependencyResolver.GetServices(System.Type)
  name: GetServices(Type)
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: M:WeihanLi.Common.IDependencyResolver.GetServices(System.Type)
  fullName: WeihanLi.Common.IDependencyResolver.GetServices(System.Type)
  nameWithType: IDependencyResolver.GetServices(Type)
- uid: WeihanLi.Common.IDependencyResolver.GetServices*
  name: GetServices
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: Overload:WeihanLi.Common.IDependencyResolver.GetServices
  isSpec: "True"
  fullName: WeihanLi.Common.IDependencyResolver.GetServices
  nameWithType: IDependencyResolver.GetServices
- uid: WeihanLi.Common.IDependencyResolver.TryInvokeService*
  name: TryInvokeService
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: Overload:WeihanLi.Common.IDependencyResolver.TryInvokeService
  isSpec: "True"
  fullName: WeihanLi.Common.IDependencyResolver.TryInvokeService
  nameWithType: IDependencyResolver.TryInvokeService
- uid: WeihanLi.Common.IDependencyResolver.TryInvokeService``1(System.Action{``0})
  name: TryInvokeService<TService>(Action<TService>)
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: M:WeihanLi.Common.IDependencyResolver.TryInvokeService``1(System.Action{``0})
  name.vb: TryInvokeService(Of TService)(Action(Of TService))
  fullName: WeihanLi.Common.IDependencyResolver.TryInvokeService<TService>(System.Action<TService>)
  fullName.vb: WeihanLi.Common.IDependencyResolver.TryInvokeService(Of TService)(System.Action(Of TService))
  nameWithType: IDependencyResolver.TryInvokeService<TService>(Action<TService>)
  nameWithType.vb: IDependencyResolver.TryInvokeService(Of TService)(Action(Of TService))
- uid: WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync*
  name: TryInvokeServiceAsync
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: Overload:WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync
  isSpec: "True"
  fullName: WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync
  nameWithType: IDependencyResolver.TryInvokeServiceAsync
- uid: WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name: TryInvokeServiceAsync<TService>(Func<TService, Task>)
  href: api/WeihanLi.Common.IDependencyResolver.yml
  commentId: M:WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync``1(System.Func{``0,System.Threading.Tasks.Task})
  name.vb: TryInvokeServiceAsync(Of TService)(Func(Of TService, Task))
  fullName: WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync<TService>(System.Func<TService, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.IDependencyResolver.TryInvokeServiceAsync(Of TService)(System.Func(Of TService, System.Threading.Tasks.Task))
  nameWithType: IDependencyResolver.TryInvokeServiceAsync<TService>(Func<TService, Task>)
  nameWithType.vb: IDependencyResolver.TryInvokeServiceAsync(Of TService)(Func(Of TService, Task))
- uid: WeihanLi.Common.IIdGenerator
  name: IIdGenerator
  href: api/WeihanLi.Common.IIdGenerator.yml
  commentId: T:WeihanLi.Common.IIdGenerator
  fullName: WeihanLi.Common.IIdGenerator
  nameWithType: IIdGenerator
- uid: WeihanLi.Common.IIdGenerator.NewId
  name: NewId()
  href: api/WeihanLi.Common.IIdGenerator.yml
  commentId: M:WeihanLi.Common.IIdGenerator.NewId
  fullName: WeihanLi.Common.IIdGenerator.NewId()
  nameWithType: IIdGenerator.NewId()
- uid: WeihanLi.Common.IIdGenerator.NewId*
  name: NewId
  href: api/WeihanLi.Common.IIdGenerator.yml
  commentId: Overload:WeihanLi.Common.IIdGenerator.NewId
  isSpec: "True"
  fullName: WeihanLi.Common.IIdGenerator.NewId
  nameWithType: IIdGenerator.NewId
- uid: WeihanLi.Common.IProfiler
  name: IProfiler
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: T:WeihanLi.Common.IProfiler
  fullName: WeihanLi.Common.IProfiler
  nameWithType: IProfiler
- uid: WeihanLi.Common.IProfiler.Elapsed
  name: Elapsed
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: P:WeihanLi.Common.IProfiler.Elapsed
  fullName: WeihanLi.Common.IProfiler.Elapsed
  nameWithType: IProfiler.Elapsed
- uid: WeihanLi.Common.IProfiler.Elapsed*
  name: Elapsed
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: Overload:WeihanLi.Common.IProfiler.Elapsed
  isSpec: "True"
  fullName: WeihanLi.Common.IProfiler.Elapsed
  nameWithType: IProfiler.Elapsed
- uid: WeihanLi.Common.IProfiler.Restart
  name: Restart()
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: M:WeihanLi.Common.IProfiler.Restart
  fullName: WeihanLi.Common.IProfiler.Restart()
  nameWithType: IProfiler.Restart()
- uid: WeihanLi.Common.IProfiler.Restart*
  name: Restart
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: Overload:WeihanLi.Common.IProfiler.Restart
  isSpec: "True"
  fullName: WeihanLi.Common.IProfiler.Restart
  nameWithType: IProfiler.Restart
- uid: WeihanLi.Common.IProfiler.Start
  name: Start()
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: M:WeihanLi.Common.IProfiler.Start
  fullName: WeihanLi.Common.IProfiler.Start()
  nameWithType: IProfiler.Start()
- uid: WeihanLi.Common.IProfiler.Start*
  name: Start
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: Overload:WeihanLi.Common.IProfiler.Start
  isSpec: "True"
  fullName: WeihanLi.Common.IProfiler.Start
  nameWithType: IProfiler.Start
- uid: WeihanLi.Common.IProfiler.Stop
  name: Stop()
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: M:WeihanLi.Common.IProfiler.Stop
  fullName: WeihanLi.Common.IProfiler.Stop()
  nameWithType: IProfiler.Stop()
- uid: WeihanLi.Common.IProfiler.Stop*
  name: Stop
  href: api/WeihanLi.Common.IProfiler.yml
  commentId: Overload:WeihanLi.Common.IProfiler.Stop
  isSpec: "True"
  fullName: WeihanLi.Common.IProfiler.Stop
  nameWithType: IProfiler.Stop
- uid: WeihanLi.Common.IScope
  name: IScope
  href: api/WeihanLi.Common.IScope.yml
  commentId: T:WeihanLi.Common.IScope
  fullName: WeihanLi.Common.IScope
  nameWithType: IScope
- uid: WeihanLi.Common.Json
  name: WeihanLi.Common.Json
  href: api/WeihanLi.Common.Json.yml
  commentId: N:WeihanLi.Common.Json
  fullName: WeihanLi.Common.Json
  nameWithType: WeihanLi.Common.Json
- uid: WeihanLi.Common.Json.DateTimeFormatConverter
  name: DateTimeFormatConverter
  href: api/WeihanLi.Common.Json.DateTimeFormatConverter.yml
  commentId: T:WeihanLi.Common.Json.DateTimeFormatConverter
  fullName: WeihanLi.Common.Json.DateTimeFormatConverter
  nameWithType: DateTimeFormatConverter
- uid: WeihanLi.Common.Json.DateTimeFormatConverter.#ctor(System.String)
  name: DateTimeFormatConverter(string)
  href: api/WeihanLi.Common.Json.DateTimeFormatConverter.yml
  commentId: M:WeihanLi.Common.Json.DateTimeFormatConverter.#ctor(System.String)
  name.vb: New(String)
  fullName: WeihanLi.Common.Json.DateTimeFormatConverter.DateTimeFormatConverter(string)
  fullName.vb: WeihanLi.Common.Json.DateTimeFormatConverter.New(String)
  nameWithType: DateTimeFormatConverter.DateTimeFormatConverter(string)
  nameWithType.vb: DateTimeFormatConverter.New(String)
- uid: WeihanLi.Common.Json.DateTimeFormatConverter.#ctor*
  name: DateTimeFormatConverter
  href: api/WeihanLi.Common.Json.DateTimeFormatConverter.yml
  commentId: Overload:WeihanLi.Common.Json.DateTimeFormatConverter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Json.DateTimeFormatConverter.DateTimeFormatConverter
  fullName.vb: WeihanLi.Common.Json.DateTimeFormatConverter.New
  nameWithType: DateTimeFormatConverter.DateTimeFormatConverter
  nameWithType.vb: DateTimeFormatConverter.New
- uid: WeihanLi.Common.Json.IPAddressConverter
  name: IPAddressConverter
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: T:WeihanLi.Common.Json.IPAddressConverter
  fullName: WeihanLi.Common.Json.IPAddressConverter
  nameWithType: IPAddressConverter
- uid: WeihanLi.Common.Json.IPAddressConverter.CanConvert(System.Type)
  name: CanConvert(Type)
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: M:WeihanLi.Common.Json.IPAddressConverter.CanConvert(System.Type)
  fullName: WeihanLi.Common.Json.IPAddressConverter.CanConvert(System.Type)
  nameWithType: IPAddressConverter.CanConvert(Type)
- uid: WeihanLi.Common.Json.IPAddressConverter.CanConvert*
  name: CanConvert
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPAddressConverter.CanConvert
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPAddressConverter.CanConvert
  nameWithType: IPAddressConverter.CanConvert
- uid: WeihanLi.Common.Json.IPAddressConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, object?, JsonSerializer)
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: M:WeihanLi.Common.Json.IPAddressConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: WeihanLi.Common.Json.IPAddressConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: WeihanLi.Common.Json.IPAddressConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: IPAddressConverter.ReadJson(JsonReader, Type, object?, JsonSerializer)
  nameWithType.vb: IPAddressConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
- uid: WeihanLi.Common.Json.IPAddressConverter.ReadJson*
  name: ReadJson
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPAddressConverter.ReadJson
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPAddressConverter.ReadJson
  nameWithType: IPAddressConverter.ReadJson
- uid: WeihanLi.Common.Json.IPAddressConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, object?, JsonSerializer)
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: M:WeihanLi.Common.Json.IPAddressConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: WeihanLi.Common.Json.IPAddressConverter.WriteJson(Newtonsoft.Json.JsonWriter, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: WeihanLi.Common.Json.IPAddressConverter.WriteJson(Newtonsoft.Json.JsonWriter, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: IPAddressConverter.WriteJson(JsonWriter, object?, JsonSerializer)
  nameWithType.vb: IPAddressConverter.WriteJson(JsonWriter, Object, JsonSerializer)
- uid: WeihanLi.Common.Json.IPAddressConverter.WriteJson*
  name: WriteJson
  href: api/WeihanLi.Common.Json.IPAddressConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPAddressConverter.WriteJson
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPAddressConverter.WriteJson
  nameWithType: IPAddressConverter.WriteJson
- uid: WeihanLi.Common.Json.IPEndPointConverter
  name: IPEndPointConverter
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: T:WeihanLi.Common.Json.IPEndPointConverter
  fullName: WeihanLi.Common.Json.IPEndPointConverter
  nameWithType: IPEndPointConverter
- uid: WeihanLi.Common.Json.IPEndPointConverter.CanConvert(System.Type)
  name: CanConvert(Type)
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: M:WeihanLi.Common.Json.IPEndPointConverter.CanConvert(System.Type)
  fullName: WeihanLi.Common.Json.IPEndPointConverter.CanConvert(System.Type)
  nameWithType: IPEndPointConverter.CanConvert(Type)
- uid: WeihanLi.Common.Json.IPEndPointConverter.CanConvert*
  name: CanConvert
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPEndPointConverter.CanConvert
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPEndPointConverter.CanConvert
  nameWithType: IPEndPointConverter.CanConvert
- uid: WeihanLi.Common.Json.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, object?, JsonSerializer)
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: M:WeihanLi.Common.Json.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: WeihanLi.Common.Json.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: WeihanLi.Common.Json.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: IPEndPointConverter.ReadJson(JsonReader, Type, object?, JsonSerializer)
  nameWithType.vb: IPEndPointConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
- uid: WeihanLi.Common.Json.IPEndPointConverter.ReadJson*
  name: ReadJson
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPEndPointConverter.ReadJson
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPEndPointConverter.ReadJson
  nameWithType: IPEndPointConverter.ReadJson
- uid: WeihanLi.Common.Json.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, object?, JsonSerializer)
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: M:WeihanLi.Common.Json.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: WeihanLi.Common.Json.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: WeihanLi.Common.Json.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: IPEndPointConverter.WriteJson(JsonWriter, object?, JsonSerializer)
  nameWithType.vb: IPEndPointConverter.WriteJson(JsonWriter, Object, JsonSerializer)
- uid: WeihanLi.Common.Json.IPEndPointConverter.WriteJson*
  name: WriteJson
  href: api/WeihanLi.Common.Json.IPEndPointConverter.yml
  commentId: Overload:WeihanLi.Common.Json.IPEndPointConverter.WriteJson
  isSpec: "True"
  fullName: WeihanLi.Common.Json.IPEndPointConverter.WriteJson
  nameWithType: IPEndPointConverter.WriteJson
- uid: WeihanLi.Common.Logging
  name: WeihanLi.Common.Logging
  href: api/WeihanLi.Common.Logging.yml
  commentId: N:WeihanLi.Common.Logging
  fullName: WeihanLi.Common.Logging
  nameWithType: WeihanLi.Common.Logging
- uid: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions
  name: ConsoleLoggingProviderExtensions
  href: api/WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.yml
  commentId: T:WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions
  fullName: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions
  nameWithType: ConsoleLoggingProviderExtensions
- uid: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String})
  name: AddConsole(ILogHelperLoggingBuilder, Func<LogHelperLoggingEvent, string>)
  href: api/WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.yml
  commentId: M:WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String})
  name.vb: AddConsole(ILogHelperLoggingBuilder, Func(Of LogHelperLoggingEvent, String))
  fullName: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent, string>)
  fullName.vb: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent, String))
  nameWithType: ConsoleLoggingProviderExtensions.AddConsole(ILogHelperLoggingBuilder, Func<LogHelperLoggingEvent, string>)
  nameWithType.vb: ConsoleLoggingProviderExtensions.AddConsole(ILogHelperLoggingBuilder, Func(Of LogHelperLoggingEvent, String))
- uid: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.IConsoleLogFormatter)
  name: AddConsole(ILogHelperLoggingBuilder, IConsoleLogFormatter?)
  href: api/WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.yml
  commentId: M:WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.IConsoleLogFormatter)
  name.vb: AddConsole(ILogHelperLoggingBuilder, IConsoleLogFormatter)
  fullName: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, WeihanLi.Common.Logging.IConsoleLogFormatter?)
  fullName.vb: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, WeihanLi.Common.Logging.IConsoleLogFormatter)
  nameWithType: ConsoleLoggingProviderExtensions.AddConsole(ILogHelperLoggingBuilder, IConsoleLogFormatter?)
  nameWithType.vb: ConsoleLoggingProviderExtensions.AddConsole(ILogHelperLoggingBuilder, IConsoleLogFormatter)
- uid: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole*
  name: AddConsole
  href: api/WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ConsoleLoggingProviderExtensions.AddConsole
  nameWithType: ConsoleLoggingProviderExtensions.AddConsole
- uid: WeihanLi.Common.Logging.GenericLoggerOptions
  name: GenericLoggerOptions
  href: api/WeihanLi.Common.Logging.GenericLoggerOptions.yml
  commentId: T:WeihanLi.Common.Logging.GenericLoggerOptions
  fullName: WeihanLi.Common.Logging.GenericLoggerOptions
  nameWithType: GenericLoggerOptions
- uid: WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict
  name: FullNamePredict
  href: api/WeihanLi.Common.Logging.GenericLoggerOptions.yml
  commentId: P:WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict
  fullName: WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict
  nameWithType: GenericLoggerOptions.FullNamePredict
- uid: WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict*
  name: FullNamePredict
  href: api/WeihanLi.Common.Logging.GenericLoggerOptions.yml
  commentId: Overload:WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.GenericLoggerOptions.FullNamePredict
  nameWithType: GenericLoggerOptions.FullNamePredict
- uid: WeihanLi.Common.Logging.IConsoleLogFormatter
  name: IConsoleLogFormatter
  href: api/WeihanLi.Common.Logging.IConsoleLogFormatter.yml
  commentId: T:WeihanLi.Common.Logging.IConsoleLogFormatter
  fullName: WeihanLi.Common.Logging.IConsoleLogFormatter
  nameWithType: IConsoleLogFormatter
- uid: WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  name: FormatAsString(LogHelperLoggingEvent)
  href: api/WeihanLi.Common.Logging.IConsoleLogFormatter.yml
  commentId: M:WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  fullName: WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  nameWithType: IConsoleLogFormatter.FormatAsString(LogHelperLoggingEvent)
- uid: WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString*
  name: FormatAsString
  href: api/WeihanLi.Common.Logging.IConsoleLogFormatter.yml
  commentId: Overload:WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.IConsoleLogFormatter.FormatAsString
  nameWithType: IConsoleLogFormatter.FormatAsString
- uid: WeihanLi.Common.Logging.ILogHelperFactory
  name: ILogHelperFactory
  href: api/WeihanLi.Common.Logging.ILogHelperFactory.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperFactory
  fullName: WeihanLi.Common.Logging.ILogHelperFactory
  nameWithType: ILogHelperFactory
- uid: WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger(System.String)
  name: CreateLogger(string)
  href: api/WeihanLi.Common.Logging.ILogHelperFactory.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger(System.String)
  name.vb: CreateLogger(String)
  fullName: WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger(string)
  fullName.vb: WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger(String)
  nameWithType: ILogHelperFactory.CreateLogger(string)
  nameWithType.vb: ILogHelperFactory.CreateLogger(String)
- uid: WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger*
  name: CreateLogger
  href: api/WeihanLi.Common.Logging.ILogHelperFactory.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperFactory.CreateLogger
  nameWithType: ILogHelperFactory.CreateLogger
- uid: WeihanLi.Common.Logging.ILogHelperLogger
  name: ILogHelperLogger
  href: api/WeihanLi.Common.Logging.ILogHelperLogger.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperLogger
  fullName: WeihanLi.Common.Logging.ILogHelperLogger
  nameWithType: ILogHelperLogger
- uid: WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled(WeihanLi.Common.Logging.LogHelperLogLevel)
  name: IsEnabled(LogHelperLogLevel)
  href: api/WeihanLi.Common.Logging.ILogHelperLogger.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled(WeihanLi.Common.Logging.LogHelperLogLevel)
  fullName: WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled(WeihanLi.Common.Logging.LogHelperLogLevel)
  nameWithType: ILogHelperLogger.IsEnabled(LogHelperLogLevel)
- uid: WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled*
  name: IsEnabled
  href: api/WeihanLi.Common.Logging.ILogHelperLogger.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLogger.IsEnabled
  nameWithType: ILogHelperLogger.IsEnabled
- uid: WeihanLi.Common.Logging.ILogHelperLogger.Log(WeihanLi.Common.Logging.LogHelperLogLevel,System.Exception,System.String,System.Object[])
  name: Log(LogHelperLogLevel, Exception?, string?, params object?[])
  href: api/WeihanLi.Common.Logging.ILogHelperLogger.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLogger.Log(WeihanLi.Common.Logging.LogHelperLogLevel,System.Exception,System.String,System.Object[])
  name.vb: Log(LogHelperLogLevel, Exception, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.ILogHelperLogger.Log(WeihanLi.Common.Logging.LogHelperLogLevel, System.Exception?, string?, params object?[])
  fullName.vb: WeihanLi.Common.Logging.ILogHelperLogger.Log(WeihanLi.Common.Logging.LogHelperLogLevel, System.Exception, String, ParamArray Object())
  nameWithType: ILogHelperLogger.Log(LogHelperLogLevel, Exception?, string?, params object?[])
  nameWithType.vb: ILogHelperLogger.Log(LogHelperLogLevel, Exception, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.ILogHelperLogger.Log*
  name: Log
  href: api/WeihanLi.Common.Logging.ILogHelperLogger.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLogger.Log
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLogger.Log
  nameWithType: ILogHelperLogger.Log
- uid: WeihanLi.Common.Logging.ILogHelperLogger`1
  name: ILogHelperLogger<TCategory>
  href: api/WeihanLi.Common.Logging.ILogHelperLogger-1.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperLogger`1
  name.vb: ILogHelperLogger(Of TCategory)
  fullName: WeihanLi.Common.Logging.ILogHelperLogger<TCategory>
  fullName.vb: WeihanLi.Common.Logging.ILogHelperLogger(Of TCategory)
  nameWithType: ILogHelperLogger<TCategory>
  nameWithType.vb: ILogHelperLogger(Of TCategory)
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder
  name: ILogHelperLoggingBuilder
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperLoggingBuilder
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder
  nameWithType: ILogHelperLoggingBuilder
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher(WeihanLi.Common.Logging.ILogHelperLoggingEnricher)
  name: AddEnricher(ILogHelperLoggingEnricher)
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher(WeihanLi.Common.Logging.ILogHelperLoggingEnricher)
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher(WeihanLi.Common.Logging.ILogHelperLoggingEnricher)
  nameWithType: ILogHelperLoggingBuilder.AddEnricher(ILogHelperLoggingEnricher)
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher*
  name: AddEnricher
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddEnricher
  nameWithType: ILogHelperLoggingBuilder.AddEnricher
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter(System.Func{System.Type,WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean})
  name: AddFilter(Func<Type, LogHelperLoggingEvent, bool>)
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter(System.Func{System.Type,WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean})
  name.vb: AddFilter(Func(Of Type, LogHelperLoggingEvent, Boolean))
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter(System.Func<System.Type, WeihanLi.Common.Logging.LogHelperLoggingEvent, bool>)
  fullName.vb: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter(System.Func(Of System.Type, WeihanLi.Common.Logging.LogHelperLoggingEvent, Boolean))
  nameWithType: ILogHelperLoggingBuilder.AddFilter(Func<Type, LogHelperLoggingEvent, bool>)
  nameWithType.vb: ILogHelperLoggingBuilder.AddFilter(Func(Of Type, LogHelperLoggingEvent, Boolean))
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter*
  name: AddFilter
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddFilter
  nameWithType: ILogHelperLoggingBuilder.AddFilter
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider(WeihanLi.Common.Logging.ILogHelperProvider)
  name: AddProvider(ILogHelperProvider)
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider(WeihanLi.Common.Logging.ILogHelperProvider)
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider(WeihanLi.Common.Logging.ILogHelperProvider)
  nameWithType: ILogHelperLoggingBuilder.AddProvider(ILogHelperProvider)
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider*
  name: AddProvider
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.AddProvider
  nameWithType: ILogHelperLoggingBuilder.AddProvider
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build
  name: Build()
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build()
  nameWithType: ILogHelperLoggingBuilder.Build()
- uid: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build*
  name: Build
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingBuilder.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingBuilder.Build
  nameWithType: ILogHelperLoggingBuilder.Build
- uid: WeihanLi.Common.Logging.ILogHelperLoggingEnricher
  name: ILogHelperLoggingEnricher
  href: api/WeihanLi.Common.Logging.ILogHelperLoggingEnricher.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperLoggingEnricher
  fullName: WeihanLi.Common.Logging.ILogHelperLoggingEnricher
  nameWithType: ILogHelperLoggingEnricher
- uid: WeihanLi.Common.Logging.ILogHelperProvider
  name: ILogHelperProvider
  href: api/WeihanLi.Common.Logging.ILogHelperProvider.yml
  commentId: T:WeihanLi.Common.Logging.ILogHelperProvider
  fullName: WeihanLi.Common.Logging.ILogHelperProvider
  nameWithType: ILogHelperProvider
- uid: WeihanLi.Common.Logging.ILogHelperProvider.Log(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  name: Log(LogHelperLoggingEvent)
  href: api/WeihanLi.Common.Logging.ILogHelperProvider.yml
  commentId: M:WeihanLi.Common.Logging.ILogHelperProvider.Log(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  fullName: WeihanLi.Common.Logging.ILogHelperProvider.Log(WeihanLi.Common.Logging.LogHelperLoggingEvent)
  nameWithType: ILogHelperProvider.Log(LogHelperLoggingEvent)
- uid: WeihanLi.Common.Logging.ILogHelperProvider.Log*
  name: Log
  href: api/WeihanLi.Common.Logging.ILogHelperProvider.yml
  commentId: Overload:WeihanLi.Common.Logging.ILogHelperProvider.Log
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.ILogHelperProvider.Log
  nameWithType: ILogHelperProvider.Log
- uid: WeihanLi.Common.Logging.Log4Net
  name: WeihanLi.Common.Logging.Log4Net
  href: api/WeihanLi.Common.Logging.Log4Net.yml
  commentId: N:WeihanLi.Common.Logging.Log4Net
  fullName: WeihanLi.Common.Logging.Log4Net
  nameWithType: WeihanLi.Common.Logging.Log4Net
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender
  name: ElasticSearchAppender
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: T:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender
  nameWithType: ElasticSearchAppender
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName
  name: ApplicationName
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: P:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName
  nameWithType: ElasticSearchAppender.ApplicationName
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName*
  name: ApplicationName
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ApplicationName
  nameWithType: ElasticSearchAppender.ApplicationName
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl
  name: ElasticSearchUrl
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: P:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl
  nameWithType: ElasticSearchAppender.ElasticSearchUrl
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl*
  name: ElasticSearchUrl
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.ElasticSearchUrl
  nameWithType: ElasticSearchAppender.ElasticSearchUrl
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties(log4net.Core.LoggingEvent)
  name: GetLoggingEventProperties(LoggingEvent)
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties(log4net.Core.LoggingEvent)
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties(log4net.Core.LoggingEvent)
  nameWithType: ElasticSearchAppender.GetLoggingEventProperties(LoggingEvent)
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties*
  name: GetLoggingEventProperties
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.GetLoggingEventProperties
  nameWithType: ElasticSearchAppender.GetLoggingEventProperties
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat
  name: IndexFormat
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: P:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat
  nameWithType: ElasticSearchAppender.IndexFormat
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat*
  name: IndexFormat
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IndexFormat
  nameWithType: ElasticSearchAppender.IndexFormat
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue(System.String)
  name: IsValidLog4NetPropertyValue(string)
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue(System.String)
  name.vb: IsValidLog4NetPropertyValue(String)
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue(string)
  fullName.vb: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue(String)
  nameWithType: ElasticSearchAppender.IsValidLog4NetPropertyValue(string)
  nameWithType.vb: ElasticSearchAppender.IsValidLog4NetPropertyValue(String)
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue*
  name: IsValidLog4NetPropertyValue
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.IsValidLog4NetPropertyValue
  nameWithType: ElasticSearchAppender.IsValidLog4NetPropertyValue
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer(log4net.Core.LoggingEvent[])
  name: SendBuffer(LoggingEvent[])
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer(log4net.Core.LoggingEvent[])
  name.vb: SendBuffer(LoggingEvent())
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer(log4net.Core.LoggingEvent[])
  fullName.vb: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer(log4net.Core.LoggingEvent())
  nameWithType: ElasticSearchAppender.SendBuffer(LoggingEvent[])
  nameWithType.vb: ElasticSearchAppender.SendBuffer(LoggingEvent())
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer*
  name: SendBuffer
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.SendBuffer
  nameWithType: ElasticSearchAppender.SendBuffer
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type
  name: Type
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: P:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type
  nameWithType: ElasticSearchAppender.Type
- uid: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type*
  name: Type
  href: api/WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.ElasticSearchAppender.Type
  nameWithType: ElasticSearchAppender.Type
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper
  name: Log4NetHelper
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: T:WeihanLi.Common.Logging.Log4Net.Log4NetHelper
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper
  nameWithType: Log4NetHelper
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(System.String)
  name: GetLogger(string)
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(System.String)
  name.vb: GetLogger(String)
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(string)
  fullName.vb: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(String)
  nameWithType: Log4NetHelper.GetLogger(string)
  nameWithType.vb: Log4NetHelper.GetLogger(String)
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(System.Type)
  name: GetLogger(Type)
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(System.Type)
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(System.Type)
  nameWithType: Log4NetHelper.GetLogger(Type)
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger*
  name: GetLogger
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger
  nameWithType: Log4NetHelper.GetLogger
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger``1
  name: GetLogger<TCategory>()
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger``1
  name.vb: GetLogger(Of TCategory)()
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger<TCategory>()
  fullName.vb: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.GetLogger(Of TCategory)()
  nameWithType: Log4NetHelper.GetLogger<TCategory>()
  nameWithType.vb: Log4NetHelper.GetLogger(Of TCategory)()
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit
  name: LogInit()
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit()
  nameWithType: Log4NetHelper.LogInit()
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit(System.String)
  name: LogInit(string)
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit(System.String)
  name.vb: LogInit(String)
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit(string)
  fullName.vb: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit(String)
  nameWithType: Log4NetHelper.LogInit(string)
  nameWithType.vb: Log4NetHelper.LogInit(String)
- uid: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit*
  name: LogInit
  href: api/WeihanLi.Common.Logging.Log4Net.Log4NetHelper.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.Log4NetHelper.LogInit
  nameWithType: Log4NetHelper.LogInit
- uid: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions
  name: LogHelperFactoryExtensions
  href: api/WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.yml
  commentId: T:WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions
  fullName: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions
  nameWithType: LogHelperFactoryExtensions
- uid: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String)
  name: AddLog4Net(ILogHelperLoggingBuilder, string)
  href: api/WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String)
  name.vb: AddLog4Net(ILogHelperLoggingBuilder, String)
  fullName: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, string)
  fullName.vb: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, String)
  nameWithType: LogHelperFactoryExtensions.AddLog4Net(ILogHelperLoggingBuilder, string)
  nameWithType.vb: LogHelperFactoryExtensions.AddLog4Net(ILogHelperLoggingBuilder, String)
- uid: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  name: AddLog4Net(ILogHelperLoggingBuilder)
  href: api/WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  fullName: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  nameWithType: LogHelperFactoryExtensions.AddLog4Net(ILogHelperLoggingBuilder)
- uid: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net*
  name: AddLog4Net
  href: api/WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Log4Net.LogHelperFactoryExtensions.AddLog4Net
  nameWithType: LogHelperFactoryExtensions.AddLog4Net
- uid: WeihanLi.Common.Logging.LogHelperExtensions
  name: LogHelperExtensions
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: T:WeihanLi.Common.Logging.LogHelperExtensions
  fullName: WeihanLi.Common.Logging.LogHelperExtensions
  nameWithType: LogHelperExtensions
- uid: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Object},System.Boolean)
  name: AddProperty(LogHelperLoggingEvent, string, Func<LogHelperLoggingEvent, object>, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Object},System.Boolean)
  name.vb: AddProperty(LogHelperLoggingEvent, String, Func(Of LogHelperLoggingEvent, Object), Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent, string, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent, object>, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent, String, System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent, Object), Boolean)
  nameWithType: LogHelperExtensions.AddProperty(LogHelperLoggingEvent, string, Func<LogHelperLoggingEvent, object>, bool)
  nameWithType.vb: LogHelperExtensions.AddProperty(LogHelperLoggingEvent, String, Func(Of LogHelperLoggingEvent, Object), Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String,System.Object,System.Boolean)
  name: AddProperty(LogHelperLoggingEvent, string, object, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent,System.String,System.Object,System.Boolean)
  name.vb: AddProperty(LogHelperLoggingEvent, String, Object, Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent, string, object, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty(WeihanLi.Common.Logging.LogHelperLoggingEvent, String, Object, Boolean)
  nameWithType: LogHelperExtensions.AddProperty(LogHelperLoggingEvent, string, object, bool)
  nameWithType.vb: LogHelperExtensions.AddProperty(LogHelperLoggingEvent, String, Object, Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty*
  name: AddProperty
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.AddProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.AddProperty
  nameWithType: LogHelperExtensions.AddProperty
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Debug(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Debug(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Debug(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Debug(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Debug(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Debug(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Debug(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Debug(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Debug(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Debug(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Debug(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Debug(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Debug(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Debug*
  name: Debug
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Debug
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Debug
  nameWithType: LogHelperExtensions.Debug
- uid: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Object},System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean},System.Boolean)
  name: EnrichWithProperty(ILogHelperLoggingBuilder, string, Func<LogHelperLoggingEvent, object>, Func<LogHelperLoggingEvent, bool>, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Object},System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean},System.Boolean)
  name.vb: EnrichWithProperty(ILogHelperLoggingBuilder, String, Func(Of LogHelperLoggingEvent, Object), Func(Of LogHelperLoggingEvent, Boolean), Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, string, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent, object>, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent, bool>, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, String, System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent, Object), System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent, Boolean), Boolean)
  nameWithType: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, string, Func<LogHelperLoggingEvent, object>, Func<LogHelperLoggingEvent, bool>, bool)
  nameWithType.vb: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, String, Func(Of LogHelperLoggingEvent, Object), Func(Of LogHelperLoggingEvent, Boolean), Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent},System.Boolean)
  name: EnrichWithProperty(ILogHelperLoggingBuilder, string, Func<LogHelperLoggingEvent>, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent},System.Boolean)
  name.vb: EnrichWithProperty(ILogHelperLoggingBuilder, String, Func(Of LogHelperLoggingEvent), Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, string, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent>, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, String, System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent), Boolean)
  nameWithType: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, string, Func<LogHelperLoggingEvent>, bool)
  nameWithType.vb: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, String, Func(Of LogHelperLoggingEvent), Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Object,System.Boolean)
  name: EnrichWithProperty(ILogHelperLoggingBuilder, string, object, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Object,System.Boolean)
  name.vb: EnrichWithProperty(ILogHelperLoggingBuilder, String, Object, Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, string, object, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, String, Object, Boolean)
  nameWithType: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, string, object, bool)
  nameWithType.vb: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, String, Object, Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Object,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean},System.Boolean)
  name: EnrichWithProperty(ILogHelperLoggingBuilder, string, object, Func<LogHelperLoggingEvent, bool>, bool)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.String,System.Object,System.Func{WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean},System.Boolean)
  name.vb: EnrichWithProperty(ILogHelperLoggingBuilder, String, Object, Func(Of LogHelperLoggingEvent, Boolean), Boolean)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, string, object, System.Func<WeihanLi.Common.Logging.LogHelperLoggingEvent, bool>, bool)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, String, Object, System.Func(Of WeihanLi.Common.Logging.LogHelperLoggingEvent, Boolean), Boolean)
  nameWithType: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, string, object, Func<LogHelperLoggingEvent, bool>, bool)
  nameWithType.vb: LogHelperExtensions.EnrichWithProperty(ILogHelperLoggingBuilder, String, Object, Func(Of LogHelperLoggingEvent, Boolean), Boolean)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty*
  name: EnrichWithProperty
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.EnrichWithProperty
  nameWithType: LogHelperExtensions.EnrichWithProperty
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Error(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Error(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Error(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Error(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Error(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Error(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Error(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Error(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Error(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Error(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Error(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Error(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Error(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Error*
  name: Error
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Error
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Error
  nameWithType: LogHelperExtensions.Error
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Fatal(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Fatal(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Fatal(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Fatal(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Fatal(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Fatal(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Fatal(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Fatal(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Fatal(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Fatal(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Fatal(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Fatal(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Fatal(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Fatal*
  name: Fatal
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Fatal
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Fatal
  nameWithType: LogHelperExtensions.Fatal
- uid: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger(WeihanLi.Common.Logging.ILogHelperFactory,System.Type)
  name: GetLogger(ILogHelperFactory, Type)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.GetLogger(WeihanLi.Common.Logging.ILogHelperFactory,System.Type)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger(WeihanLi.Common.Logging.ILogHelperFactory, System.Type)
  nameWithType: LogHelperExtensions.GetLogger(ILogHelperFactory, Type)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger*
  name: GetLogger
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.GetLogger
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger
  nameWithType: LogHelperExtensions.GetLogger
- uid: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger``1(WeihanLi.Common.Logging.ILogHelperFactory)
  name: GetLogger<T>(ILogHelperFactory)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.GetLogger``1(WeihanLi.Common.Logging.ILogHelperFactory)
  name.vb: GetLogger(Of T)(ILogHelperFactory)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger<T>(WeihanLi.Common.Logging.ILogHelperFactory)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.GetLogger(Of T)(WeihanLi.Common.Logging.ILogHelperFactory)
  nameWithType: LogHelperExtensions.GetLogger<T>(ILogHelperFactory)
  nameWithType.vb: LogHelperExtensions.GetLogger(Of T)(ILogHelperFactory)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Info(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Info(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Info(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Info(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Info(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Info(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Info(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Info(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Info(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Info(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Info(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Info(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Info(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Info*
  name: Info
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Info
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Info
  nameWithType: LogHelperExtensions.Info
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Log(WeihanLi.Common.Logging.ILogHelperLogger,WeihanLi.Common.Logging.LogHelperLogLevel,System.String)
  name: Log(ILogHelperLogger, LogHelperLogLevel, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Log(WeihanLi.Common.Logging.ILogHelperLogger,WeihanLi.Common.Logging.LogHelperLogLevel,System.String)
  name.vb: Log(ILogHelperLogger, LogHelperLogLevel, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Log(WeihanLi.Common.Logging.ILogHelperLogger, WeihanLi.Common.Logging.LogHelperLogLevel, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Log(WeihanLi.Common.Logging.ILogHelperLogger, WeihanLi.Common.Logging.LogHelperLogLevel, String)
  nameWithType: LogHelperExtensions.Log(ILogHelperLogger, LogHelperLogLevel, string?)
  nameWithType.vb: LogHelperExtensions.Log(ILogHelperLogger, LogHelperLogLevel, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Log*
  name: Log
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Log
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Log
  nameWithType: LogHelperExtensions.Log
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Trace(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Trace(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Trace(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Trace(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Trace(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Trace(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Trace(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Trace(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Trace(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Trace(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Trace(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Trace(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Trace(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Trace*
  name: Trace
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Trace
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Trace
  nameWithType: LogHelperExtensions.Trace
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name: Warn(ILogHelperLogger, Exception?, string?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception,System.String)
  name.vb: Warn(ILogHelperLogger, Exception, String)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?, string?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception, String)
  nameWithType: LogHelperExtensions.Warn(ILogHelperLogger, Exception?, string?)
  nameWithType.vb: LogHelperExtensions.Warn(ILogHelperLogger, Exception, String)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name: Warn(ILogHelperLogger, Exception?)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.Exception)
  name.vb: Warn(ILogHelperLogger, Exception)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception?)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, System.Exception)
  nameWithType: LogHelperExtensions.Warn(ILogHelperLogger, Exception?)
  nameWithType.vb: LogHelperExtensions.Warn(ILogHelperLogger, Exception)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name: Warn(ILogHelperLogger, string?, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger,System.String,System.Object[])
  name.vb: Warn(ILogHelperLogger, String, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, string?, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.Warn(WeihanLi.Common.Logging.ILogHelperLogger, String, ParamArray Object())
  nameWithType: LogHelperExtensions.Warn(ILogHelperLogger, string?, params object[])
  nameWithType.vb: LogHelperExtensions.Warn(ILogHelperLogger, String, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.Warn*
  name: Warn
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.Warn
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.Warn
  nameWithType: LogHelperExtensions.Warn
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher*
  name: WithEnricher
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher
  nameWithType: LogHelperExtensions.WithEnricher
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,``0)
  name: WithEnricher<TEnricher>(ILogHelperLoggingBuilder, TEnricher)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,``0)
  name.vb: WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder, TEnricher)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher<TEnricher>(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, TEnricher)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher(Of TEnricher)(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, TEnricher)
  nameWithType: LogHelperExtensions.WithEnricher<TEnricher>(ILogHelperLoggingBuilder, TEnricher)
  nameWithType.vb: LogHelperExtensions.WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder, TEnricher)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Object[])
  name: WithEnricher<TEnricher>(ILogHelperLoggingBuilder, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Object[])
  name.vb: WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher<TEnricher>(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher(Of TEnricher)(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, ParamArray Object())
  nameWithType: LogHelperExtensions.WithEnricher<TEnricher>(ILogHelperLoggingBuilder, params object[])
  nameWithType.vb: LogHelperExtensions.WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  name: WithEnricher<TEnricher>(ILogHelperLoggingBuilder)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  name.vb: WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher<TEnricher>(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithEnricher(Of TEnricher)(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  nameWithType: LogHelperExtensions.WithEnricher<TEnricher>(ILogHelperLoggingBuilder)
  nameWithType.vb: LogHelperExtensions.WithEnricher(Of TEnricher)(ILogHelperLoggingBuilder)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name: WithFilter(ILogHelperLoggingBuilder, Func<string, LogHelperLogLevel, bool>)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name.vb: WithFilter(ILogHelperLoggingBuilder, Func(Of String, LogHelperLogLevel, Boolean))
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<string, WeihanLi.Common.Logging.LogHelperLogLevel, bool>)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of String, WeihanLi.Common.Logging.LogHelperLogLevel, Boolean))
  nameWithType: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func<string, LogHelperLogLevel, bool>)
  nameWithType.vb: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func(Of String, LogHelperLogLevel, Boolean))
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name: WithFilter(ILogHelperLoggingBuilder, Func<Type, string, LogHelperLogLevel, bool>)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name.vb: WithFilter(ILogHelperLoggingBuilder, Func(Of Type, String, LogHelperLogLevel, Boolean))
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<System.Type, string, WeihanLi.Common.Logging.LogHelperLogLevel, bool>)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of System.Type, String, WeihanLi.Common.Logging.LogHelperLogLevel, Boolean))
  nameWithType: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func<Type, string, LogHelperLogLevel, bool>)
  nameWithType.vb: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func(Of Type, String, LogHelperLogLevel, Boolean))
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Exception,System.Boolean})
  name: WithFilter(ILogHelperLoggingBuilder, Func<Type, string, LogHelperLogLevel, Exception?, bool>)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,System.String,WeihanLi.Common.Logging.LogHelperLogLevel,System.Exception,System.Boolean})
  name.vb: WithFilter(ILogHelperLoggingBuilder, Func(Of Type, String, LogHelperLogLevel, Exception, Boolean))
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<System.Type, string, WeihanLi.Common.Logging.LogHelperLogLevel, System.Exception?, bool>)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of System.Type, String, WeihanLi.Common.Logging.LogHelperLogLevel, System.Exception, Boolean))
  nameWithType: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func<Type, string, LogHelperLogLevel, Exception?, bool>)
  nameWithType.vb: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func(Of Type, String, LogHelperLogLevel, Exception, Boolean))
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean})
  name: WithFilter(ILogHelperLoggingBuilder, Func<Type, LogHelperLoggingEvent, bool>)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{System.Type,WeihanLi.Common.Logging.LogHelperLoggingEvent,System.Boolean})
  name.vb: WithFilter(ILogHelperLoggingBuilder, Func(Of Type, LogHelperLoggingEvent, Boolean))
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<System.Type, WeihanLi.Common.Logging.LogHelperLoggingEvent, bool>)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of System.Type, WeihanLi.Common.Logging.LogHelperLoggingEvent, Boolean))
  nameWithType: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func<Type, LogHelperLoggingEvent, bool>)
  nameWithType.vb: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func(Of Type, LogHelperLoggingEvent, Boolean))
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name: WithFilter(ILogHelperLoggingBuilder, Func<LogHelperLogLevel, bool>)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Func{WeihanLi.Common.Logging.LogHelperLogLevel,System.Boolean})
  name.vb: WithFilter(ILogHelperLoggingBuilder, Func(Of LogHelperLogLevel, Boolean))
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func<WeihanLi.Common.Logging.LogHelperLogLevel, bool>)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Func(Of WeihanLi.Common.Logging.LogHelperLogLevel, Boolean))
  nameWithType: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func<LogHelperLogLevel, bool>)
  nameWithType.vb: LogHelperExtensions.WithFilter(ILogHelperLoggingBuilder, Func(Of LogHelperLogLevel, Boolean))
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter*
  name: WithFilter
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.WithFilter
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithFilter
  nameWithType: LogHelperExtensions.WithFilter
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.LogHelperLogLevel)
  name: WithMinimumLevel(ILogHelperLoggingBuilder, LogHelperLogLevel)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.LogHelperLogLevel)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, WeihanLi.Common.Logging.LogHelperLogLevel)
  nameWithType: LogHelperExtensions.WithMinimumLevel(ILogHelperLoggingBuilder, LogHelperLogLevel)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel*
  name: WithMinimumLevel
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithMinimumLevel
  nameWithType: LogHelperExtensions.WithMinimumLevel
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.ILogHelperProvider)
  name: WithProvider(ILogHelperLoggingBuilder, ILogHelperProvider)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithProvider(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,WeihanLi.Common.Logging.ILogHelperProvider)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, WeihanLi.Common.Logging.ILogHelperProvider)
  nameWithType: LogHelperExtensions.WithProvider(ILogHelperLoggingBuilder, ILogHelperProvider)
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider*
  name: WithProvider
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperExtensions.WithProvider
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider
  nameWithType: LogHelperExtensions.WithProvider
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Object[])
  name: WithProvider<TLogProvider>(ILogHelperLoggingBuilder, params object[])
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithProvider``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Object[])
  name.vb: WithProvider(Of TLogProvider)(ILogHelperLoggingBuilder, ParamArray Object())
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider<TLogProvider>(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, params object[])
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider(Of TLogProvider)(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, ParamArray Object())
  nameWithType: LogHelperExtensions.WithProvider<TLogProvider>(ILogHelperLoggingBuilder, params object[])
  nameWithType.vb: LogHelperExtensions.WithProvider(Of TLogProvider)(ILogHelperLoggingBuilder, ParamArray Object())
- uid: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  name: WithProvider<TLogProvider>(ILogHelperLoggingBuilder)
  href: api/WeihanLi.Common.Logging.LogHelperExtensions.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperExtensions.WithProvider``1(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  name.vb: WithProvider(Of TLogProvider)(ILogHelperLoggingBuilder)
  fullName: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider<TLogProvider>(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  fullName.vb: WeihanLi.Common.Logging.LogHelperExtensions.WithProvider(Of TLogProvider)(WeihanLi.Common.Logging.ILogHelperLoggingBuilder)
  nameWithType: LogHelperExtensions.WithProvider<TLogProvider>(ILogHelperLoggingBuilder)
  nameWithType.vb: LogHelperExtensions.WithProvider(Of TLogProvider)(ILogHelperLoggingBuilder)
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent
  name: LogHelperLoggingEvent
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: T:WeihanLi.Common.Logging.LogHelperLoggingEvent
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent
  nameWithType: LogHelperLoggingEvent
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName
  name: CategoryName
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName
  nameWithType: LogHelperLoggingEvent.CategoryName
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName*
  name: CategoryName
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.CategoryName
  nameWithType: LogHelperLoggingEvent.CategoryName
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy
  name: Copy()
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: M:WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy()
  nameWithType: LogHelperLoggingEvent.Copy()
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy*
  name: Copy
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Copy
  nameWithType: LogHelperLoggingEvent.Copy
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime
  name: DateTime
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime
  nameWithType: LogHelperLoggingEvent.DateTime
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime*
  name: DateTime
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.DateTime
  nameWithType: LogHelperLoggingEvent.DateTime
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception
  name: Exception
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception
  nameWithType: LogHelperLoggingEvent.Exception
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception*
  name: Exception
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Exception
  nameWithType: LogHelperLoggingEvent.Exception
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel
  name: LogLevel
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel
  nameWithType: LogHelperLoggingEvent.LogLevel
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel*
  name: LogLevel
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.LogLevel
  nameWithType: LogHelperLoggingEvent.LogLevel
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Message
  name: Message
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.Message
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Message
  nameWithType: LogHelperLoggingEvent.Message
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Message*
  name: Message
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.Message
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Message
  nameWithType: LogHelperLoggingEvent.Message
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate
  name: MessageTemplate
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate
  nameWithType: LogHelperLoggingEvent.MessageTemplate
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate*
  name: MessageTemplate
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.MessageTemplate
  nameWithType: LogHelperLoggingEvent.MessageTemplate
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties
  name: Properties
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: P:WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties
  nameWithType: LogHelperLoggingEvent.Properties
- uid: WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties*
  name: Properties
  href: api/WeihanLi.Common.Logging.LogHelperLoggingEvent.yml
  commentId: Overload:WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.LogHelperLoggingEvent.Properties
  nameWithType: LogHelperLoggingEvent.Properties
- uid: WeihanLi.Common.Logging.LogHelperLogLevel
  name: LogHelperLogLevel
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: T:WeihanLi.Common.Logging.LogHelperLogLevel
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel
  nameWithType: LogHelperLogLevel
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.All
  name: All
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.All
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.All
  nameWithType: LogHelperLogLevel.All
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Debug
  name: Debug
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Debug
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Debug
  nameWithType: LogHelperLogLevel.Debug
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Error
  name: Error
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Error
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Error
  nameWithType: LogHelperLogLevel.Error
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Fatal
  name: Fatal
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Fatal
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Fatal
  nameWithType: LogHelperLogLevel.Fatal
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Info
  name: Info
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Info
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Info
  nameWithType: LogHelperLogLevel.Info
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.None
  name: None
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.None
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.None
  nameWithType: LogHelperLogLevel.None
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Trace
  name: Trace
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Trace
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Trace
  nameWithType: LogHelperLogLevel.Trace
- uid: WeihanLi.Common.Logging.LogHelperLogLevel.Warn
  name: Warn
  href: api/WeihanLi.Common.Logging.LogHelperLogLevel.yml
  commentId: F:WeihanLi.Common.Logging.LogHelperLogLevel.Warn
  fullName: WeihanLi.Common.Logging.LogHelperLogLevel.Warn
  nameWithType: LogHelperLogLevel.Warn
- uid: WeihanLi.Common.Logging.Serilog
  name: WeihanLi.Common.Logging.Serilog
  href: api/WeihanLi.Common.Logging.Serilog.yml
  commentId: N:WeihanLi.Common.Logging.Serilog
  fullName: WeihanLi.Common.Logging.Serilog
  nameWithType: WeihanLi.Common.Logging.Serilog
- uid: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions
  name: LogHelperFactoryExtensions
  href: api/WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.yml
  commentId: T:WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions
  fullName: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions
  nameWithType: LogHelperFactoryExtensions
- uid: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,Serilog.LoggerConfiguration)
  name: AddSerilog(ILogHelperLoggingBuilder, LoggerConfiguration)
  href: api/WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,Serilog.LoggerConfiguration)
  fullName: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, Serilog.LoggerConfiguration)
  nameWithType: LogHelperFactoryExtensions.AddSerilog(ILogHelperLoggingBuilder, LoggerConfiguration)
- uid: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Action{Serilog.LoggerConfiguration})
  name: AddSerilog(ILogHelperLoggingBuilder, Action<LoggerConfiguration>)
  href: api/WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder,System.Action{Serilog.LoggerConfiguration})
  name.vb: AddSerilog(ILogHelperLoggingBuilder, Action(Of LoggerConfiguration))
  fullName: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Action<Serilog.LoggerConfiguration>)
  fullName.vb: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog(WeihanLi.Common.Logging.ILogHelperLoggingBuilder, System.Action(Of Serilog.LoggerConfiguration))
  nameWithType: LogHelperFactoryExtensions.AddSerilog(ILogHelperLoggingBuilder, Action<LoggerConfiguration>)
  nameWithType.vb: LogHelperFactoryExtensions.AddSerilog(ILogHelperLoggingBuilder, Action(Of LoggerConfiguration))
- uid: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog*
  name: AddSerilog
  href: api/WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Serilog.LogHelperFactoryExtensions.AddSerilog
  nameWithType: LogHelperFactoryExtensions.AddSerilog
- uid: WeihanLi.Common.Logging.Serilog.SerilogHelper
  name: SerilogHelper
  href: api/WeihanLi.Common.Logging.Serilog.SerilogHelper.yml
  commentId: T:WeihanLi.Common.Logging.Serilog.SerilogHelper
  fullName: WeihanLi.Common.Logging.Serilog.SerilogHelper
  nameWithType: SerilogHelper
- uid: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(Serilog.LoggerConfiguration)
  name: LogInit(LoggerConfiguration)
  href: api/WeihanLi.Common.Logging.Serilog.SerilogHelper.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(Serilog.LoggerConfiguration)
  fullName: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(Serilog.LoggerConfiguration)
  nameWithType: SerilogHelper.LogInit(LoggerConfiguration)
- uid: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(System.Action{Serilog.LoggerConfiguration})
  name: LogInit(Action<LoggerConfiguration>)
  href: api/WeihanLi.Common.Logging.Serilog.SerilogHelper.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(System.Action{Serilog.LoggerConfiguration})
  name.vb: LogInit(Action(Of LoggerConfiguration))
  fullName: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(System.Action<Serilog.LoggerConfiguration>)
  fullName.vb: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit(System.Action(Of Serilog.LoggerConfiguration))
  nameWithType: SerilogHelper.LogInit(Action<LoggerConfiguration>)
  nameWithType.vb: SerilogHelper.LogInit(Action(Of LoggerConfiguration))
- uid: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit*
  name: LogInit
  href: api/WeihanLi.Common.Logging.Serilog.SerilogHelper.yml
  commentId: Overload:WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Serilog.SerilogHelper.LogInit
  nameWithType: SerilogHelper.LogInit
- uid: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions
  name: SerilogLoggerExtensions
  href: api/WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.yml
  commentId: T:WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions
  fullName: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions
  nameWithType: SerilogLoggerExtensions
- uid: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggerFactory,Serilog.ILogger,System.Boolean)
  name: AddSerilog(ILoggerFactory, ILogger?, bool)
  href: api/WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggerFactory,Serilog.ILogger,System.Boolean)
  name.vb: AddSerilog(ILoggerFactory, ILogger, Boolean)
  fullName: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggerFactory, Serilog.ILogger?, bool)
  fullName.vb: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggerFactory, Serilog.ILogger, Boolean)
  nameWithType: SerilogLoggerExtensions.AddSerilog(ILoggerFactory, ILogger?, bool)
  nameWithType.vb: SerilogLoggerExtensions.AddSerilog(ILoggerFactory, ILogger, Boolean)
- uid: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggingBuilder,Serilog.ILogger,System.Boolean)
  name: AddSerilog(ILoggingBuilder, ILogger?, bool)
  href: api/WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.yml
  commentId: M:WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggingBuilder,Serilog.ILogger,System.Boolean)
  name.vb: AddSerilog(ILoggingBuilder, ILogger, Boolean)
  fullName: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggingBuilder, Serilog.ILogger?, bool)
  fullName.vb: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog(Microsoft.Extensions.Logging.ILoggingBuilder, Serilog.ILogger, Boolean)
  nameWithType: SerilogLoggerExtensions.AddSerilog(ILoggingBuilder, ILogger?, bool)
  nameWithType.vb: SerilogLoggerExtensions.AddSerilog(ILoggingBuilder, ILogger, Boolean)
- uid: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog*
  name: AddSerilog
  href: api/WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.yml
  commentId: Overload:WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog
  isSpec: "True"
  fullName: WeihanLi.Common.Logging.Serilog.SerilogLoggerExtensions.AddSerilog
  nameWithType: SerilogLoggerExtensions.AddSerilog
- uid: WeihanLi.Common.Models
  name: WeihanLi.Common.Models
  href: api/WeihanLi.Common.Models.yml
  commentId: N:WeihanLi.Common.Models
  fullName: WeihanLi.Common.Models
  nameWithType: WeihanLi.Common.Models
- uid: WeihanLi.Common.Models.BaseEntity
  name: BaseEntity
  href: api/WeihanLi.Common.Models.BaseEntity.yml
  commentId: T:WeihanLi.Common.Models.BaseEntity
  fullName: WeihanLi.Common.Models.BaseEntity
  nameWithType: BaseEntity
- uid: WeihanLi.Common.Models.BaseEntity`1
  name: BaseEntity<TKey>
  href: api/WeihanLi.Common.Models.BaseEntity-1.yml
  commentId: T:WeihanLi.Common.Models.BaseEntity`1
  name.vb: BaseEntity(Of TKey)
  fullName: WeihanLi.Common.Models.BaseEntity<TKey>
  fullName.vb: WeihanLi.Common.Models.BaseEntity(Of TKey)
  nameWithType: BaseEntity<TKey>
  nameWithType.vb: BaseEntity(Of TKey)
- uid: WeihanLi.Common.Models.BaseEntity`1.Id
  name: Id
  href: api/WeihanLi.Common.Models.BaseEntity-1.yml
  commentId: P:WeihanLi.Common.Models.BaseEntity`1.Id
  fullName: WeihanLi.Common.Models.BaseEntity<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.BaseEntity(Of TKey).Id
  nameWithType: BaseEntity<TKey>.Id
  nameWithType.vb: BaseEntity(Of TKey).Id
- uid: WeihanLi.Common.Models.BaseEntity`1.Id*
  name: Id
  href: api/WeihanLi.Common.Models.BaseEntity-1.yml
  commentId: Overload:WeihanLi.Common.Models.BaseEntity`1.Id
  isSpec: "True"
  fullName: WeihanLi.Common.Models.BaseEntity<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.BaseEntity(Of TKey).Id
  nameWithType: BaseEntity<TKey>.Id
  nameWithType.vb: BaseEntity(Of TKey).Id
- uid: WeihanLi.Common.Models.BaseEntityWithDeleted
  name: BaseEntityWithDeleted
  href: api/WeihanLi.Common.Models.BaseEntityWithDeleted.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithDeleted
  fullName: WeihanLi.Common.Models.BaseEntityWithDeleted
  nameWithType: BaseEntityWithDeleted
- uid: WeihanLi.Common.Models.BaseEntityWithDeleted`1
  name: BaseEntityWithDeleted<TKey>
  href: api/WeihanLi.Common.Models.BaseEntityWithDeleted-1.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithDeleted`1
  name.vb: BaseEntityWithDeleted(Of TKey)
  fullName: WeihanLi.Common.Models.BaseEntityWithDeleted<TKey>
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithDeleted(Of TKey)
  nameWithType: BaseEntityWithDeleted<TKey>
  nameWithType.vb: BaseEntityWithDeleted(Of TKey)
- uid: WeihanLi.Common.Models.BaseEntityWithDeleted`1.IsDeleted
  name: IsDeleted
  href: api/WeihanLi.Common.Models.BaseEntityWithDeleted-1.yml
  commentId: P:WeihanLi.Common.Models.BaseEntityWithDeleted`1.IsDeleted
  fullName: WeihanLi.Common.Models.BaseEntityWithDeleted<TKey>.IsDeleted
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithDeleted(Of TKey).IsDeleted
  nameWithType: BaseEntityWithDeleted<TKey>.IsDeleted
  nameWithType.vb: BaseEntityWithDeleted(Of TKey).IsDeleted
- uid: WeihanLi.Common.Models.BaseEntityWithDeleted`1.IsDeleted*
  name: IsDeleted
  href: api/WeihanLi.Common.Models.BaseEntityWithDeleted-1.yml
  commentId: Overload:WeihanLi.Common.Models.BaseEntityWithDeleted`1.IsDeleted
  isSpec: "True"
  fullName: WeihanLi.Common.Models.BaseEntityWithDeleted<TKey>.IsDeleted
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithDeleted(Of TKey).IsDeleted
  nameWithType: BaseEntityWithDeleted<TKey>.IsDeleted
  nameWithType.vb: BaseEntityWithDeleted(Of TKey).IsDeleted
- uid: WeihanLi.Common.Models.BaseEntityWithReviewState
  name: BaseEntityWithReviewState
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewState.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithReviewState
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewState
  nameWithType: BaseEntityWithReviewState
- uid: WeihanLi.Common.Models.BaseEntityWithReviewState`1
  name: BaseEntityWithReviewState<TKey>
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewState-1.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithReviewState`1
  name.vb: BaseEntityWithReviewState(Of TKey)
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewState<TKey>
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewState(Of TKey)
  nameWithType: BaseEntityWithReviewState<TKey>
  nameWithType.vb: BaseEntityWithReviewState(Of TKey)
- uid: WeihanLi.Common.Models.BaseEntityWithReviewState`1.State
  name: State
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewState-1.yml
  commentId: P:WeihanLi.Common.Models.BaseEntityWithReviewState`1.State
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewState<TKey>.State
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewState(Of TKey).State
  nameWithType: BaseEntityWithReviewState<TKey>.State
  nameWithType.vb: BaseEntityWithReviewState(Of TKey).State
- uid: WeihanLi.Common.Models.BaseEntityWithReviewState`1.State*
  name: State
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewState-1.yml
  commentId: Overload:WeihanLi.Common.Models.BaseEntityWithReviewState`1.State
  isSpec: "True"
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewState<TKey>.State
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewState(Of TKey).State
  nameWithType: BaseEntityWithReviewState<TKey>.State
  nameWithType.vb: BaseEntityWithReviewState(Of TKey).State
- uid: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted
  name: BaseEntityWithReviewStateWithDeleted
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted
  nameWithType: BaseEntityWithReviewStateWithDeleted
- uid: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1
  name: BaseEntityWithReviewStateWithDeleted<TKey>
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted-1.yml
  commentId: T:WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1
  name.vb: BaseEntityWithReviewStateWithDeleted(Of TKey)
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted<TKey>
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted(Of TKey)
  nameWithType: BaseEntityWithReviewStateWithDeleted<TKey>
  nameWithType.vb: BaseEntityWithReviewStateWithDeleted(Of TKey)
- uid: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1.State
  name: State
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted-1.yml
  commentId: P:WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1.State
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted<TKey>.State
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted(Of TKey).State
  nameWithType: BaseEntityWithReviewStateWithDeleted<TKey>.State
  nameWithType.vb: BaseEntityWithReviewStateWithDeleted(Of TKey).State
- uid: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1.State*
  name: State
  href: api/WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted-1.yml
  commentId: Overload:WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted`1.State
  isSpec: "True"
  fullName: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted<TKey>.State
  fullName.vb: WeihanLi.Common.Models.BaseEntityWithReviewStateWithDeleted(Of TKey).State
  nameWithType: BaseEntityWithReviewStateWithDeleted<TKey>.State
  nameWithType.vb: BaseEntityWithReviewStateWithDeleted(Of TKey).State
- uid: WeihanLi.Common.Models.Category
  name: Category
  href: api/WeihanLi.Common.Models.Category.yml
  commentId: T:WeihanLi.Common.Models.Category
  fullName: WeihanLi.Common.Models.Category
  nameWithType: Category
- uid: WeihanLi.Common.Models.Category`1
  name: Category<TKey>
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: T:WeihanLi.Common.Models.Category`1
  name.vb: Category(Of TKey)
  fullName: WeihanLi.Common.Models.Category<TKey>
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey)
  nameWithType: Category<TKey>
  nameWithType.vb: Category(Of TKey)
- uid: WeihanLi.Common.Models.Category`1.Id
  name: Id
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: P:WeihanLi.Common.Models.Category`1.Id
  fullName: WeihanLi.Common.Models.Category<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).Id
  nameWithType: Category<TKey>.Id
  nameWithType.vb: Category(Of TKey).Id
- uid: WeihanLi.Common.Models.Category`1.Id*
  name: Id
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: Overload:WeihanLi.Common.Models.Category`1.Id
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Category<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).Id
  nameWithType: Category<TKey>.Id
  nameWithType.vb: Category(Of TKey).Id
- uid: WeihanLi.Common.Models.Category`1.Name
  name: Name
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: P:WeihanLi.Common.Models.Category`1.Name
  fullName: WeihanLi.Common.Models.Category<TKey>.Name
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).Name
  nameWithType: Category<TKey>.Name
  nameWithType.vb: Category(Of TKey).Name
- uid: WeihanLi.Common.Models.Category`1.Name*
  name: Name
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: Overload:WeihanLi.Common.Models.Category`1.Name
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Category<TKey>.Name
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).Name
  nameWithType: Category<TKey>.Name
  nameWithType.vb: Category(Of TKey).Name
- uid: WeihanLi.Common.Models.Category`1.ParentId
  name: ParentId
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: P:WeihanLi.Common.Models.Category`1.ParentId
  fullName: WeihanLi.Common.Models.Category<TKey>.ParentId
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).ParentId
  nameWithType: Category<TKey>.ParentId
  nameWithType.vb: Category(Of TKey).ParentId
- uid: WeihanLi.Common.Models.Category`1.ParentId*
  name: ParentId
  href: api/WeihanLi.Common.Models.Category-1.yml
  commentId: Overload:WeihanLi.Common.Models.Category`1.ParentId
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Category<TKey>.ParentId
  fullName.vb: WeihanLi.Common.Models.Category(Of TKey).ParentId
  nameWithType: Category<TKey>.ParentId
  nameWithType.vb: Category(Of TKey).ParentId
- uid: WeihanLi.Common.Models.CategoryWithDesc
  name: CategoryWithDesc
  href: api/WeihanLi.Common.Models.CategoryWithDesc.yml
  commentId: T:WeihanLi.Common.Models.CategoryWithDesc
  fullName: WeihanLi.Common.Models.CategoryWithDesc
  nameWithType: CategoryWithDesc
- uid: WeihanLi.Common.Models.CategoryWithDesc.Description
  name: Description
  href: api/WeihanLi.Common.Models.CategoryWithDesc.yml
  commentId: P:WeihanLi.Common.Models.CategoryWithDesc.Description
  fullName: WeihanLi.Common.Models.CategoryWithDesc.Description
  nameWithType: CategoryWithDesc.Description
- uid: WeihanLi.Common.Models.CategoryWithDesc.Description*
  name: Description
  href: api/WeihanLi.Common.Models.CategoryWithDesc.yml
  commentId: Overload:WeihanLi.Common.Models.CategoryWithDesc.Description
  isSpec: "True"
  fullName: WeihanLi.Common.Models.CategoryWithDesc.Description
  nameWithType: CategoryWithDesc.Description
- uid: WeihanLi.Common.Models.DataOperationType
  name: DataOperationType
  href: api/WeihanLi.Common.Models.DataOperationType.yml
  commentId: T:WeihanLi.Common.Models.DataOperationType
  fullName: WeihanLi.Common.Models.DataOperationType
  nameWithType: DataOperationType
- uid: WeihanLi.Common.Models.DataOperationType.Add
  name: Add
  href: api/WeihanLi.Common.Models.DataOperationType.yml
  commentId: F:WeihanLi.Common.Models.DataOperationType.Add
  fullName: WeihanLi.Common.Models.DataOperationType.Add
  nameWithType: DataOperationType.Add
- uid: WeihanLi.Common.Models.DataOperationType.Delete
  name: Delete
  href: api/WeihanLi.Common.Models.DataOperationType.yml
  commentId: F:WeihanLi.Common.Models.DataOperationType.Delete
  fullName: WeihanLi.Common.Models.DataOperationType.Delete
  nameWithType: DataOperationType.Delete
- uid: WeihanLi.Common.Models.DataOperationType.Query
  name: Query
  href: api/WeihanLi.Common.Models.DataOperationType.yml
  commentId: F:WeihanLi.Common.Models.DataOperationType.Query
  fullName: WeihanLi.Common.Models.DataOperationType.Query
  nameWithType: DataOperationType.Query
- uid: WeihanLi.Common.Models.DataOperationType.Update
  name: Update
  href: api/WeihanLi.Common.Models.DataOperationType.yml
  commentId: F:WeihanLi.Common.Models.DataOperationType.Update
  fullName: WeihanLi.Common.Models.DataOperationType.Update
  nameWithType: DataOperationType.Update
- uid: WeihanLi.Common.Models.EnumerableExtensions
  name: EnumerableExtensions
  href: api/WeihanLi.Common.Models.EnumerableExtensions.yml
  commentId: T:WeihanLi.Common.Models.EnumerableExtensions
  fullName: WeihanLi.Common.Models.EnumerableExtensions
  nameWithType: EnumerableExtensions
- uid: WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator*
  name: GetEnumerator
  href: api/WeihanLi.Common.Models.EnumerableExtensions.yml
  commentId: Overload:WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator
  isSpec: "True"
  fullName: WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator
  nameWithType: EnumerableExtensions.GetEnumerator
- uid: WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator``1(WeihanLi.Common.Models.IListResultWithTotal{``0})
  name: GetEnumerator<T>(IListResultWithTotal<T>)
  href: api/WeihanLi.Common.Models.EnumerableExtensions.yml
  commentId: M:WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator``1(WeihanLi.Common.Models.IListResultWithTotal{``0})
  name.vb: GetEnumerator(Of T)(IListResultWithTotal(Of T))
  fullName: WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator<T>(WeihanLi.Common.Models.IListResultWithTotal<T>)
  fullName.vb: WeihanLi.Common.Models.EnumerableExtensions.GetEnumerator(Of T)(WeihanLi.Common.Models.IListResultWithTotal(Of T))
  nameWithType: EnumerableExtensions.GetEnumerator<T>(IListResultWithTotal<T>)
  nameWithType.vb: EnumerableExtensions.GetEnumerator(Of T)(IListResultWithTotal(Of T))
- uid: WeihanLi.Common.Models.IdNameDescModel
  name: IdNameDescModel
  href: api/WeihanLi.Common.Models.IdNameDescModel.yml
  commentId: T:WeihanLi.Common.Models.IdNameDescModel
  fullName: WeihanLi.Common.Models.IdNameDescModel
  nameWithType: IdNameDescModel
- uid: WeihanLi.Common.Models.IdNameDescModel`1
  name: IdNameDescModel<TKey>
  href: api/WeihanLi.Common.Models.IdNameDescModel-1.yml
  commentId: T:WeihanLi.Common.Models.IdNameDescModel`1
  name.vb: IdNameDescModel(Of TKey)
  fullName: WeihanLi.Common.Models.IdNameDescModel<TKey>
  fullName.vb: WeihanLi.Common.Models.IdNameDescModel(Of TKey)
  nameWithType: IdNameDescModel<TKey>
  nameWithType.vb: IdNameDescModel(Of TKey)
- uid: WeihanLi.Common.Models.IdNameDescModel`1.Deconstruct(`0@,System.String@,System.String@)
  name: Deconstruct(out TKey, out string, out string?)
  href: api/WeihanLi.Common.Models.IdNameDescModel-1.yml
  commentId: M:WeihanLi.Common.Models.IdNameDescModel`1.Deconstruct(`0@,System.String@,System.String@)
  name.vb: Deconstruct(TKey, String, String)
  fullName: WeihanLi.Common.Models.IdNameDescModel<TKey>.Deconstruct(out TKey, out string, out string?)
  fullName.vb: WeihanLi.Common.Models.IdNameDescModel(Of TKey).Deconstruct(TKey, String, String)
  nameWithType: IdNameDescModel<TKey>.Deconstruct(out TKey, out string, out string?)
  nameWithType.vb: IdNameDescModel(Of TKey).Deconstruct(TKey, String, String)
- uid: WeihanLi.Common.Models.IdNameDescModel`1.Deconstruct*
  name: Deconstruct
  href: api/WeihanLi.Common.Models.IdNameDescModel-1.yml
  commentId: Overload:WeihanLi.Common.Models.IdNameDescModel`1.Deconstruct
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IdNameDescModel<TKey>.Deconstruct
  fullName.vb: WeihanLi.Common.Models.IdNameDescModel(Of TKey).Deconstruct
  nameWithType: IdNameDescModel<TKey>.Deconstruct
  nameWithType.vb: IdNameDescModel(Of TKey).Deconstruct
- uid: WeihanLi.Common.Models.IdNameDescModel`1.Description
  name: Description
  href: api/WeihanLi.Common.Models.IdNameDescModel-1.yml
  commentId: P:WeihanLi.Common.Models.IdNameDescModel`1.Description
  fullName: WeihanLi.Common.Models.IdNameDescModel<TKey>.Description
  fullName.vb: WeihanLi.Common.Models.IdNameDescModel(Of TKey).Description
  nameWithType: IdNameDescModel<TKey>.Description
  nameWithType.vb: IdNameDescModel(Of TKey).Description
- uid: WeihanLi.Common.Models.IdNameDescModel`1.Description*
  name: Description
  href: api/WeihanLi.Common.Models.IdNameDescModel-1.yml
  commentId: Overload:WeihanLi.Common.Models.IdNameDescModel`1.Description
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IdNameDescModel<TKey>.Description
  fullName.vb: WeihanLi.Common.Models.IdNameDescModel(Of TKey).Description
  nameWithType: IdNameDescModel<TKey>.Description
  nameWithType.vb: IdNameDescModel(Of TKey).Description
- uid: WeihanLi.Common.Models.IdNameModel
  name: IdNameModel
  href: api/WeihanLi.Common.Models.IdNameModel.yml
  commentId: T:WeihanLi.Common.Models.IdNameModel
  fullName: WeihanLi.Common.Models.IdNameModel
  nameWithType: IdNameModel
- uid: WeihanLi.Common.Models.IdNameModel`1
  name: IdNameModel<TKey>
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: T:WeihanLi.Common.Models.IdNameModel`1
  name.vb: IdNameModel(Of TKey)
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey)
  nameWithType: IdNameModel<TKey>
  nameWithType.vb: IdNameModel(Of TKey)
- uid: WeihanLi.Common.Models.IdNameModel`1.Deconstruct(`0@,System.String@)
  name: Deconstruct(out TKey, out string)
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: M:WeihanLi.Common.Models.IdNameModel`1.Deconstruct(`0@,System.String@)
  name.vb: Deconstruct(TKey, String)
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Deconstruct(out TKey, out string)
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Deconstruct(TKey, String)
  nameWithType: IdNameModel<TKey>.Deconstruct(out TKey, out string)
  nameWithType.vb: IdNameModel(Of TKey).Deconstruct(TKey, String)
- uid: WeihanLi.Common.Models.IdNameModel`1.Deconstruct*
  name: Deconstruct
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: Overload:WeihanLi.Common.Models.IdNameModel`1.Deconstruct
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Deconstruct
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Deconstruct
  nameWithType: IdNameModel<TKey>.Deconstruct
  nameWithType.vb: IdNameModel(Of TKey).Deconstruct
- uid: WeihanLi.Common.Models.IdNameModel`1.Id
  name: Id
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: P:WeihanLi.Common.Models.IdNameModel`1.Id
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Id
  nameWithType: IdNameModel<TKey>.Id
  nameWithType.vb: IdNameModel(Of TKey).Id
- uid: WeihanLi.Common.Models.IdNameModel`1.Id*
  name: Id
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: Overload:WeihanLi.Common.Models.IdNameModel`1.Id
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Id
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Id
  nameWithType: IdNameModel<TKey>.Id
  nameWithType.vb: IdNameModel(Of TKey).Id
- uid: WeihanLi.Common.Models.IdNameModel`1.Name
  name: Name
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: P:WeihanLi.Common.Models.IdNameModel`1.Name
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Name
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Name
  nameWithType: IdNameModel<TKey>.Name
  nameWithType.vb: IdNameModel(Of TKey).Name
- uid: WeihanLi.Common.Models.IdNameModel`1.Name*
  name: Name
  href: api/WeihanLi.Common.Models.IdNameModel-1.yml
  commentId: Overload:WeihanLi.Common.Models.IdNameModel`1.Name
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IdNameModel<TKey>.Name
  fullName.vb: WeihanLi.Common.Models.IdNameModel(Of TKey).Name
  nameWithType: IdNameModel<TKey>.Name
  nameWithType.vb: IdNameModel(Of TKey).Name
- uid: WeihanLi.Common.Models.IListResultWithTotal`1
  name: IListResultWithTotal<T>
  href: api/WeihanLi.Common.Models.IListResultWithTotal-1.yml
  commentId: T:WeihanLi.Common.Models.IListResultWithTotal`1
  name.vb: IListResultWithTotal(Of T)
  fullName: WeihanLi.Common.Models.IListResultWithTotal<T>
  fullName.vb: WeihanLi.Common.Models.IListResultWithTotal(Of T)
  nameWithType: IListResultWithTotal<T>
  nameWithType.vb: IListResultWithTotal(Of T)
- uid: WeihanLi.Common.Models.IListResultWithTotal`1.Data
  name: Data
  href: api/WeihanLi.Common.Models.IListResultWithTotal-1.yml
  commentId: P:WeihanLi.Common.Models.IListResultWithTotal`1.Data
  fullName: WeihanLi.Common.Models.IListResultWithTotal<T>.Data
  fullName.vb: WeihanLi.Common.Models.IListResultWithTotal(Of T).Data
  nameWithType: IListResultWithTotal<T>.Data
  nameWithType.vb: IListResultWithTotal(Of T).Data
- uid: WeihanLi.Common.Models.IListResultWithTotal`1.Data*
  name: Data
  href: api/WeihanLi.Common.Models.IListResultWithTotal-1.yml
  commentId: Overload:WeihanLi.Common.Models.IListResultWithTotal`1.Data
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IListResultWithTotal<T>.Data
  fullName.vb: WeihanLi.Common.Models.IListResultWithTotal(Of T).Data
  nameWithType: IListResultWithTotal<T>.Data
  nameWithType.vb: IListResultWithTotal(Of T).Data
- uid: WeihanLi.Common.Models.IListResultWithTotal`1.TotalCount
  name: TotalCount
  href: api/WeihanLi.Common.Models.IListResultWithTotal-1.yml
  commentId: P:WeihanLi.Common.Models.IListResultWithTotal`1.TotalCount
  fullName: WeihanLi.Common.Models.IListResultWithTotal<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.IListResultWithTotal(Of T).TotalCount
  nameWithType: IListResultWithTotal<T>.TotalCount
  nameWithType.vb: IListResultWithTotal(Of T).TotalCount
- uid: WeihanLi.Common.Models.IListResultWithTotal`1.TotalCount*
  name: TotalCount
  href: api/WeihanLi.Common.Models.IListResultWithTotal-1.yml
  commentId: Overload:WeihanLi.Common.Models.IListResultWithTotal`1.TotalCount
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IListResultWithTotal<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.IListResultWithTotal(Of T).TotalCount
  nameWithType: IListResultWithTotal<T>.TotalCount
  nameWithType.vb: IListResultWithTotal(Of T).TotalCount
- uid: WeihanLi.Common.Models.IPagedListResult`1
  name: IPagedListResult<T>
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: T:WeihanLi.Common.Models.IPagedListResult`1
  name.vb: IPagedListResult(Of T)
  fullName: WeihanLi.Common.Models.IPagedListResult<T>
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T)
  nameWithType: IPagedListResult<T>
  nameWithType.vb: IPagedListResult(Of T)
- uid: WeihanLi.Common.Models.IPagedListResult`1.Count
  name: Count
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.IPagedListResult`1.Count
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.Count
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).Count
  nameWithType: IPagedListResult<T>.Count
  nameWithType.vb: IPagedListResult(Of T).Count
- uid: WeihanLi.Common.Models.IPagedListResult`1.Count*
  name: Count
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.IPagedListResult`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.Count
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).Count
  nameWithType: IPagedListResult<T>.Count
  nameWithType.vb: IPagedListResult(Of T).Count
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageCount
  name: PageCount
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.IPagedListResult`1.PageCount
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageCount
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageCount
  nameWithType: IPagedListResult<T>.PageCount
  nameWithType.vb: IPagedListResult(Of T).PageCount
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageCount*
  name: PageCount
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.IPagedListResult`1.PageCount
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageCount
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageCount
  nameWithType: IPagedListResult<T>.PageCount
  nameWithType.vb: IPagedListResult(Of T).PageCount
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageNumber
  name: PageNumber
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.IPagedListResult`1.PageNumber
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageNumber
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageNumber
  nameWithType: IPagedListResult<T>.PageNumber
  nameWithType.vb: IPagedListResult(Of T).PageNumber
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageNumber*
  name: PageNumber
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.IPagedListResult`1.PageNumber
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageNumber
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageNumber
  nameWithType: IPagedListResult<T>.PageNumber
  nameWithType.vb: IPagedListResult(Of T).PageNumber
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageSize
  name: PageSize
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.IPagedListResult`1.PageSize
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageSize
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageSize
  nameWithType: IPagedListResult<T>.PageSize
  nameWithType.vb: IPagedListResult(Of T).PageSize
- uid: WeihanLi.Common.Models.IPagedListResult`1.PageSize*
  name: PageSize
  href: api/WeihanLi.Common.Models.IPagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.IPagedListResult`1.PageSize
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IPagedListResult<T>.PageSize
  fullName.vb: WeihanLi.Common.Models.IPagedListResult(Of T).PageSize
  nameWithType: IPagedListResult<T>.PageSize
  nameWithType.vb: IPagedListResult(Of T).PageSize
- uid: WeihanLi.Common.Models.ISoftDeleteEntity
  name: ISoftDeleteEntity
  href: api/WeihanLi.Common.Models.ISoftDeleteEntity.yml
  commentId: T:WeihanLi.Common.Models.ISoftDeleteEntity
  fullName: WeihanLi.Common.Models.ISoftDeleteEntity
  nameWithType: ISoftDeleteEntity
- uid: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted
  name: ISoftDeleteEntityWithDeleted
  href: api/WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.yml
  commentId: T:WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted
  fullName: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted
  nameWithType: ISoftDeleteEntityWithDeleted
- uid: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted
  name: IsDeleted
  href: api/WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.yml
  commentId: P:WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted
  fullName: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted
  nameWithType: ISoftDeleteEntityWithDeleted.IsDeleted
- uid: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted*
  name: IsDeleted
  href: api/WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.yml
  commentId: Overload:WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ISoftDeleteEntityWithDeleted.IsDeleted
  nameWithType: ISoftDeleteEntityWithDeleted.IsDeleted
- uid: WeihanLi.Common.Models.IValidationResult
  name: IValidationResult
  href: api/WeihanLi.Common.Models.IValidationResult.yml
  commentId: T:WeihanLi.Common.Models.IValidationResult
  fullName: WeihanLi.Common.Models.IValidationResult
  nameWithType: IValidationResult
- uid: WeihanLi.Common.Models.IValidationResult.Errors
  name: Errors
  href: api/WeihanLi.Common.Models.IValidationResult.yml
  commentId: P:WeihanLi.Common.Models.IValidationResult.Errors
  fullName: WeihanLi.Common.Models.IValidationResult.Errors
  nameWithType: IValidationResult.Errors
- uid: WeihanLi.Common.Models.IValidationResult.Errors*
  name: Errors
  href: api/WeihanLi.Common.Models.IValidationResult.yml
  commentId: Overload:WeihanLi.Common.Models.IValidationResult.Errors
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IValidationResult.Errors
  nameWithType: IValidationResult.Errors
- uid: WeihanLi.Common.Models.IValidationResult.Valid
  name: Valid
  href: api/WeihanLi.Common.Models.IValidationResult.yml
  commentId: P:WeihanLi.Common.Models.IValidationResult.Valid
  fullName: WeihanLi.Common.Models.IValidationResult.Valid
  nameWithType: IValidationResult.Valid
- uid: WeihanLi.Common.Models.IValidationResult.Valid*
  name: Valid
  href: api/WeihanLi.Common.Models.IValidationResult.yml
  commentId: Overload:WeihanLi.Common.Models.IValidationResult.Valid
  isSpec: "True"
  fullName: WeihanLi.Common.Models.IValidationResult.Valid
  nameWithType: IValidationResult.Valid
- uid: WeihanLi.Common.Models.KeyEntry
  name: KeyEntry
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: T:WeihanLi.Common.Models.KeyEntry
  fullName: WeihanLi.Common.Models.KeyEntry
  nameWithType: KeyEntry
- uid: WeihanLi.Common.Models.KeyEntry.ColumnName
  name: ColumnName
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: P:WeihanLi.Common.Models.KeyEntry.ColumnName
  fullName: WeihanLi.Common.Models.KeyEntry.ColumnName
  nameWithType: KeyEntry.ColumnName
- uid: WeihanLi.Common.Models.KeyEntry.ColumnName*
  name: ColumnName
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: Overload:WeihanLi.Common.Models.KeyEntry.ColumnName
  isSpec: "True"
  fullName: WeihanLi.Common.Models.KeyEntry.ColumnName
  nameWithType: KeyEntry.ColumnName
- uid: WeihanLi.Common.Models.KeyEntry.PropertyName
  name: PropertyName
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: P:WeihanLi.Common.Models.KeyEntry.PropertyName
  fullName: WeihanLi.Common.Models.KeyEntry.PropertyName
  nameWithType: KeyEntry.PropertyName
- uid: WeihanLi.Common.Models.KeyEntry.PropertyName*
  name: PropertyName
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: Overload:WeihanLi.Common.Models.KeyEntry.PropertyName
  isSpec: "True"
  fullName: WeihanLi.Common.Models.KeyEntry.PropertyName
  nameWithType: KeyEntry.PropertyName
- uid: WeihanLi.Common.Models.KeyEntry.Value
  name: Value
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: P:WeihanLi.Common.Models.KeyEntry.Value
  fullName: WeihanLi.Common.Models.KeyEntry.Value
  nameWithType: KeyEntry.Value
- uid: WeihanLi.Common.Models.KeyEntry.Value*
  name: Value
  href: api/WeihanLi.Common.Models.KeyEntry.yml
  commentId: Overload:WeihanLi.Common.Models.KeyEntry.Value
  isSpec: "True"
  fullName: WeihanLi.Common.Models.KeyEntry.Value
  nameWithType: KeyEntry.Value
- uid: WeihanLi.Common.Models.ListResultWithTotal`1
  name: ListResultWithTotal<T>
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: T:WeihanLi.Common.Models.ListResultWithTotal`1
  name.vb: ListResultWithTotal(Of T)
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T)
  nameWithType: ListResultWithTotal<T>
  nameWithType.vb: ListResultWithTotal(Of T)
- uid: WeihanLi.Common.Models.ListResultWithTotal`1.Data
  name: Data
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: P:WeihanLi.Common.Models.ListResultWithTotal`1.Data
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>.Data
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T).Data
  nameWithType: ListResultWithTotal<T>.Data
  nameWithType.vb: ListResultWithTotal(Of T).Data
- uid: WeihanLi.Common.Models.ListResultWithTotal`1.Data*
  name: Data
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: Overload:WeihanLi.Common.Models.ListResultWithTotal`1.Data
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>.Data
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T).Data
  nameWithType: ListResultWithTotal<T>.Data
  nameWithType.vb: ListResultWithTotal(Of T).Data
- uid: WeihanLi.Common.Models.ListResultWithTotal`1.Empty
  name: Empty
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: F:WeihanLi.Common.Models.ListResultWithTotal`1.Empty
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>.Empty
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T).Empty
  nameWithType: ListResultWithTotal<T>.Empty
  nameWithType.vb: ListResultWithTotal(Of T).Empty
- uid: WeihanLi.Common.Models.ListResultWithTotal`1.TotalCount
  name: TotalCount
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: P:WeihanLi.Common.Models.ListResultWithTotal`1.TotalCount
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T).TotalCount
  nameWithType: ListResultWithTotal<T>.TotalCount
  nameWithType.vb: ListResultWithTotal(Of T).TotalCount
- uid: WeihanLi.Common.Models.ListResultWithTotal`1.TotalCount*
  name: TotalCount
  href: api/WeihanLi.Common.Models.ListResultWithTotal-1.yml
  commentId: Overload:WeihanLi.Common.Models.ListResultWithTotal`1.TotalCount
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ListResultWithTotal<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.ListResultWithTotal(Of T).TotalCount
  nameWithType: ListResultWithTotal<T>.TotalCount
  nameWithType.vb: ListResultWithTotal(Of T).TotalCount
- uid: WeihanLi.Common.Models.ModelValidator
  name: ModelValidator
  href: api/WeihanLi.Common.Models.ModelValidator.yml
  commentId: T:WeihanLi.Common.Models.ModelValidator
  fullName: WeihanLi.Common.Models.ModelValidator
  nameWithType: ModelValidator
- uid: WeihanLi.Common.Models.ModelValidator.TryValidate(System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)
  name: TryValidate(object, out IReadOnlyDictionary<string, string>?)
  href: api/WeihanLi.Common.Models.ModelValidator.yml
  commentId: M:WeihanLi.Common.Models.ModelValidator.TryValidate(System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}@)
  name.vb: TryValidate(Object, IReadOnlyDictionary(Of String, String))
  fullName: WeihanLi.Common.Models.ModelValidator.TryValidate(object, out System.Collections.Generic.IReadOnlyDictionary<string, string>?)
  fullName.vb: WeihanLi.Common.Models.ModelValidator.TryValidate(Object, System.Collections.Generic.IReadOnlyDictionary(Of String, String))
  nameWithType: ModelValidator.TryValidate(object, out IReadOnlyDictionary<string, string>?)
  nameWithType.vb: ModelValidator.TryValidate(Object, IReadOnlyDictionary(Of String, String))
- uid: WeihanLi.Common.Models.ModelValidator.TryValidate(System.Object,System.String@)
  name: TryValidate(object, out string?)
  href: api/WeihanLi.Common.Models.ModelValidator.yml
  commentId: M:WeihanLi.Common.Models.ModelValidator.TryValidate(System.Object,System.String@)
  name.vb: TryValidate(Object, String)
  fullName: WeihanLi.Common.Models.ModelValidator.TryValidate(object, out string?)
  fullName.vb: WeihanLi.Common.Models.ModelValidator.TryValidate(Object, String)
  nameWithType: ModelValidator.TryValidate(object, out string?)
  nameWithType.vb: ModelValidator.TryValidate(Object, String)
- uid: WeihanLi.Common.Models.ModelValidator.TryValidate*
  name: TryValidate
  href: api/WeihanLi.Common.Models.ModelValidator.yml
  commentId: Overload:WeihanLi.Common.Models.ModelValidator.TryValidate
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ModelValidator.TryValidate
  nameWithType: ModelValidator.TryValidate
- uid: WeihanLi.Common.Models.PagedListResult`1
  name: PagedListResult<T>
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: T:WeihanLi.Common.Models.PagedListResult`1
  name.vb: PagedListResult(Of T)
  fullName: WeihanLi.Common.Models.PagedListResult<T>
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T)
  nameWithType: PagedListResult<T>
  nameWithType.vb: PagedListResult(Of T)
- uid: WeihanLi.Common.Models.PagedListResult`1.Count
  name: Count
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.Count
  fullName: WeihanLi.Common.Models.PagedListResult<T>.Count
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).Count
  nameWithType: PagedListResult<T>.Count
  nameWithType.vb: PagedListResult(Of T).Count
- uid: WeihanLi.Common.Models.PagedListResult`1.Count*
  name: Count
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.Count
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).Count
  nameWithType: PagedListResult<T>.Count
  nameWithType.vb: PagedListResult(Of T).Count
- uid: WeihanLi.Common.Models.PagedListResult`1.Data
  name: Data
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.Data
  fullName: WeihanLi.Common.Models.PagedListResult<T>.Data
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).Data
  nameWithType: PagedListResult<T>.Data
  nameWithType.vb: PagedListResult(Of T).Data
- uid: WeihanLi.Common.Models.PagedListResult`1.Data*
  name: Data
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.Data
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.Data
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).Data
  nameWithType: PagedListResult<T>.Data
  nameWithType.vb: PagedListResult(Of T).Data
- uid: WeihanLi.Common.Models.PagedListResult`1.Empty
  name: Empty
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: F:WeihanLi.Common.Models.PagedListResult`1.Empty
  fullName: WeihanLi.Common.Models.PagedListResult<T>.Empty
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).Empty
  nameWithType: PagedListResult<T>.Empty
  nameWithType.vb: PagedListResult(Of T).Empty
- uid: WeihanLi.Common.Models.PagedListResult`1.Item(System.Int32)
  name: this[int]
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.Item(System.Int32)
  name.vb: this[](Integer)
  fullName: WeihanLi.Common.Models.PagedListResult<T>.this[int]
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).this[](Integer)
  nameWithType: PagedListResult<T>.this[int]
  nameWithType.vb: PagedListResult(Of T).this[](Integer)
- uid: WeihanLi.Common.Models.PagedListResult`1.Item*
  name: this
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.Item
  isSpec: "True"
  name.vb: this[]
  fullName: WeihanLi.Common.Models.PagedListResult<T>.this
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).this[]
  nameWithType: PagedListResult<T>.this
  nameWithType.vb: PagedListResult(Of T).this[]
- uid: WeihanLi.Common.Models.PagedListResult`1.PageCount
  name: PageCount
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.PageCount
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageCount
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageCount
  nameWithType: PagedListResult<T>.PageCount
  nameWithType.vb: PagedListResult(Of T).PageCount
- uid: WeihanLi.Common.Models.PagedListResult`1.PageCount*
  name: PageCount
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.PageCount
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageCount
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageCount
  nameWithType: PagedListResult<T>.PageCount
  nameWithType.vb: PagedListResult(Of T).PageCount
- uid: WeihanLi.Common.Models.PagedListResult`1.PageNumber
  name: PageNumber
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.PageNumber
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageNumber
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageNumber
  nameWithType: PagedListResult<T>.PageNumber
  nameWithType.vb: PagedListResult(Of T).PageNumber
- uid: WeihanLi.Common.Models.PagedListResult`1.PageNumber*
  name: PageNumber
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.PageNumber
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageNumber
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageNumber
  nameWithType: PagedListResult<T>.PageNumber
  nameWithType.vb: PagedListResult(Of T).PageNumber
- uid: WeihanLi.Common.Models.PagedListResult`1.PageSize
  name: PageSize
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.PageSize
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageSize
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageSize
  nameWithType: PagedListResult<T>.PageSize
  nameWithType.vb: PagedListResult(Of T).PageSize
- uid: WeihanLi.Common.Models.PagedListResult`1.PageSize*
  name: PageSize
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.PageSize
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.PageSize
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).PageSize
  nameWithType: PagedListResult<T>.PageSize
  nameWithType.vb: PagedListResult(Of T).PageSize
- uid: WeihanLi.Common.Models.PagedListResult`1.TotalCount
  name: TotalCount
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: P:WeihanLi.Common.Models.PagedListResult`1.TotalCount
  fullName: WeihanLi.Common.Models.PagedListResult<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).TotalCount
  nameWithType: PagedListResult<T>.TotalCount
  nameWithType.vb: PagedListResult(Of T).TotalCount
- uid: WeihanLi.Common.Models.PagedListResult`1.TotalCount*
  name: TotalCount
  href: api/WeihanLi.Common.Models.PagedListResult-1.yml
  commentId: Overload:WeihanLi.Common.Models.PagedListResult`1.TotalCount
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedListResult<T>.TotalCount
  fullName.vb: WeihanLi.Common.Models.PagedListResult(Of T).TotalCount
  nameWithType: PagedListResult<T>.TotalCount
  nameWithType.vb: PagedListResult(Of T).TotalCount
- uid: WeihanLi.Common.Models.PagedRequest
  name: PagedRequest
  href: api/WeihanLi.Common.Models.PagedRequest.yml
  commentId: T:WeihanLi.Common.Models.PagedRequest
  fullName: WeihanLi.Common.Models.PagedRequest
  nameWithType: PagedRequest
- uid: WeihanLi.Common.Models.PagedRequest.PageNum
  name: PageNum
  href: api/WeihanLi.Common.Models.PagedRequest.yml
  commentId: P:WeihanLi.Common.Models.PagedRequest.PageNum
  fullName: WeihanLi.Common.Models.PagedRequest.PageNum
  nameWithType: PagedRequest.PageNum
- uid: WeihanLi.Common.Models.PagedRequest.PageNum*
  name: PageNum
  href: api/WeihanLi.Common.Models.PagedRequest.yml
  commentId: Overload:WeihanLi.Common.Models.PagedRequest.PageNum
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedRequest.PageNum
  nameWithType: PagedRequest.PageNum
- uid: WeihanLi.Common.Models.PagedRequest.PageSize
  name: PageSize
  href: api/WeihanLi.Common.Models.PagedRequest.yml
  commentId: P:WeihanLi.Common.Models.PagedRequest.PageSize
  fullName: WeihanLi.Common.Models.PagedRequest.PageSize
  nameWithType: PagedRequest.PageSize
- uid: WeihanLi.Common.Models.PagedRequest.PageSize*
  name: PageSize
  href: api/WeihanLi.Common.Models.PagedRequest.yml
  commentId: Overload:WeihanLi.Common.Models.PagedRequest.PageSize
  isSpec: "True"
  fullName: WeihanLi.Common.Models.PagedRequest.PageSize
  nameWithType: PagedRequest.PageSize
- uid: WeihanLi.Common.Models.Result
  name: Result
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: T:WeihanLi.Common.Models.Result
  fullName: WeihanLi.Common.Models.Result
  nameWithType: Result
- uid: WeihanLi.Common.Models.Result.Fail(System.String,WeihanLi.Common.Models.ResultStatus)
  name: Fail(string?, ResultStatus)
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: M:WeihanLi.Common.Models.Result.Fail(System.String,WeihanLi.Common.Models.ResultStatus)
  name.vb: Fail(String, ResultStatus)
  fullName: WeihanLi.Common.Models.Result.Fail(string?, WeihanLi.Common.Models.ResultStatus)
  fullName.vb: WeihanLi.Common.Models.Result.Fail(String, WeihanLi.Common.Models.ResultStatus)
  nameWithType: Result.Fail(string?, ResultStatus)
  nameWithType.vb: Result.Fail(String, ResultStatus)
- uid: WeihanLi.Common.Models.Result.Fail*
  name: Fail
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: Overload:WeihanLi.Common.Models.Result.Fail
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result.Fail
  nameWithType: Result.Fail
- uid: WeihanLi.Common.Models.Result.Fail``1(System.String,WeihanLi.Common.Models.ResultStatus,``0)
  name: Fail<T>(string?, ResultStatus, T?)
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: M:WeihanLi.Common.Models.Result.Fail``1(System.String,WeihanLi.Common.Models.ResultStatus,``0)
  name.vb: Fail(Of T)(String, ResultStatus, T)
  fullName: WeihanLi.Common.Models.Result.Fail<T>(string?, WeihanLi.Common.Models.ResultStatus, T?)
  fullName.vb: WeihanLi.Common.Models.Result.Fail(Of T)(String, WeihanLi.Common.Models.ResultStatus, T)
  nameWithType: Result.Fail<T>(string?, ResultStatus, T?)
  nameWithType.vb: Result.Fail(Of T)(String, ResultStatus, T)
- uid: WeihanLi.Common.Models.Result.Msg
  name: Msg
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: P:WeihanLi.Common.Models.Result.Msg
  fullName: WeihanLi.Common.Models.Result.Msg
  nameWithType: Result.Msg
- uid: WeihanLi.Common.Models.Result.Msg*
  name: Msg
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: Overload:WeihanLi.Common.Models.Result.Msg
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result.Msg
  nameWithType: Result.Msg
- uid: WeihanLi.Common.Models.Result.Status
  name: Status
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: P:WeihanLi.Common.Models.Result.Status
  fullName: WeihanLi.Common.Models.Result.Status
  nameWithType: Result.Status
- uid: WeihanLi.Common.Models.Result.Status*
  name: Status
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: Overload:WeihanLi.Common.Models.Result.Status
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result.Status
  nameWithType: Result.Status
- uid: WeihanLi.Common.Models.Result.Success(System.String)
  name: Success(string?)
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: M:WeihanLi.Common.Models.Result.Success(System.String)
  name.vb: Success(String)
  fullName: WeihanLi.Common.Models.Result.Success(string?)
  fullName.vb: WeihanLi.Common.Models.Result.Success(String)
  nameWithType: Result.Success(string?)
  nameWithType.vb: Result.Success(String)
- uid: WeihanLi.Common.Models.Result.Success*
  name: Success
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: Overload:WeihanLi.Common.Models.Result.Success
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result.Success
  nameWithType: Result.Success
- uid: WeihanLi.Common.Models.Result.Success``1(``0,System.String)
  name: Success<T>(T, string?)
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: M:WeihanLi.Common.Models.Result.Success``1(``0,System.String)
  name.vb: Success(Of T)(T, String)
  fullName: WeihanLi.Common.Models.Result.Success<T>(T, string?)
  fullName.vb: WeihanLi.Common.Models.Result.Success(Of T)(T, String)
  nameWithType: Result.Success<T>(T, string?)
  nameWithType.vb: Result.Success(Of T)(T, String)
- uid: WeihanLi.Common.Models.Result.ToResult*
  name: ToResult
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: Overload:WeihanLi.Common.Models.Result.ToResult
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result.ToResult
  nameWithType: Result.ToResult
- uid: WeihanLi.Common.Models.Result.ToResult``1(``0)
  name: ToResult<T>(T)
  href: api/WeihanLi.Common.Models.Result.yml
  commentId: M:WeihanLi.Common.Models.Result.ToResult``1(``0)
  name.vb: ToResult(Of T)(T)
  fullName: WeihanLi.Common.Models.Result.ToResult<T>(T)
  fullName.vb: WeihanLi.Common.Models.Result.ToResult(Of T)(T)
  nameWithType: Result.ToResult<T>(T)
  nameWithType.vb: Result.ToResult(Of T)(T)
- uid: WeihanLi.Common.Models.Result`1
  name: Result<T>
  href: api/WeihanLi.Common.Models.Result-1.yml
  commentId: T:WeihanLi.Common.Models.Result`1
  name.vb: Result(Of T)
  fullName: WeihanLi.Common.Models.Result<T>
  fullName.vb: WeihanLi.Common.Models.Result(Of T)
  nameWithType: Result<T>
  nameWithType.vb: Result(Of T)
- uid: WeihanLi.Common.Models.Result`1.Data
  name: Data
  href: api/WeihanLi.Common.Models.Result-1.yml
  commentId: P:WeihanLi.Common.Models.Result`1.Data
  fullName: WeihanLi.Common.Models.Result<T>.Data
  fullName.vb: WeihanLi.Common.Models.Result(Of T).Data
  nameWithType: Result<T>.Data
  nameWithType.vb: Result(Of T).Data
- uid: WeihanLi.Common.Models.Result`1.Data*
  name: Data
  href: api/WeihanLi.Common.Models.Result-1.yml
  commentId: Overload:WeihanLi.Common.Models.Result`1.Data
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result<T>.Data
  fullName.vb: WeihanLi.Common.Models.Result(Of T).Data
  nameWithType: Result<T>.Data
  nameWithType.vb: Result(Of T).Data
- uid: WeihanLi.Common.Models.Result`1.ToResult*
  name: ToResult
  href: api/WeihanLi.Common.Models.Result-1.yml
  commentId: Overload:WeihanLi.Common.Models.Result`1.ToResult
  isSpec: "True"
  fullName: WeihanLi.Common.Models.Result<T>.ToResult
  fullName.vb: WeihanLi.Common.Models.Result(Of T).ToResult
  nameWithType: Result<T>.ToResult
  nameWithType.vb: Result(Of T).ToResult
- uid: WeihanLi.Common.Models.Result`1.ToResult``1(System.Func{`0,``0})
  name: ToResult<T1>(Func<T?, T1>)
  href: api/WeihanLi.Common.Models.Result-1.yml
  commentId: M:WeihanLi.Common.Models.Result`1.ToResult``1(System.Func{`0,``0})
  name.vb: ToResult(Of T1)(Func(Of T, T1))
  fullName: WeihanLi.Common.Models.Result<T>.ToResult<T1>(System.Func<T?, T1>)
  fullName.vb: WeihanLi.Common.Models.Result(Of T).ToResult(Of T1)(System.Func(Of T, T1))
  nameWithType: Result<T>.ToResult<T1>(Func<T?, T1>)
  nameWithType.vb: Result(Of T).ToResult(Of T1)(Func(Of T, T1))
- uid: WeihanLi.Common.Models.ResultExtensions
  name: ResultExtensions
  href: api/WeihanLi.Common.Models.ResultExtensions.yml
  commentId: T:WeihanLi.Common.Models.ResultExtensions
  fullName: WeihanLi.Common.Models.ResultExtensions
  nameWithType: ResultExtensions
- uid: WeihanLi.Common.Models.ResultExtensions.IsSuccess(WeihanLi.Common.Models.Result)
  name: IsSuccess(Result)
  href: api/WeihanLi.Common.Models.ResultExtensions.yml
  commentId: M:WeihanLi.Common.Models.ResultExtensions.IsSuccess(WeihanLi.Common.Models.Result)
  fullName: WeihanLi.Common.Models.ResultExtensions.IsSuccess(WeihanLi.Common.Models.Result)
  nameWithType: ResultExtensions.IsSuccess(Result)
- uid: WeihanLi.Common.Models.ResultExtensions.IsSuccess*
  name: IsSuccess
  href: api/WeihanLi.Common.Models.ResultExtensions.yml
  commentId: Overload:WeihanLi.Common.Models.ResultExtensions.IsSuccess
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ResultExtensions.IsSuccess
  nameWithType: ResultExtensions.IsSuccess
- uid: WeihanLi.Common.Models.ResultExtensions.WrapResult*
  name: WrapResult
  href: api/WeihanLi.Common.Models.ResultExtensions.yml
  commentId: Overload:WeihanLi.Common.Models.ResultExtensions.WrapResult
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ResultExtensions.WrapResult
  nameWithType: ResultExtensions.WrapResult
- uid: WeihanLi.Common.Models.ResultExtensions.WrapResult``1(``0,WeihanLi.Common.Models.ResultStatus,System.String)
  name: WrapResult<T>(T, ResultStatus, string?)
  href: api/WeihanLi.Common.Models.ResultExtensions.yml
  commentId: M:WeihanLi.Common.Models.ResultExtensions.WrapResult``1(``0,WeihanLi.Common.Models.ResultStatus,System.String)
  name.vb: WrapResult(Of T)(T, ResultStatus, String)
  fullName: WeihanLi.Common.Models.ResultExtensions.WrapResult<T>(T, WeihanLi.Common.Models.ResultStatus, string?)
  fullName.vb: WeihanLi.Common.Models.ResultExtensions.WrapResult(Of T)(T, WeihanLi.Common.Models.ResultStatus, String)
  nameWithType: ResultExtensions.WrapResult<T>(T, ResultStatus, string?)
  nameWithType.vb: ResultExtensions.WrapResult(Of T)(T, ResultStatus, String)
- uid: WeihanLi.Common.Models.ResultStatus
  name: ResultStatus
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: T:WeihanLi.Common.Models.ResultStatus
  fullName: WeihanLi.Common.Models.ResultStatus
  nameWithType: ResultStatus
- uid: WeihanLi.Common.Models.ResultStatus.Accepted
  name: Accepted
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Accepted
  fullName: WeihanLi.Common.Models.ResultStatus.Accepted
  nameWithType: ResultStatus.Accepted
- uid: WeihanLi.Common.Models.ResultStatus.Continue
  name: Continue
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Continue
  fullName: WeihanLi.Common.Models.ResultStatus.Continue
  nameWithType: ResultStatus.Continue
- uid: WeihanLi.Common.Models.ResultStatus.Created
  name: Created
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Created
  fullName: WeihanLi.Common.Models.ResultStatus.Created
  nameWithType: ResultStatus.Created
- uid: WeihanLi.Common.Models.ResultStatus.MethodNotAllowed
  name: MethodNotAllowed
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.MethodNotAllowed
  fullName: WeihanLi.Common.Models.ResultStatus.MethodNotAllowed
  nameWithType: ResultStatus.MethodNotAllowed
- uid: WeihanLi.Common.Models.ResultStatus.None
  name: None
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.None
  fullName: WeihanLi.Common.Models.ResultStatus.None
  nameWithType: ResultStatus.None
- uid: WeihanLi.Common.Models.ResultStatus.NoPermission
  name: NoPermission
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.NoPermission
  fullName: WeihanLi.Common.Models.ResultStatus.NoPermission
  nameWithType: ResultStatus.NoPermission
- uid: WeihanLi.Common.Models.ResultStatus.NotImplemented
  name: NotImplemented
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.NotImplemented
  fullName: WeihanLi.Common.Models.ResultStatus.NotImplemented
  nameWithType: ResultStatus.NotImplemented
- uid: WeihanLi.Common.Models.ResultStatus.ProcessFail
  name: ProcessFail
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.ProcessFail
  fullName: WeihanLi.Common.Models.ResultStatus.ProcessFail
  nameWithType: ResultStatus.ProcessFail
- uid: WeihanLi.Common.Models.ResultStatus.Processing
  name: Processing
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Processing
  fullName: WeihanLi.Common.Models.ResultStatus.Processing
  nameWithType: ResultStatus.Processing
- uid: WeihanLi.Common.Models.ResultStatus.RequestError
  name: RequestError
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.RequestError
  fullName: WeihanLi.Common.Models.ResultStatus.RequestError
  nameWithType: ResultStatus.RequestError
- uid: WeihanLi.Common.Models.ResultStatus.RequestTimeout
  name: RequestTimeout
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.RequestTimeout
  fullName: WeihanLi.Common.Models.ResultStatus.RequestTimeout
  nameWithType: ResultStatus.RequestTimeout
- uid: WeihanLi.Common.Models.ResultStatus.ResourceNotFound
  name: ResourceNotFound
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.ResourceNotFound
  fullName: WeihanLi.Common.Models.ResultStatus.ResourceNotFound
  nameWithType: ResultStatus.ResourceNotFound
- uid: WeihanLi.Common.Models.ResultStatus.ServiceUnavailable
  name: ServiceUnavailable
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.ServiceUnavailable
  fullName: WeihanLi.Common.Models.ResultStatus.ServiceUnavailable
  nameWithType: ResultStatus.ServiceUnavailable
- uid: WeihanLi.Common.Models.ResultStatus.Success
  name: Success
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Success
  fullName: WeihanLi.Common.Models.ResultStatus.Success
  nameWithType: ResultStatus.Success
- uid: WeihanLi.Common.Models.ResultStatus.Unauthorized
  name: Unauthorized
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.Unauthorized
  fullName: WeihanLi.Common.Models.ResultStatus.Unauthorized
  nameWithType: ResultStatus.Unauthorized
- uid: WeihanLi.Common.Models.ResultStatus.VersionNotSupported
  name: VersionNotSupported
  href: api/WeihanLi.Common.Models.ResultStatus.yml
  commentId: F:WeihanLi.Common.Models.ResultStatus.VersionNotSupported
  fullName: WeihanLi.Common.Models.ResultStatus.VersionNotSupported
  nameWithType: ResultStatus.VersionNotSupported
- uid: WeihanLi.Common.Models.ReviewRequest
  name: ReviewRequest
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: T:WeihanLi.Common.Models.ReviewRequest
  fullName: WeihanLi.Common.Models.ReviewRequest
  nameWithType: ReviewRequest
- uid: WeihanLi.Common.Models.ReviewRequest.IsValid
  name: IsValid()
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: M:WeihanLi.Common.Models.ReviewRequest.IsValid
  fullName: WeihanLi.Common.Models.ReviewRequest.IsValid()
  nameWithType: ReviewRequest.IsValid()
- uid: WeihanLi.Common.Models.ReviewRequest.IsValid*
  name: IsValid
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: Overload:WeihanLi.Common.Models.ReviewRequest.IsValid
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ReviewRequest.IsValid
  nameWithType: ReviewRequest.IsValid
- uid: WeihanLi.Common.Models.ReviewRequest.Remark
  name: Remark
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: P:WeihanLi.Common.Models.ReviewRequest.Remark
  fullName: WeihanLi.Common.Models.ReviewRequest.Remark
  nameWithType: ReviewRequest.Remark
- uid: WeihanLi.Common.Models.ReviewRequest.Remark*
  name: Remark
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: Overload:WeihanLi.Common.Models.ReviewRequest.Remark
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ReviewRequest.Remark
  nameWithType: ReviewRequest.Remark
- uid: WeihanLi.Common.Models.ReviewRequest.State
  name: State
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: P:WeihanLi.Common.Models.ReviewRequest.State
  fullName: WeihanLi.Common.Models.ReviewRequest.State
  nameWithType: ReviewRequest.State
- uid: WeihanLi.Common.Models.ReviewRequest.State*
  name: State
  href: api/WeihanLi.Common.Models.ReviewRequest.yml
  commentId: Overload:WeihanLi.Common.Models.ReviewRequest.State
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ReviewRequest.State
  nameWithType: ReviewRequest.State
- uid: WeihanLi.Common.Models.ReviewState
  name: ReviewState
  href: api/WeihanLi.Common.Models.ReviewState.yml
  commentId: T:WeihanLi.Common.Models.ReviewState
  fullName: WeihanLi.Common.Models.ReviewState
  nameWithType: ReviewState
- uid: WeihanLi.Common.Models.ReviewState.Rejected
  name: Rejected
  href: api/WeihanLi.Common.Models.ReviewState.yml
  commentId: F:WeihanLi.Common.Models.ReviewState.Rejected
  fullName: WeihanLi.Common.Models.ReviewState.Rejected
  nameWithType: ReviewState.Rejected
- uid: WeihanLi.Common.Models.ReviewState.Reviewed
  name: Reviewed
  href: api/WeihanLi.Common.Models.ReviewState.yml
  commentId: F:WeihanLi.Common.Models.ReviewState.Reviewed
  fullName: WeihanLi.Common.Models.ReviewState.Reviewed
  nameWithType: ReviewState.Reviewed
- uid: WeihanLi.Common.Models.ReviewState.UnReviewed
  name: UnReviewed
  href: api/WeihanLi.Common.Models.ReviewState.yml
  commentId: F:WeihanLi.Common.Models.ReviewState.UnReviewed
  fullName: WeihanLi.Common.Models.ReviewState.UnReviewed
  nameWithType: ReviewState.UnReviewed
- uid: WeihanLi.Common.Models.StringValueDictionary
  name: StringValueDictionary
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: T:WeihanLi.Common.Models.StringValueDictionary
  fullName: WeihanLi.Common.Models.StringValueDictionary
  nameWithType: StringValueDictionary
- uid: WeihanLi.Common.Models.StringValueDictionary.Clone
  name: Clone()
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.Clone
  fullName: WeihanLi.Common.Models.StringValueDictionary.Clone()
  nameWithType: StringValueDictionary.Clone()
- uid: WeihanLi.Common.Models.StringValueDictionary.Clone*
  name: Clone
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.Clone
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.Clone
  nameWithType: StringValueDictionary.Clone
- uid: WeihanLi.Common.Models.StringValueDictionary.ContainsKey(System.String)
  name: ContainsKey(string)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.ContainsKey(System.String)
  name.vb: ContainsKey(String)
  fullName: WeihanLi.Common.Models.StringValueDictionary.ContainsKey(string)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.ContainsKey(String)
  nameWithType: StringValueDictionary.ContainsKey(string)
  nameWithType.vb: StringValueDictionary.ContainsKey(String)
- uid: WeihanLi.Common.Models.StringValueDictionary.ContainsKey*
  name: ContainsKey
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.ContainsKey
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.ContainsKey
  nameWithType: StringValueDictionary.ContainsKey
- uid: WeihanLi.Common.Models.StringValueDictionary.Count
  name: Count
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: P:WeihanLi.Common.Models.StringValueDictionary.Count
  fullName: WeihanLi.Common.Models.StringValueDictionary.Count
  nameWithType: StringValueDictionary.Count
- uid: WeihanLi.Common.Models.StringValueDictionary.Count*
  name: Count
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.Count
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.Count
  nameWithType: StringValueDictionary.Count
- uid: WeihanLi.Common.Models.StringValueDictionary.Equals(System.Object)
  name: Equals(object?)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.Equals(System.Object)
  name.vb: Equals(Object)
  fullName: WeihanLi.Common.Models.StringValueDictionary.Equals(object?)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.Equals(Object)
  nameWithType: StringValueDictionary.Equals(object?)
  nameWithType.vb: StringValueDictionary.Equals(Object)
- uid: WeihanLi.Common.Models.StringValueDictionary.Equals(WeihanLi.Common.Models.StringValueDictionary)
  name: Equals(StringValueDictionary?)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.Equals(WeihanLi.Common.Models.StringValueDictionary)
  name.vb: Equals(StringValueDictionary)
  fullName: WeihanLi.Common.Models.StringValueDictionary.Equals(WeihanLi.Common.Models.StringValueDictionary?)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.Equals(WeihanLi.Common.Models.StringValueDictionary)
  nameWithType: StringValueDictionary.Equals(StringValueDictionary?)
  nameWithType.vb: StringValueDictionary.Equals(StringValueDictionary)
- uid: WeihanLi.Common.Models.StringValueDictionary.Equals*
  name: Equals
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.Equals
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.Equals
  nameWithType: StringValueDictionary.Equals
- uid: WeihanLi.Common.Models.StringValueDictionary.FromJson(System.String)
  name: FromJson(string)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.FromJson(System.String)
  name.vb: FromJson(String)
  fullName: WeihanLi.Common.Models.StringValueDictionary.FromJson(string)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.FromJson(String)
  nameWithType: StringValueDictionary.FromJson(string)
  nameWithType.vb: StringValueDictionary.FromJson(String)
- uid: WeihanLi.Common.Models.StringValueDictionary.FromJson*
  name: FromJson
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.FromJson
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.FromJson
  nameWithType: StringValueDictionary.FromJson
- uid: WeihanLi.Common.Models.StringValueDictionary.FromObject(System.Object)
  name: FromObject(object)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.FromObject(System.Object)
  name.vb: FromObject(Object)
  fullName: WeihanLi.Common.Models.StringValueDictionary.FromObject(object)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.FromObject(Object)
  nameWithType: StringValueDictionary.FromObject(object)
  nameWithType.vb: StringValueDictionary.FromObject(Object)
- uid: WeihanLi.Common.Models.StringValueDictionary.FromObject*
  name: FromObject
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.FromObject
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.FromObject
  nameWithType: StringValueDictionary.FromObject
- uid: WeihanLi.Common.Models.StringValueDictionary.GetHashCode
  name: GetHashCode()
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.GetHashCode
  fullName: WeihanLi.Common.Models.StringValueDictionary.GetHashCode()
  nameWithType: StringValueDictionary.GetHashCode()
- uid: WeihanLi.Common.Models.StringValueDictionary.GetHashCode*
  name: GetHashCode
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.GetHashCode
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.GetHashCode
  nameWithType: StringValueDictionary.GetHashCode
- uid: WeihanLi.Common.Models.StringValueDictionary.Item(System.String)
  name: this[string]
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: P:WeihanLi.Common.Models.StringValueDictionary.Item(System.String)
  name.vb: this[](String)
  fullName: WeihanLi.Common.Models.StringValueDictionary.this[string]
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.this[](String)
  nameWithType: StringValueDictionary.this[string]
  nameWithType.vb: StringValueDictionary.this[](String)
- uid: WeihanLi.Common.Models.StringValueDictionary.Item*
  name: this
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.Item
  isSpec: "True"
  name.vb: this[]
  fullName: WeihanLi.Common.Models.StringValueDictionary.this
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.this[]
  nameWithType: StringValueDictionary.this
  nameWithType.vb: StringValueDictionary.this[]
- uid: WeihanLi.Common.Models.StringValueDictionary.Keys
  name: Keys
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: P:WeihanLi.Common.Models.StringValueDictionary.Keys
  fullName: WeihanLi.Common.Models.StringValueDictionary.Keys
  nameWithType: StringValueDictionary.Keys
- uid: WeihanLi.Common.Models.StringValueDictionary.Keys*
  name: Keys
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.Keys
  isSpec: "True"
  fullName: WeihanLi.Common.Models.StringValueDictionary.Keys
  nameWithType: StringValueDictionary.Keys
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Equality(WeihanLi.Common.Models.StringValueDictionary,WeihanLi.Common.Models.StringValueDictionary)
  name: operator ==(StringValueDictionary?, StringValueDictionary?)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.op_Equality(WeihanLi.Common.Models.StringValueDictionary,WeihanLi.Common.Models.StringValueDictionary)
  name.vb: =(StringValueDictionary, StringValueDictionary)
  fullName: WeihanLi.Common.Models.StringValueDictionary.operator ==(WeihanLi.Common.Models.StringValueDictionary?, WeihanLi.Common.Models.StringValueDictionary?)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.=(WeihanLi.Common.Models.StringValueDictionary, WeihanLi.Common.Models.StringValueDictionary)
  nameWithType: StringValueDictionary.operator ==(StringValueDictionary?, StringValueDictionary?)
  nameWithType.vb: StringValueDictionary.=(StringValueDictionary, StringValueDictionary)
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Equality*
  name: operator ==
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.op_Equality
  isSpec: "True"
  name.vb: =
  fullName: WeihanLi.Common.Models.StringValueDictionary.operator ==
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.=
  nameWithType: StringValueDictionary.operator ==
  nameWithType.vb: StringValueDictionary.=
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Implicit(WeihanLi.Common.Models.StringValueDictionary)~System.Collections.Generic.Dictionary{System.String,System.String}
  name: implicit operator Dictionary<string, string?>(StringValueDictionary)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.op_Implicit(WeihanLi.Common.Models.StringValueDictionary)~System.Collections.Generic.Dictionary{System.String,System.String}
  name.vb: CType(StringValueDictionary)
  fullName: WeihanLi.Common.Models.StringValueDictionary.implicit operator System.Collections.Generic.Dictionary<string, string?>(WeihanLi.Common.Models.StringValueDictionary)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.CType(WeihanLi.Common.Models.StringValueDictionary)
  nameWithType: StringValueDictionary.implicit operator Dictionary<string, string?>(StringValueDictionary)
  nameWithType.vb: StringValueDictionary.CType(StringValueDictionary)
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Implicit*
  name: implicit operator
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.op_Implicit
  isSpec: "True"
  name.vb: CType
  fullName: WeihanLi.Common.Models.StringValueDictionary.implicit operator
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.CType
  nameWithType: StringValueDictionary.implicit operator
  nameWithType.vb: StringValueDictionary.CType
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Inequality(WeihanLi.Common.Models.StringValueDictionary,WeihanLi.Common.Models.StringValueDictionary)
  name: operator !=(StringValueDictionary?, StringValueDictionary?)
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: M:WeihanLi.Common.Models.StringValueDictionary.op_Inequality(WeihanLi.Common.Models.StringValueDictionary,WeihanLi.Common.Models.StringValueDictionary)
  name.vb: <>(StringValueDictionary, StringValueDictionary)
  fullName: WeihanLi.Common.Models.StringValueDictionary.operator !=(WeihanLi.Common.Models.StringValueDictionary?, WeihanLi.Common.Models.StringValueDictionary?)
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.<>(WeihanLi.Common.Models.StringValueDictionary, WeihanLi.Common.Models.StringValueDictionary)
  nameWithType: StringValueDictionary.operator !=(StringValueDictionary?, StringValueDictionary?)
  nameWithType.vb: StringValueDictionary.<>(StringValueDictionary, StringValueDictionary)
- uid: WeihanLi.Common.Models.StringValueDictionary.op_Inequality*
  name: operator !=
  href: api/WeihanLi.Common.Models.StringValueDictionary.yml
  commentId: Overload:WeihanLi.Common.Models.StringValueDictionary.op_Inequality
  isSpec: "True"
  name.vb: <>
  fullName: WeihanLi.Common.Models.StringValueDictionary.operator !=
  fullName.vb: WeihanLi.Common.Models.StringValueDictionary.<>
  nameWithType: StringValueDictionary.operator !=
  nameWithType.vb: StringValueDictionary.<>
- uid: WeihanLi.Common.Models.TenantInfo
  name: TenantInfo
  href: api/WeihanLi.Common.Models.TenantInfo.yml
  commentId: T:WeihanLi.Common.Models.TenantInfo
  fullName: WeihanLi.Common.Models.TenantInfo
  nameWithType: TenantInfo
- uid: WeihanLi.Common.Models.TenantInfo`1
  name: TenantInfo<TKey>
  href: api/WeihanLi.Common.Models.TenantInfo-1.yml
  commentId: T:WeihanLi.Common.Models.TenantInfo`1
  name.vb: TenantInfo(Of TKey)
  fullName: WeihanLi.Common.Models.TenantInfo<TKey>
  fullName.vb: WeihanLi.Common.Models.TenantInfo(Of TKey)
  nameWithType: TenantInfo<TKey>
  nameWithType.vb: TenantInfo(Of TKey)
- uid: WeihanLi.Common.Models.TenantInfo`1.TenantId
  name: TenantId
  href: api/WeihanLi.Common.Models.TenantInfo-1.yml
  commentId: P:WeihanLi.Common.Models.TenantInfo`1.TenantId
  fullName: WeihanLi.Common.Models.TenantInfo<TKey>.TenantId
  fullName.vb: WeihanLi.Common.Models.TenantInfo(Of TKey).TenantId
  nameWithType: TenantInfo<TKey>.TenantId
  nameWithType.vb: TenantInfo(Of TKey).TenantId
- uid: WeihanLi.Common.Models.TenantInfo`1.TenantId*
  name: TenantId
  href: api/WeihanLi.Common.Models.TenantInfo-1.yml
  commentId: Overload:WeihanLi.Common.Models.TenantInfo`1.TenantId
  isSpec: "True"
  fullName: WeihanLi.Common.Models.TenantInfo<TKey>.TenantId
  fullName.vb: WeihanLi.Common.Models.TenantInfo(Of TKey).TenantId
  nameWithType: TenantInfo<TKey>.TenantId
  nameWithType.vb: TenantInfo(Of TKey).TenantId
- uid: WeihanLi.Common.Models.TenantInfo`1.TenantName
  name: TenantName
  href: api/WeihanLi.Common.Models.TenantInfo-1.yml
  commentId: P:WeihanLi.Common.Models.TenantInfo`1.TenantName
  fullName: WeihanLi.Common.Models.TenantInfo<TKey>.TenantName
  fullName.vb: WeihanLi.Common.Models.TenantInfo(Of TKey).TenantName
  nameWithType: TenantInfo<TKey>.TenantName
  nameWithType.vb: TenantInfo(Of TKey).TenantName
- uid: WeihanLi.Common.Models.TenantInfo`1.TenantName*
  name: TenantName
  href: api/WeihanLi.Common.Models.TenantInfo-1.yml
  commentId: Overload:WeihanLi.Common.Models.TenantInfo`1.TenantName
  isSpec: "True"
  fullName: WeihanLi.Common.Models.TenantInfo<TKey>.TenantName
  fullName.vb: WeihanLi.Common.Models.TenantInfo(Of TKey).TenantName
  nameWithType: TenantInfo<TKey>.TenantName
  nameWithType.vb: TenantInfo(Of TKey).TenantName
- uid: WeihanLi.Common.Models.ValidationResult
  name: ValidationResult
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: T:WeihanLi.Common.Models.ValidationResult
  fullName: WeihanLi.Common.Models.ValidationResult
  nameWithType: ValidationResult
- uid: WeihanLi.Common.Models.ValidationResult.Errors
  name: Errors
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: P:WeihanLi.Common.Models.ValidationResult.Errors
  fullName: WeihanLi.Common.Models.ValidationResult.Errors
  nameWithType: ValidationResult.Errors
- uid: WeihanLi.Common.Models.ValidationResult.Errors*
  name: Errors
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: Overload:WeihanLi.Common.Models.ValidationResult.Errors
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ValidationResult.Errors
  nameWithType: ValidationResult.Errors
- uid: WeihanLi.Common.Models.ValidationResult.Failed(System.Collections.Generic.Dictionary{System.String,System.String[]})
  name: Failed(Dictionary<string, string[]>)
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: M:WeihanLi.Common.Models.ValidationResult.Failed(System.Collections.Generic.Dictionary{System.String,System.String[]})
  name.vb: Failed(Dictionary(Of String, String()))
  fullName: WeihanLi.Common.Models.ValidationResult.Failed(System.Collections.Generic.Dictionary<string, string[]>)
  fullName.vb: WeihanLi.Common.Models.ValidationResult.Failed(System.Collections.Generic.Dictionary(Of String, String()))
  nameWithType: ValidationResult.Failed(Dictionary<string, string[]>)
  nameWithType.vb: ValidationResult.Failed(Dictionary(Of String, String()))
- uid: WeihanLi.Common.Models.ValidationResult.Failed(System.String[])
  name: Failed(params string[])
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: M:WeihanLi.Common.Models.ValidationResult.Failed(System.String[])
  name.vb: Failed(ParamArray String())
  fullName: WeihanLi.Common.Models.ValidationResult.Failed(params string[])
  fullName.vb: WeihanLi.Common.Models.ValidationResult.Failed(ParamArray String())
  nameWithType: ValidationResult.Failed(params string[])
  nameWithType.vb: ValidationResult.Failed(ParamArray String())
- uid: WeihanLi.Common.Models.ValidationResult.Failed*
  name: Failed
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: Overload:WeihanLi.Common.Models.ValidationResult.Failed
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ValidationResult.Failed
  nameWithType: ValidationResult.Failed
- uid: WeihanLi.Common.Models.ValidationResult.Valid
  name: Valid
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: P:WeihanLi.Common.Models.ValidationResult.Valid
  fullName: WeihanLi.Common.Models.ValidationResult.Valid
  nameWithType: ValidationResult.Valid
- uid: WeihanLi.Common.Models.ValidationResult.Valid*
  name: Valid
  href: api/WeihanLi.Common.Models.ValidationResult.yml
  commentId: Overload:WeihanLi.Common.Models.ValidationResult.Valid
  isSpec: "True"
  fullName: WeihanLi.Common.Models.ValidationResult.Valid
  nameWithType: ValidationResult.Valid
- uid: WeihanLi.Common.NullDisposable
  name: NullDisposable
  href: api/WeihanLi.Common.NullDisposable.yml
  commentId: T:WeihanLi.Common.NullDisposable
  fullName: WeihanLi.Common.NullDisposable
  nameWithType: NullDisposable
- uid: WeihanLi.Common.NullDisposable.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.NullDisposable.yml
  commentId: M:WeihanLi.Common.NullDisposable.Dispose
  fullName: WeihanLi.Common.NullDisposable.Dispose()
  nameWithType: NullDisposable.Dispose()
- uid: WeihanLi.Common.NullDisposable.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.NullDisposable.yml
  commentId: Overload:WeihanLi.Common.NullDisposable.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.NullDisposable.Dispose
  nameWithType: NullDisposable.Dispose
- uid: WeihanLi.Common.NullDisposable.Instance
  name: Instance
  href: api/WeihanLi.Common.NullDisposable.yml
  commentId: P:WeihanLi.Common.NullDisposable.Instance
  fullName: WeihanLi.Common.NullDisposable.Instance
  nameWithType: NullDisposable.Instance
- uid: WeihanLi.Common.NullDisposable.Instance*
  name: Instance
  href: api/WeihanLi.Common.NullDisposable.yml
  commentId: Overload:WeihanLi.Common.NullDisposable.Instance
  isSpec: "True"
  fullName: WeihanLi.Common.NullDisposable.Instance
  nameWithType: NullDisposable.Instance
- uid: WeihanLi.Common.NullScope
  name: NullScope
  href: api/WeihanLi.Common.NullScope.yml
  commentId: T:WeihanLi.Common.NullScope
  fullName: WeihanLi.Common.NullScope
  nameWithType: NullScope
- uid: WeihanLi.Common.NullScope.Dispose
  name: Dispose()
  href: api/WeihanLi.Common.NullScope.yml
  commentId: M:WeihanLi.Common.NullScope.Dispose
  fullName: WeihanLi.Common.NullScope.Dispose()
  nameWithType: NullScope.Dispose()
- uid: WeihanLi.Common.NullScope.Dispose*
  name: Dispose
  href: api/WeihanLi.Common.NullScope.yml
  commentId: Overload:WeihanLi.Common.NullScope.Dispose
  isSpec: "True"
  fullName: WeihanLi.Common.NullScope.Dispose
  nameWithType: NullScope.Dispose
- uid: WeihanLi.Common.NullScope.Instance
  name: Instance
  href: api/WeihanLi.Common.NullScope.yml
  commentId: P:WeihanLi.Common.NullScope.Instance
  fullName: WeihanLi.Common.NullScope.Instance
  nameWithType: NullScope.Instance
- uid: WeihanLi.Common.NullScope.Instance*
  name: Instance
  href: api/WeihanLi.Common.NullScope.yml
  commentId: Overload:WeihanLi.Common.NullScope.Instance
  isSpec: "True"
  fullName: WeihanLi.Common.NullScope.Instance
  nameWithType: NullScope.Instance
- uid: WeihanLi.Common.Otp
  name: WeihanLi.Common.Otp
  href: api/WeihanLi.Common.Otp.yml
  commentId: N:WeihanLi.Common.Otp
  fullName: WeihanLi.Common.Otp
  nameWithType: WeihanLi.Common.Otp
- uid: WeihanLi.Common.Otp.OtpHashAlgorithm
  name: OtpHashAlgorithm
  href: api/WeihanLi.Common.Otp.OtpHashAlgorithm.yml
  commentId: T:WeihanLi.Common.Otp.OtpHashAlgorithm
  fullName: WeihanLi.Common.Otp.OtpHashAlgorithm
  nameWithType: OtpHashAlgorithm
- uid: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA1
  name: SHA1
  href: api/WeihanLi.Common.Otp.OtpHashAlgorithm.yml
  commentId: F:WeihanLi.Common.Otp.OtpHashAlgorithm.SHA1
  fullName: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA1
  nameWithType: OtpHashAlgorithm.SHA1
- uid: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA256
  name: SHA256
  href: api/WeihanLi.Common.Otp.OtpHashAlgorithm.yml
  commentId: F:WeihanLi.Common.Otp.OtpHashAlgorithm.SHA256
  fullName: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA256
  nameWithType: OtpHashAlgorithm.SHA256
- uid: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA512
  name: SHA512
  href: api/WeihanLi.Common.Otp.OtpHashAlgorithm.yml
  commentId: F:WeihanLi.Common.Otp.OtpHashAlgorithm.SHA512
  fullName: WeihanLi.Common.Otp.OtpHashAlgorithm.SHA512
  nameWithType: OtpHashAlgorithm.SHA512
- uid: WeihanLi.Common.Otp.Totp
  name: Totp
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: T:WeihanLi.Common.Otp.Totp
  fullName: WeihanLi.Common.Otp.Totp
  nameWithType: Totp
- uid: WeihanLi.Common.Otp.Totp.#ctor
  name: Totp()
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.Otp.Totp.Totp()
  fullName.vb: WeihanLi.Common.Otp.Totp.New()
  nameWithType: Totp.Totp()
  nameWithType.vb: Totp.New()
- uid: WeihanLi.Common.Otp.Totp.#ctor(System.Int32)
  name: Totp(int)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.#ctor(System.Int32)
  name.vb: New(Integer)
  fullName: WeihanLi.Common.Otp.Totp.Totp(int)
  fullName.vb: WeihanLi.Common.Otp.Totp.New(Integer)
  nameWithType: Totp.Totp(int)
  nameWithType.vb: Totp.New(Integer)
- uid: WeihanLi.Common.Otp.Totp.#ctor(WeihanLi.Common.Otp.OtpHashAlgorithm,System.Int32)
  name: Totp(OtpHashAlgorithm, int)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.#ctor(WeihanLi.Common.Otp.OtpHashAlgorithm,System.Int32)
  name.vb: New(OtpHashAlgorithm, Integer)
  fullName: WeihanLi.Common.Otp.Totp.Totp(WeihanLi.Common.Otp.OtpHashAlgorithm, int)
  fullName.vb: WeihanLi.Common.Otp.Totp.New(WeihanLi.Common.Otp.OtpHashAlgorithm, Integer)
  nameWithType: Totp.Totp(OtpHashAlgorithm, int)
  nameWithType.vb: Totp.New(OtpHashAlgorithm, Integer)
- uid: WeihanLi.Common.Otp.Totp.#ctor(WeihanLi.Common.Otp.OtpHashAlgorithm)
  name: Totp(OtpHashAlgorithm)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.#ctor(WeihanLi.Common.Otp.OtpHashAlgorithm)
  name.vb: New(OtpHashAlgorithm)
  fullName: WeihanLi.Common.Otp.Totp.Totp(WeihanLi.Common.Otp.OtpHashAlgorithm)
  fullName.vb: WeihanLi.Common.Otp.Totp.New(WeihanLi.Common.Otp.OtpHashAlgorithm)
  nameWithType: Totp.Totp(OtpHashAlgorithm)
  nameWithType.vb: Totp.New(OtpHashAlgorithm)
- uid: WeihanLi.Common.Otp.Totp.#ctor*
  name: Totp
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: Overload:WeihanLi.Common.Otp.Totp.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Otp.Totp.Totp
  fullName.vb: WeihanLi.Common.Otp.Totp.New
  nameWithType: Totp.Totp
  nameWithType.vb: Totp.New
- uid: WeihanLi.Common.Otp.Totp.Compute(System.Byte[])
  name: Compute(byte[])
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Compute(System.Byte[])
  name.vb: Compute(Byte())
  fullName: WeihanLi.Common.Otp.Totp.Compute(byte[])
  fullName.vb: WeihanLi.Common.Otp.Totp.Compute(Byte())
  nameWithType: Totp.Compute(byte[])
  nameWithType.vb: Totp.Compute(Byte())
- uid: WeihanLi.Common.Otp.Totp.Compute(System.String)
  name: Compute(string)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Compute(System.String)
  name.vb: Compute(String)
  fullName: WeihanLi.Common.Otp.Totp.Compute(string)
  fullName.vb: WeihanLi.Common.Otp.Totp.Compute(String)
  nameWithType: Totp.Compute(string)
  nameWithType.vb: Totp.Compute(String)
- uid: WeihanLi.Common.Otp.Totp.Compute*
  name: Compute
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: Overload:WeihanLi.Common.Otp.Totp.Compute
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.Totp.Compute
  nameWithType: Totp.Compute
- uid: WeihanLi.Common.Otp.Totp.RemainingSeconds
  name: RemainingSeconds()
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.RemainingSeconds
  fullName: WeihanLi.Common.Otp.Totp.RemainingSeconds()
  nameWithType: Totp.RemainingSeconds()
- uid: WeihanLi.Common.Otp.Totp.RemainingSeconds*
  name: RemainingSeconds
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: Overload:WeihanLi.Common.Otp.Totp.RemainingSeconds
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.Totp.RemainingSeconds
  nameWithType: Totp.RemainingSeconds
- uid: WeihanLi.Common.Otp.Totp.Verify(System.Byte[],System.String,System.TimeSpan)
  name: Verify(byte[], string, TimeSpan)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Verify(System.Byte[],System.String,System.TimeSpan)
  name.vb: Verify(Byte(), String, TimeSpan)
  fullName: WeihanLi.Common.Otp.Totp.Verify(byte[], string, System.TimeSpan)
  fullName.vb: WeihanLi.Common.Otp.Totp.Verify(Byte(), String, System.TimeSpan)
  nameWithType: Totp.Verify(byte[], string, TimeSpan)
  nameWithType.vb: Totp.Verify(Byte(), String, TimeSpan)
- uid: WeihanLi.Common.Otp.Totp.Verify(System.Byte[],System.String)
  name: Verify(byte[], string)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Verify(System.Byte[],System.String)
  name.vb: Verify(Byte(), String)
  fullName: WeihanLi.Common.Otp.Totp.Verify(byte[], string)
  fullName.vb: WeihanLi.Common.Otp.Totp.Verify(Byte(), String)
  nameWithType: Totp.Verify(byte[], string)
  nameWithType.vb: Totp.Verify(Byte(), String)
- uid: WeihanLi.Common.Otp.Totp.Verify(System.String,System.String,System.TimeSpan)
  name: Verify(string, string, TimeSpan)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Verify(System.String,System.String,System.TimeSpan)
  name.vb: Verify(String, String, TimeSpan)
  fullName: WeihanLi.Common.Otp.Totp.Verify(string, string, System.TimeSpan)
  fullName.vb: WeihanLi.Common.Otp.Totp.Verify(String, String, System.TimeSpan)
  nameWithType: Totp.Verify(string, string, TimeSpan)
  nameWithType.vb: Totp.Verify(String, String, TimeSpan)
- uid: WeihanLi.Common.Otp.Totp.Verify(System.String,System.String)
  name: Verify(string, string)
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: M:WeihanLi.Common.Otp.Totp.Verify(System.String,System.String)
  name.vb: Verify(String, String)
  fullName: WeihanLi.Common.Otp.Totp.Verify(string, string)
  fullName.vb: WeihanLi.Common.Otp.Totp.Verify(String, String)
  nameWithType: Totp.Verify(string, string)
  nameWithType.vb: Totp.Verify(String, String)
- uid: WeihanLi.Common.Otp.Totp.Verify*
  name: Verify
  href: api/WeihanLi.Common.Otp.Totp.yml
  commentId: Overload:WeihanLi.Common.Otp.Totp.Verify
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.Totp.Verify
  nameWithType: Totp.Verify
- uid: WeihanLi.Common.Otp.TotpOptions
  name: TotpOptions
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: T:WeihanLi.Common.Otp.TotpOptions
  fullName: WeihanLi.Common.Otp.TotpOptions
  nameWithType: TotpOptions
- uid: WeihanLi.Common.Otp.TotpOptions.Algorithm
  name: Algorithm
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: P:WeihanLi.Common.Otp.TotpOptions.Algorithm
  fullName: WeihanLi.Common.Otp.TotpOptions.Algorithm
  nameWithType: TotpOptions.Algorithm
- uid: WeihanLi.Common.Otp.TotpOptions.Algorithm*
  name: Algorithm
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: Overload:WeihanLi.Common.Otp.TotpOptions.Algorithm
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.TotpOptions.Algorithm
  nameWithType: TotpOptions.Algorithm
- uid: WeihanLi.Common.Otp.TotpOptions.ExpiresIn
  name: ExpiresIn
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: P:WeihanLi.Common.Otp.TotpOptions.ExpiresIn
  fullName: WeihanLi.Common.Otp.TotpOptions.ExpiresIn
  nameWithType: TotpOptions.ExpiresIn
- uid: WeihanLi.Common.Otp.TotpOptions.ExpiresIn*
  name: ExpiresIn
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: Overload:WeihanLi.Common.Otp.TotpOptions.ExpiresIn
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.TotpOptions.ExpiresIn
  nameWithType: TotpOptions.ExpiresIn
- uid: WeihanLi.Common.Otp.TotpOptions.Salt
  name: Salt
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: P:WeihanLi.Common.Otp.TotpOptions.Salt
  fullName: WeihanLi.Common.Otp.TotpOptions.Salt
  nameWithType: TotpOptions.Salt
- uid: WeihanLi.Common.Otp.TotpOptions.Salt*
  name: Salt
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: Overload:WeihanLi.Common.Otp.TotpOptions.Salt
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.TotpOptions.Salt
  nameWithType: TotpOptions.Salt
- uid: WeihanLi.Common.Otp.TotpOptions.Size
  name: Size
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: P:WeihanLi.Common.Otp.TotpOptions.Size
  fullName: WeihanLi.Common.Otp.TotpOptions.Size
  nameWithType: TotpOptions.Size
- uid: WeihanLi.Common.Otp.TotpOptions.Size*
  name: Size
  href: api/WeihanLi.Common.Otp.TotpOptions.yml
  commentId: Overload:WeihanLi.Common.Otp.TotpOptions.Size
  isSpec: "True"
  fullName: WeihanLi.Common.Otp.TotpOptions.Size
  nameWithType: TotpOptions.Size
- uid: WeihanLi.Common.SequentialGuidIdGenerator
  name: SequentialGuidIdGenerator
  href: api/WeihanLi.Common.SequentialGuidIdGenerator.yml
  commentId: T:WeihanLi.Common.SequentialGuidIdGenerator
  fullName: WeihanLi.Common.SequentialGuidIdGenerator
  nameWithType: SequentialGuidIdGenerator
- uid: WeihanLi.Common.SequentialGuidIdGenerator.#ctor(WeihanLi.Common.Helpers.SequentialGuidType)
  name: SequentialGuidIdGenerator(SequentialGuidType)
  href: api/WeihanLi.Common.SequentialGuidIdGenerator.yml
  commentId: M:WeihanLi.Common.SequentialGuidIdGenerator.#ctor(WeihanLi.Common.Helpers.SequentialGuidType)
  name.vb: New(SequentialGuidType)
  fullName: WeihanLi.Common.SequentialGuidIdGenerator.SequentialGuidIdGenerator(WeihanLi.Common.Helpers.SequentialGuidType)
  fullName.vb: WeihanLi.Common.SequentialGuidIdGenerator.New(WeihanLi.Common.Helpers.SequentialGuidType)
  nameWithType: SequentialGuidIdGenerator.SequentialGuidIdGenerator(SequentialGuidType)
  nameWithType.vb: SequentialGuidIdGenerator.New(SequentialGuidType)
- uid: WeihanLi.Common.SequentialGuidIdGenerator.#ctor*
  name: SequentialGuidIdGenerator
  href: api/WeihanLi.Common.SequentialGuidIdGenerator.yml
  commentId: Overload:WeihanLi.Common.SequentialGuidIdGenerator.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.SequentialGuidIdGenerator.SequentialGuidIdGenerator
  fullName.vb: WeihanLi.Common.SequentialGuidIdGenerator.New
  nameWithType: SequentialGuidIdGenerator.SequentialGuidIdGenerator
  nameWithType.vb: SequentialGuidIdGenerator.New
- uid: WeihanLi.Common.SequentialGuidIdGenerator.NewId
  name: NewId()
  href: api/WeihanLi.Common.SequentialGuidIdGenerator.yml
  commentId: M:WeihanLi.Common.SequentialGuidIdGenerator.NewId
  fullName: WeihanLi.Common.SequentialGuidIdGenerator.NewId()
  nameWithType: SequentialGuidIdGenerator.NewId()
- uid: WeihanLi.Common.SequentialGuidIdGenerator.NewId*
  name: NewId
  href: api/WeihanLi.Common.SequentialGuidIdGenerator.yml
  commentId: Overload:WeihanLi.Common.SequentialGuidIdGenerator.NewId
  isSpec: "True"
  fullName: WeihanLi.Common.SequentialGuidIdGenerator.NewId
  nameWithType: SequentialGuidIdGenerator.NewId
- uid: WeihanLi.Common.Services
  name: WeihanLi.Common.Services
  href: api/WeihanLi.Common.Services.yml
  commentId: N:WeihanLi.Common.Services
  fullName: WeihanLi.Common.Services
  nameWithType: WeihanLi.Common.Services
- uid: WeihanLi.Common.Services.DataAnnotationValidator
  name: DataAnnotationValidator
  href: api/WeihanLi.Common.Services.DataAnnotationValidator.yml
  commentId: T:WeihanLi.Common.Services.DataAnnotationValidator
  fullName: WeihanLi.Common.Services.DataAnnotationValidator
  nameWithType: DataAnnotationValidator
- uid: WeihanLi.Common.Services.DataAnnotationValidator.Instance
  name: Instance
  href: api/WeihanLi.Common.Services.DataAnnotationValidator.yml
  commentId: P:WeihanLi.Common.Services.DataAnnotationValidator.Instance
  fullName: WeihanLi.Common.Services.DataAnnotationValidator.Instance
  nameWithType: DataAnnotationValidator.Instance
- uid: WeihanLi.Common.Services.DataAnnotationValidator.Instance*
  name: Instance
  href: api/WeihanLi.Common.Services.DataAnnotationValidator.yml
  commentId: Overload:WeihanLi.Common.Services.DataAnnotationValidator.Instance
  isSpec: "True"
  fullName: WeihanLi.Common.Services.DataAnnotationValidator.Instance
  nameWithType: DataAnnotationValidator.Instance
- uid: WeihanLi.Common.Services.DataAnnotationValidator.Validate(System.Object)
  name: Validate(object?)
  href: api/WeihanLi.Common.Services.DataAnnotationValidator.yml
  commentId: M:WeihanLi.Common.Services.DataAnnotationValidator.Validate(System.Object)
  name.vb: Validate(Object)
  fullName: WeihanLi.Common.Services.DataAnnotationValidator.Validate(object?)
  fullName.vb: WeihanLi.Common.Services.DataAnnotationValidator.Validate(Object)
  nameWithType: DataAnnotationValidator.Validate(object?)
  nameWithType.vb: DataAnnotationValidator.Validate(Object)
- uid: WeihanLi.Common.Services.DataAnnotationValidator.Validate*
  name: Validate
  href: api/WeihanLi.Common.Services.DataAnnotationValidator.yml
  commentId: Overload:WeihanLi.Common.Services.DataAnnotationValidator.Validate
  isSpec: "True"
  fullName: WeihanLi.Common.Services.DataAnnotationValidator.Validate
  nameWithType: DataAnnotationValidator.Validate
- uid: WeihanLi.Common.Services.DelegateValidator
  name: DelegateValidator
  href: api/WeihanLi.Common.Services.DelegateValidator.yml
  commentId: T:WeihanLi.Common.Services.DelegateValidator
  fullName: WeihanLi.Common.Services.DelegateValidator
  nameWithType: DelegateValidator
- uid: WeihanLi.Common.Services.DelegateValidator.#ctor(System.Func{System.Object,WeihanLi.Common.Models.ValidationResult})
  name: DelegateValidator(Func<object?, ValidationResult>)
  href: api/WeihanLi.Common.Services.DelegateValidator.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator.#ctor(System.Func{System.Object,WeihanLi.Common.Models.ValidationResult})
  name.vb: New(Func(Of Object, ValidationResult))
  fullName: WeihanLi.Common.Services.DelegateValidator.DelegateValidator(System.Func<object?, WeihanLi.Common.Models.ValidationResult>)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator.New(System.Func(Of Object, WeihanLi.Common.Models.ValidationResult))
  nameWithType: DelegateValidator.DelegateValidator(Func<object?, ValidationResult>)
  nameWithType.vb: DelegateValidator.New(Func(Of Object, ValidationResult))
- uid: WeihanLi.Common.Services.DelegateValidator.#ctor*
  name: DelegateValidator
  href: api/WeihanLi.Common.Services.DelegateValidator.yml
  commentId: Overload:WeihanLi.Common.Services.DelegateValidator.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Services.DelegateValidator.DelegateValidator
  fullName.vb: WeihanLi.Common.Services.DelegateValidator.New
  nameWithType: DelegateValidator.DelegateValidator
  nameWithType.vb: DelegateValidator.New
- uid: WeihanLi.Common.Services.DelegateValidator.Validate(System.Object)
  name: Validate(object?)
  href: api/WeihanLi.Common.Services.DelegateValidator.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator.Validate(System.Object)
  name.vb: Validate(Object)
  fullName: WeihanLi.Common.Services.DelegateValidator.Validate(object?)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator.Validate(Object)
  nameWithType: DelegateValidator.Validate(object?)
  nameWithType.vb: DelegateValidator.Validate(Object)
- uid: WeihanLi.Common.Services.DelegateValidator.Validate*
  name: Validate
  href: api/WeihanLi.Common.Services.DelegateValidator.yml
  commentId: Overload:WeihanLi.Common.Services.DelegateValidator.Validate
  isSpec: "True"
  fullName: WeihanLi.Common.Services.DelegateValidator.Validate
  nameWithType: DelegateValidator.Validate
- uid: WeihanLi.Common.Services.DelegateValidator`1
  name: DelegateValidator<T>
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: T:WeihanLi.Common.Services.DelegateValidator`1
  name.vb: DelegateValidator(Of T)
  fullName: WeihanLi.Common.Services.DelegateValidator<T>
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T)
  nameWithType: DelegateValidator<T>
  nameWithType.vb: DelegateValidator(Of T)
- uid: WeihanLi.Common.Services.DelegateValidator`1.#ctor(System.Func{`0,System.Threading.Tasks.Task{WeihanLi.Common.Models.ValidationResult}})
  name: DelegateValidator(Func<T, Task<ValidationResult>>)
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator`1.#ctor(System.Func{`0,System.Threading.Tasks.Task{WeihanLi.Common.Models.ValidationResult}})
  name.vb: New(Func(Of T, Task(Of ValidationResult)))
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.DelegateValidator(System.Func<T, System.Threading.Tasks.Task<WeihanLi.Common.Models.ValidationResult>>)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).New(System.Func(Of T, System.Threading.Tasks.Task(Of WeihanLi.Common.Models.ValidationResult)))
  nameWithType: DelegateValidator<T>.DelegateValidator(Func<T, Task<ValidationResult>>)
  nameWithType.vb: DelegateValidator(Of T).New(Func(Of T, Task(Of ValidationResult)))
- uid: WeihanLi.Common.Services.DelegateValidator`1.#ctor(System.Func{`0,WeihanLi.Common.Models.ValidationResult})
  name: DelegateValidator(Func<T, ValidationResult>)
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator`1.#ctor(System.Func{`0,WeihanLi.Common.Models.ValidationResult})
  name.vb: New(Func(Of T, ValidationResult))
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.DelegateValidator(System.Func<T, WeihanLi.Common.Models.ValidationResult>)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).New(System.Func(Of T, WeihanLi.Common.Models.ValidationResult))
  nameWithType: DelegateValidator<T>.DelegateValidator(Func<T, ValidationResult>)
  nameWithType.vb: DelegateValidator(Of T).New(Func(Of T, ValidationResult))
- uid: WeihanLi.Common.Services.DelegateValidator`1.#ctor*
  name: DelegateValidator
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: Overload:WeihanLi.Common.Services.DelegateValidator`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.DelegateValidator
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).New
  nameWithType: DelegateValidator<T>.DelegateValidator
  nameWithType.vb: DelegateValidator(Of T).New
- uid: WeihanLi.Common.Services.DelegateValidator`1.Validate(`0)
  name: Validate(T)
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator`1.Validate(`0)
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.Validate(T)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).Validate(T)
  nameWithType: DelegateValidator<T>.Validate(T)
  nameWithType.vb: DelegateValidator(Of T).Validate(T)
- uid: WeihanLi.Common.Services.DelegateValidator`1.Validate*
  name: Validate
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: Overload:WeihanLi.Common.Services.DelegateValidator`1.Validate
  isSpec: "True"
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.Validate
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).Validate
  nameWithType: DelegateValidator<T>.Validate
  nameWithType.vb: DelegateValidator(Of T).Validate
- uid: WeihanLi.Common.Services.DelegateValidator`1.ValidateAsync(`0)
  name: ValidateAsync(T)
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: M:WeihanLi.Common.Services.DelegateValidator`1.ValidateAsync(`0)
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.ValidateAsync(T)
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).ValidateAsync(T)
  nameWithType: DelegateValidator<T>.ValidateAsync(T)
  nameWithType.vb: DelegateValidator(Of T).ValidateAsync(T)
- uid: WeihanLi.Common.Services.DelegateValidator`1.ValidateAsync*
  name: ValidateAsync
  href: api/WeihanLi.Common.Services.DelegateValidator-1.yml
  commentId: Overload:WeihanLi.Common.Services.DelegateValidator`1.ValidateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Services.DelegateValidator<T>.ValidateAsync
  fullName.vb: WeihanLi.Common.Services.DelegateValidator(Of T).ValidateAsync
  nameWithType: DelegateValidator<T>.ValidateAsync
  nameWithType.vb: DelegateValidator(Of T).ValidateAsync
- uid: WeihanLi.Common.Services.EnvironmentUserIdProvider
  name: EnvironmentUserIdProvider
  href: api/WeihanLi.Common.Services.EnvironmentUserIdProvider.yml
  commentId: T:WeihanLi.Common.Services.EnvironmentUserIdProvider
  fullName: WeihanLi.Common.Services.EnvironmentUserIdProvider
  nameWithType: EnvironmentUserIdProvider
- uid: WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId
  name: GetUserId()
  href: api/WeihanLi.Common.Services.EnvironmentUserIdProvider.yml
  commentId: M:WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId
  fullName: WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId()
  nameWithType: EnvironmentUserIdProvider.GetUserId()
- uid: WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId*
  name: GetUserId
  href: api/WeihanLi.Common.Services.EnvironmentUserIdProvider.yml
  commentId: Overload:WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.EnvironmentUserIdProvider.GetUserId
  nameWithType: EnvironmentUserIdProvider.GetUserId
- uid: WeihanLi.Common.Services.EnvironmentUserIdProvider.Instance
  name: Instance
  href: api/WeihanLi.Common.Services.EnvironmentUserIdProvider.yml
  commentId: F:WeihanLi.Common.Services.EnvironmentUserIdProvider.Instance
  fullName: WeihanLi.Common.Services.EnvironmentUserIdProvider.Instance
  nameWithType: EnvironmentUserIdProvider.Instance
- uid: WeihanLi.Common.Services.IAsyncValidator`1
  name: IAsyncValidator<T>
  href: api/WeihanLi.Common.Services.IAsyncValidator-1.yml
  commentId: T:WeihanLi.Common.Services.IAsyncValidator`1
  name.vb: IAsyncValidator(Of T)
  fullName: WeihanLi.Common.Services.IAsyncValidator<T>
  fullName.vb: WeihanLi.Common.Services.IAsyncValidator(Of T)
  nameWithType: IAsyncValidator<T>
  nameWithType.vb: IAsyncValidator(Of T)
- uid: WeihanLi.Common.Services.IAsyncValidator`1.ValidateAsync(`0)
  name: ValidateAsync(T)
  href: api/WeihanLi.Common.Services.IAsyncValidator-1.yml
  commentId: M:WeihanLi.Common.Services.IAsyncValidator`1.ValidateAsync(`0)
  fullName: WeihanLi.Common.Services.IAsyncValidator<T>.ValidateAsync(T)
  fullName.vb: WeihanLi.Common.Services.IAsyncValidator(Of T).ValidateAsync(T)
  nameWithType: IAsyncValidator<T>.ValidateAsync(T)
  nameWithType.vb: IAsyncValidator(Of T).ValidateAsync(T)
- uid: WeihanLi.Common.Services.IAsyncValidator`1.ValidateAsync*
  name: ValidateAsync
  href: api/WeihanLi.Common.Services.IAsyncValidator-1.yml
  commentId: Overload:WeihanLi.Common.Services.IAsyncValidator`1.ValidateAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Services.IAsyncValidator<T>.ValidateAsync
  fullName.vb: WeihanLi.Common.Services.IAsyncValidator(Of T).ValidateAsync
  nameWithType: IAsyncValidator<T>.ValidateAsync
  nameWithType.vb: IAsyncValidator(Of T).ValidateAsync
- uid: WeihanLi.Common.Services.ICancellationTokenProvider
  name: ICancellationTokenProvider
  href: api/WeihanLi.Common.Services.ICancellationTokenProvider.yml
  commentId: T:WeihanLi.Common.Services.ICancellationTokenProvider
  fullName: WeihanLi.Common.Services.ICancellationTokenProvider
  nameWithType: ICancellationTokenProvider
- uid: WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken
  name: GetCancellationToken()
  href: api/WeihanLi.Common.Services.ICancellationTokenProvider.yml
  commentId: M:WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken
  fullName: WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken()
  nameWithType: ICancellationTokenProvider.GetCancellationToken()
- uid: WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken*
  name: GetCancellationToken
  href: api/WeihanLi.Common.Services.ICancellationTokenProvider.yml
  commentId: Overload:WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken
  isSpec: "True"
  fullName: WeihanLi.Common.Services.ICancellationTokenProvider.GetCancellationToken
  nameWithType: ICancellationTokenProvider.GetCancellationToken
- uid: WeihanLi.Common.Services.ITenantProvider
  name: ITenantProvider
  href: api/WeihanLi.Common.Services.ITenantProvider.yml
  commentId: T:WeihanLi.Common.Services.ITenantProvider
  fullName: WeihanLi.Common.Services.ITenantProvider
  nameWithType: ITenantProvider
- uid: WeihanLi.Common.Services.ITenantProvider.GetTenantId
  name: GetTenantId()
  href: api/WeihanLi.Common.Services.ITenantProvider.yml
  commentId: M:WeihanLi.Common.Services.ITenantProvider.GetTenantId
  fullName: WeihanLi.Common.Services.ITenantProvider.GetTenantId()
  nameWithType: ITenantProvider.GetTenantId()
- uid: WeihanLi.Common.Services.ITenantProvider.GetTenantId*
  name: GetTenantId
  href: api/WeihanLi.Common.Services.ITenantProvider.yml
  commentId: Overload:WeihanLi.Common.Services.ITenantProvider.GetTenantId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.ITenantProvider.GetTenantId
  nameWithType: ITenantProvider.GetTenantId
- uid: WeihanLi.Common.Services.ITenantProvider.GetTenantInfo
  name: GetTenantInfo()
  href: api/WeihanLi.Common.Services.ITenantProvider.yml
  commentId: M:WeihanLi.Common.Services.ITenantProvider.GetTenantInfo
  fullName: WeihanLi.Common.Services.ITenantProvider.GetTenantInfo()
  nameWithType: ITenantProvider.GetTenantInfo()
- uid: WeihanLi.Common.Services.ITenantProvider.GetTenantInfo*
  name: GetTenantInfo
  href: api/WeihanLi.Common.Services.ITenantProvider.yml
  commentId: Overload:WeihanLi.Common.Services.ITenantProvider.GetTenantInfo
  isSpec: "True"
  fullName: WeihanLi.Common.Services.ITenantProvider.GetTenantInfo
  nameWithType: ITenantProvider.GetTenantInfo
- uid: WeihanLi.Common.Services.IUserIdProvider
  name: IUserIdProvider
  href: api/WeihanLi.Common.Services.IUserIdProvider.yml
  commentId: T:WeihanLi.Common.Services.IUserIdProvider
  fullName: WeihanLi.Common.Services.IUserIdProvider
  nameWithType: IUserIdProvider
- uid: WeihanLi.Common.Services.IUserIdProvider.GetUserId
  name: GetUserId()
  href: api/WeihanLi.Common.Services.IUserIdProvider.yml
  commentId: M:WeihanLi.Common.Services.IUserIdProvider.GetUserId
  fullName: WeihanLi.Common.Services.IUserIdProvider.GetUserId()
  nameWithType: IUserIdProvider.GetUserId()
- uid: WeihanLi.Common.Services.IUserIdProvider.GetUserId*
  name: GetUserId
  href: api/WeihanLi.Common.Services.IUserIdProvider.yml
  commentId: Overload:WeihanLi.Common.Services.IUserIdProvider.GetUserId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.IUserIdProvider.GetUserId
  nameWithType: IUserIdProvider.GetUserId
- uid: WeihanLi.Common.Services.IValidator
  name: IValidator
  href: api/WeihanLi.Common.Services.IValidator.yml
  commentId: T:WeihanLi.Common.Services.IValidator
  fullName: WeihanLi.Common.Services.IValidator
  nameWithType: IValidator
- uid: WeihanLi.Common.Services.IValidator.Validate(System.Object)
  name: Validate(object?)
  href: api/WeihanLi.Common.Services.IValidator.yml
  commentId: M:WeihanLi.Common.Services.IValidator.Validate(System.Object)
  name.vb: Validate(Object)
  fullName: WeihanLi.Common.Services.IValidator.Validate(object?)
  fullName.vb: WeihanLi.Common.Services.IValidator.Validate(Object)
  nameWithType: IValidator.Validate(object?)
  nameWithType.vb: IValidator.Validate(Object)
- uid: WeihanLi.Common.Services.IValidator.Validate*
  name: Validate
  href: api/WeihanLi.Common.Services.IValidator.yml
  commentId: Overload:WeihanLi.Common.Services.IValidator.Validate
  isSpec: "True"
  fullName: WeihanLi.Common.Services.IValidator.Validate
  nameWithType: IValidator.Validate
- uid: WeihanLi.Common.Services.IValidator`1
  name: IValidator<T>
  href: api/WeihanLi.Common.Services.IValidator-1.yml
  commentId: T:WeihanLi.Common.Services.IValidator`1
  name.vb: IValidator(Of T)
  fullName: WeihanLi.Common.Services.IValidator<T>
  fullName.vb: WeihanLi.Common.Services.IValidator(Of T)
  nameWithType: IValidator<T>
  nameWithType.vb: IValidator(Of T)
- uid: WeihanLi.Common.Services.IValidator`1.Validate(`0)
  name: Validate(T)
  href: api/WeihanLi.Common.Services.IValidator-1.yml
  commentId: M:WeihanLi.Common.Services.IValidator`1.Validate(`0)
  fullName: WeihanLi.Common.Services.IValidator<T>.Validate(T)
  fullName.vb: WeihanLi.Common.Services.IValidator(Of T).Validate(T)
  nameWithType: IValidator<T>.Validate(T)
  nameWithType.vb: IValidator(Of T).Validate(T)
- uid: WeihanLi.Common.Services.IValidator`1.Validate*
  name: Validate
  href: api/WeihanLi.Common.Services.IValidator-1.yml
  commentId: Overload:WeihanLi.Common.Services.IValidator`1.Validate
  isSpec: "True"
  fullName: WeihanLi.Common.Services.IValidator<T>.Validate
  fullName.vb: WeihanLi.Common.Services.IValidator(Of T).Validate
  nameWithType: IValidator<T>.Validate
  nameWithType.vb: IValidator(Of T).Validate
- uid: WeihanLi.Common.Services.NullCancellationTokenProvider
  name: NullCancellationTokenProvider
  href: api/WeihanLi.Common.Services.NullCancellationTokenProvider.yml
  commentId: T:WeihanLi.Common.Services.NullCancellationTokenProvider
  fullName: WeihanLi.Common.Services.NullCancellationTokenProvider
  nameWithType: NullCancellationTokenProvider
- uid: WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken
  name: GetCancellationToken()
  href: api/WeihanLi.Common.Services.NullCancellationTokenProvider.yml
  commentId: M:WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken
  fullName: WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken()
  nameWithType: NullCancellationTokenProvider.GetCancellationToken()
- uid: WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken*
  name: GetCancellationToken
  href: api/WeihanLi.Common.Services.NullCancellationTokenProvider.yml
  commentId: Overload:WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken
  isSpec: "True"
  fullName: WeihanLi.Common.Services.NullCancellationTokenProvider.GetCancellationToken
  nameWithType: NullCancellationTokenProvider.GetCancellationToken
- uid: WeihanLi.Common.Services.TenantIdProviderExtensions
  name: TenantIdProviderExtensions
  href: api/WeihanLi.Common.Services.TenantIdProviderExtensions.yml
  commentId: T:WeihanLi.Common.Services.TenantIdProviderExtensions
  fullName: WeihanLi.Common.Services.TenantIdProviderExtensions
  nameWithType: TenantIdProviderExtensions
- uid: WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId*
  name: GetTenantId
  href: api/WeihanLi.Common.Services.TenantIdProviderExtensions.yml
  commentId: Overload:WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId
  nameWithType: TenantIdProviderExtensions.GetTenantId
- uid: WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId``1(WeihanLi.Common.Services.ITenantProvider,``0)
  name: GetTenantId<T>(ITenantProvider, T?)
  href: api/WeihanLi.Common.Services.TenantIdProviderExtensions.yml
  commentId: M:WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId``1(WeihanLi.Common.Services.ITenantProvider,``0)
  name.vb: GetTenantId(Of T)(ITenantProvider, T)
  fullName: WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId<T>(WeihanLi.Common.Services.ITenantProvider, T?)
  fullName.vb: WeihanLi.Common.Services.TenantIdProviderExtensions.GetTenantId(Of T)(WeihanLi.Common.Services.ITenantProvider, T)
  nameWithType: TenantIdProviderExtensions.GetTenantId<T>(ITenantProvider, T?)
  nameWithType.vb: TenantIdProviderExtensions.GetTenantId(Of T)(ITenantProvider, T)
- uid: WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId*
  name: TryGetTenantId
  href: api/WeihanLi.Common.Services.TenantIdProviderExtensions.yml
  commentId: Overload:WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId
  nameWithType: TenantIdProviderExtensions.TryGetTenantId
- uid: WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId``1(WeihanLi.Common.Services.ITenantProvider,``0@,``0)
  name: TryGetTenantId<T>(ITenantProvider, out T?, T?)
  href: api/WeihanLi.Common.Services.TenantIdProviderExtensions.yml
  commentId: M:WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId``1(WeihanLi.Common.Services.ITenantProvider,``0@,``0)
  name.vb: TryGetTenantId(Of T)(ITenantProvider, T, T)
  fullName: WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId<T>(WeihanLi.Common.Services.ITenantProvider, out T?, T?)
  fullName.vb: WeihanLi.Common.Services.TenantIdProviderExtensions.TryGetTenantId(Of T)(WeihanLi.Common.Services.ITenantProvider, T, T)
  nameWithType: TenantIdProviderExtensions.TryGetTenantId<T>(ITenantProvider, out T?, T?)
  nameWithType.vb: TenantIdProviderExtensions.TryGetTenantId(Of T)(ITenantProvider, T, T)
- uid: WeihanLi.Common.Services.UserIdProviderExtensions
  name: UserIdProviderExtensions
  href: api/WeihanLi.Common.Services.UserIdProviderExtensions.yml
  commentId: T:WeihanLi.Common.Services.UserIdProviderExtensions
  fullName: WeihanLi.Common.Services.UserIdProviderExtensions
  nameWithType: UserIdProviderExtensions
- uid: WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId*
  name: GetUserId
  href: api/WeihanLi.Common.Services.UserIdProviderExtensions.yml
  commentId: Overload:WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId
  nameWithType: UserIdProviderExtensions.GetUserId
- uid: WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId``1(WeihanLi.Common.Services.IUserIdProvider,``0)
  name: GetUserId<T>(IUserIdProvider, T?)
  href: api/WeihanLi.Common.Services.UserIdProviderExtensions.yml
  commentId: M:WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId``1(WeihanLi.Common.Services.IUserIdProvider,``0)
  name.vb: GetUserId(Of T)(IUserIdProvider, T)
  fullName: WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId<T>(WeihanLi.Common.Services.IUserIdProvider, T?)
  fullName.vb: WeihanLi.Common.Services.UserIdProviderExtensions.GetUserId(Of T)(WeihanLi.Common.Services.IUserIdProvider, T)
  nameWithType: UserIdProviderExtensions.GetUserId<T>(IUserIdProvider, T?)
  nameWithType.vb: UserIdProviderExtensions.GetUserId(Of T)(IUserIdProvider, T)
- uid: WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId*
  name: TryGetUserId
  href: api/WeihanLi.Common.Services.UserIdProviderExtensions.yml
  commentId: Overload:WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId
  isSpec: "True"
  fullName: WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId
  nameWithType: UserIdProviderExtensions.TryGetUserId
- uid: WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId``1(WeihanLi.Common.Services.IUserIdProvider,``0@,``0)
  name: TryGetUserId<T>(IUserIdProvider, out T?, T?)
  href: api/WeihanLi.Common.Services.UserIdProviderExtensions.yml
  commentId: M:WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId``1(WeihanLi.Common.Services.IUserIdProvider,``0@,``0)
  name.vb: TryGetUserId(Of T)(IUserIdProvider, T, T)
  fullName: WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId<T>(WeihanLi.Common.Services.IUserIdProvider, out T?, T?)
  fullName.vb: WeihanLi.Common.Services.UserIdProviderExtensions.TryGetUserId(Of T)(WeihanLi.Common.Services.IUserIdProvider, T, T)
  nameWithType: UserIdProviderExtensions.TryGetUserId<T>(IUserIdProvider, out T?, T?)
  nameWithType.vb: UserIdProviderExtensions.TryGetUserId(Of T)(IUserIdProvider, T, T)
- uid: WeihanLi.Common.SnowflakeId
  name: SnowflakeId
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: T:WeihanLi.Common.SnowflakeId
  fullName: WeihanLi.Common.SnowflakeId
  nameWithType: SnowflakeId
- uid: WeihanLi.Common.SnowflakeId.#ctor(System.Int64)
  name: SnowflakeId(long)
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: M:WeihanLi.Common.SnowflakeId.#ctor(System.Int64)
  name.vb: New(Long)
  fullName: WeihanLi.Common.SnowflakeId.SnowflakeId(long)
  fullName.vb: WeihanLi.Common.SnowflakeId.New(Long)
  nameWithType: SnowflakeId.SnowflakeId(long)
  nameWithType.vb: SnowflakeId.New(Long)
- uid: WeihanLi.Common.SnowflakeId.#ctor*
  name: SnowflakeId
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: Overload:WeihanLi.Common.SnowflakeId.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.SnowflakeId.SnowflakeId
  fullName.vb: WeihanLi.Common.SnowflakeId.New
  nameWithType: SnowflakeId.SnowflakeId
  nameWithType.vb: SnowflakeId.New
- uid: WeihanLi.Common.SnowflakeId.Default
  name: Default()
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: M:WeihanLi.Common.SnowflakeId.Default
  fullName: WeihanLi.Common.SnowflakeId.Default()
  nameWithType: SnowflakeId.Default()
- uid: WeihanLi.Common.SnowflakeId.Default*
  name: Default
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: Overload:WeihanLi.Common.SnowflakeId.Default
  isSpec: "True"
  fullName: WeihanLi.Common.SnowflakeId.Default
  nameWithType: SnowflakeId.Default
- uid: WeihanLi.Common.SnowflakeId.NextId
  name: NextId()
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: M:WeihanLi.Common.SnowflakeId.NextId
  fullName: WeihanLi.Common.SnowflakeId.NextId()
  nameWithType: SnowflakeId.NextId()
- uid: WeihanLi.Common.SnowflakeId.NextId*
  name: NextId
  href: api/WeihanLi.Common.SnowflakeId.yml
  commentId: Overload:WeihanLi.Common.SnowflakeId.NextId
  isSpec: "True"
  fullName: WeihanLi.Common.SnowflakeId.NextId
  nameWithType: SnowflakeId.NextId
- uid: WeihanLi.Common.SnowflakeIdGenerator
  name: SnowflakeIdGenerator
  href: api/WeihanLi.Common.SnowflakeIdGenerator.yml
  commentId: T:WeihanLi.Common.SnowflakeIdGenerator
  fullName: WeihanLi.Common.SnowflakeIdGenerator
  nameWithType: SnowflakeIdGenerator
- uid: WeihanLi.Common.SnowflakeIdGenerator.NewId
  name: NewId()
  href: api/WeihanLi.Common.SnowflakeIdGenerator.yml
  commentId: M:WeihanLi.Common.SnowflakeIdGenerator.NewId
  fullName: WeihanLi.Common.SnowflakeIdGenerator.NewId()
  nameWithType: SnowflakeIdGenerator.NewId()
- uid: WeihanLi.Common.SnowflakeIdGenerator.NewId*
  name: NewId
  href: api/WeihanLi.Common.SnowflakeIdGenerator.yml
  commentId: Overload:WeihanLi.Common.SnowflakeIdGenerator.NewId
  isSpec: "True"
  fullName: WeihanLi.Common.SnowflakeIdGenerator.NewId
  nameWithType: SnowflakeIdGenerator.NewId
- uid: WeihanLi.Common.StopwatchProfiler
  name: StopwatchProfiler
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: T:WeihanLi.Common.StopwatchProfiler
  fullName: WeihanLi.Common.StopwatchProfiler
  nameWithType: StopwatchProfiler
- uid: WeihanLi.Common.StopwatchProfiler.#ctor
  name: StopwatchProfiler()
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: M:WeihanLi.Common.StopwatchProfiler.#ctor
  name.vb: New()
  fullName: WeihanLi.Common.StopwatchProfiler.StopwatchProfiler()
  fullName.vb: WeihanLi.Common.StopwatchProfiler.New()
  nameWithType: StopwatchProfiler.StopwatchProfiler()
  nameWithType.vb: StopwatchProfiler.New()
- uid: WeihanLi.Common.StopwatchProfiler.#ctor*
  name: StopwatchProfiler
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: Overload:WeihanLi.Common.StopwatchProfiler.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.StopwatchProfiler.StopwatchProfiler
  fullName.vb: WeihanLi.Common.StopwatchProfiler.New
  nameWithType: StopwatchProfiler.StopwatchProfiler
  nameWithType.vb: StopwatchProfiler.New
- uid: WeihanLi.Common.StopwatchProfiler.Elapsed
  name: Elapsed
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: P:WeihanLi.Common.StopwatchProfiler.Elapsed
  fullName: WeihanLi.Common.StopwatchProfiler.Elapsed
  nameWithType: StopwatchProfiler.Elapsed
- uid: WeihanLi.Common.StopwatchProfiler.Elapsed*
  name: Elapsed
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: Overload:WeihanLi.Common.StopwatchProfiler.Elapsed
  isSpec: "True"
  fullName: WeihanLi.Common.StopwatchProfiler.Elapsed
  nameWithType: StopwatchProfiler.Elapsed
- uid: WeihanLi.Common.StopwatchProfiler.Restart
  name: Restart()
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: M:WeihanLi.Common.StopwatchProfiler.Restart
  fullName: WeihanLi.Common.StopwatchProfiler.Restart()
  nameWithType: StopwatchProfiler.Restart()
- uid: WeihanLi.Common.StopwatchProfiler.Restart*
  name: Restart
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: Overload:WeihanLi.Common.StopwatchProfiler.Restart
  isSpec: "True"
  fullName: WeihanLi.Common.StopwatchProfiler.Restart
  nameWithType: StopwatchProfiler.Restart
- uid: WeihanLi.Common.StopwatchProfiler.Start
  name: Start()
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: M:WeihanLi.Common.StopwatchProfiler.Start
  fullName: WeihanLi.Common.StopwatchProfiler.Start()
  nameWithType: StopwatchProfiler.Start()
- uid: WeihanLi.Common.StopwatchProfiler.Start*
  name: Start
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: Overload:WeihanLi.Common.StopwatchProfiler.Start
  isSpec: "True"
  fullName: WeihanLi.Common.StopwatchProfiler.Start
  nameWithType: StopwatchProfiler.Start
- uid: WeihanLi.Common.StopwatchProfiler.Stop
  name: Stop()
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: M:WeihanLi.Common.StopwatchProfiler.Stop
  fullName: WeihanLi.Common.StopwatchProfiler.Stop()
  nameWithType: StopwatchProfiler.Stop()
- uid: WeihanLi.Common.StopwatchProfiler.Stop*
  name: Stop
  href: api/WeihanLi.Common.StopwatchProfiler.yml
  commentId: Overload:WeihanLi.Common.StopwatchProfiler.Stop
  isSpec: "True"
  fullName: WeihanLi.Common.StopwatchProfiler.Stop
  nameWithType: StopwatchProfiler.Stop
- uid: WeihanLi.Common.Templating
  name: WeihanLi.Common.Templating
  href: api/WeihanLi.Common.Templating.yml
  commentId: N:WeihanLi.Common.Templating
  fullName: WeihanLi.Common.Templating
  nameWithType: WeihanLi.Common.Templating
- uid: WeihanLi.Common.Templating.DefaultTemplateParser
  name: DefaultTemplateParser
  href: api/WeihanLi.Common.Templating.DefaultTemplateParser.yml
  commentId: T:WeihanLi.Common.Templating.DefaultTemplateParser
  fullName: WeihanLi.Common.Templating.DefaultTemplateParser
  nameWithType: DefaultTemplateParser
- uid: WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync(System.String)
  name: ParseAsync(string)
  href: api/WeihanLi.Common.Templating.DefaultTemplateParser.yml
  commentId: M:WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync(System.String)
  name.vb: ParseAsync(String)
  fullName: WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync(string)
  fullName.vb: WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync(String)
  nameWithType: DefaultTemplateParser.ParseAsync(string)
  nameWithType.vb: DefaultTemplateParser.ParseAsync(String)
- uid: WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync*
  name: ParseAsync
  href: api/WeihanLi.Common.Templating.DefaultTemplateParser.yml
  commentId: Overload:WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.DefaultTemplateParser.ParseAsync
  nameWithType: DefaultTemplateParser.ParseAsync
- uid: WeihanLi.Common.Templating.DefaultTemplateRenderer
  name: DefaultTemplateRenderer
  href: api/WeihanLi.Common.Templating.DefaultTemplateRenderer.yml
  commentId: T:WeihanLi.Common.Templating.DefaultTemplateRenderer
  fullName: WeihanLi.Common.Templating.DefaultTemplateRenderer
  nameWithType: DefaultTemplateRenderer
- uid: WeihanLi.Common.Templating.DefaultTemplateRenderer.#ctor(System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Threading.Tasks.Task})
  name: DefaultTemplateRenderer(Func<TemplateRenderContext, Task>)
  href: api/WeihanLi.Common.Templating.DefaultTemplateRenderer.yml
  commentId: M:WeihanLi.Common.Templating.DefaultTemplateRenderer.#ctor(System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Threading.Tasks.Task})
  name.vb: New(Func(Of TemplateRenderContext, Task))
  fullName: WeihanLi.Common.Templating.DefaultTemplateRenderer.DefaultTemplateRenderer(System.Func<WeihanLi.Common.Templating.TemplateRenderContext, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Templating.DefaultTemplateRenderer.New(System.Func(Of WeihanLi.Common.Templating.TemplateRenderContext, System.Threading.Tasks.Task))
  nameWithType: DefaultTemplateRenderer.DefaultTemplateRenderer(Func<TemplateRenderContext, Task>)
  nameWithType.vb: DefaultTemplateRenderer.New(Func(Of TemplateRenderContext, Task))
- uid: WeihanLi.Common.Templating.DefaultTemplateRenderer.#ctor*
  name: DefaultTemplateRenderer
  href: api/WeihanLi.Common.Templating.DefaultTemplateRenderer.yml
  commentId: Overload:WeihanLi.Common.Templating.DefaultTemplateRenderer.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Templating.DefaultTemplateRenderer.DefaultTemplateRenderer
  fullName.vb: WeihanLi.Common.Templating.DefaultTemplateRenderer.New
  nameWithType: DefaultTemplateRenderer.DefaultTemplateRenderer
  nameWithType.vb: DefaultTemplateRenderer.New
- uid: WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name: RenderAsync(TemplateRenderContext, object)
  href: api/WeihanLi.Common.Templating.DefaultTemplateRenderer.yml
  commentId: M:WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name.vb: RenderAsync(TemplateRenderContext, Object)
  fullName: WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, object)
  fullName.vb: WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, Object)
  nameWithType: DefaultTemplateRenderer.RenderAsync(TemplateRenderContext, object)
  nameWithType.vb: DefaultTemplateRenderer.RenderAsync(TemplateRenderContext, Object)
- uid: WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync*
  name: RenderAsync
  href: api/WeihanLi.Common.Templating.DefaultTemplateRenderer.yml
  commentId: Overload:WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.DefaultTemplateRenderer.RenderAsync
  nameWithType: DefaultTemplateRenderer.RenderAsync
- uid: WeihanLi.Common.Templating.ITemplateParser
  name: ITemplateParser
  href: api/WeihanLi.Common.Templating.ITemplateParser.yml
  commentId: T:WeihanLi.Common.Templating.ITemplateParser
  fullName: WeihanLi.Common.Templating.ITemplateParser
  nameWithType: ITemplateParser
- uid: WeihanLi.Common.Templating.ITemplateParser.ParseAsync(System.String)
  name: ParseAsync(string)
  href: api/WeihanLi.Common.Templating.ITemplateParser.yml
  commentId: M:WeihanLi.Common.Templating.ITemplateParser.ParseAsync(System.String)
  name.vb: ParseAsync(String)
  fullName: WeihanLi.Common.Templating.ITemplateParser.ParseAsync(string)
  fullName.vb: WeihanLi.Common.Templating.ITemplateParser.ParseAsync(String)
  nameWithType: ITemplateParser.ParseAsync(string)
  nameWithType.vb: ITemplateParser.ParseAsync(String)
- uid: WeihanLi.Common.Templating.ITemplateParser.ParseAsync*
  name: ParseAsync
  href: api/WeihanLi.Common.Templating.ITemplateParser.yml
  commentId: Overload:WeihanLi.Common.Templating.ITemplateParser.ParseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.ITemplateParser.ParseAsync
  nameWithType: ITemplateParser.ParseAsync
- uid: WeihanLi.Common.Templating.ITemplateRenderer
  name: ITemplateRenderer
  href: api/WeihanLi.Common.Templating.ITemplateRenderer.yml
  commentId: T:WeihanLi.Common.Templating.ITemplateRenderer
  fullName: WeihanLi.Common.Templating.ITemplateRenderer
  nameWithType: ITemplateRenderer
- uid: WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name: RenderAsync(TemplateRenderContext, object)
  href: api/WeihanLi.Common.Templating.ITemplateRenderer.yml
  commentId: M:WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name.vb: RenderAsync(TemplateRenderContext, Object)
  fullName: WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, object)
  fullName.vb: WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, Object)
  nameWithType: ITemplateRenderer.RenderAsync(TemplateRenderContext, object)
  nameWithType.vb: ITemplateRenderer.RenderAsync(TemplateRenderContext, Object)
- uid: WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync*
  name: RenderAsync
  href: api/WeihanLi.Common.Templating.ITemplateRenderer.yml
  commentId: Overload:WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.ITemplateRenderer.RenderAsync
  nameWithType: ITemplateRenderer.RenderAsync
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder
  name: ITemplateRendererBuilder
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: T:WeihanLi.Common.Templating.ITemplateRendererBuilder
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder
  nameWithType: ITemplateRendererBuilder
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.Build
  name: Build()
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: M:WeihanLi.Common.Templating.ITemplateRendererBuilder.Build
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.Build()
  nameWithType: ITemplateRendererBuilder.Build()
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.Build*
  name: Build
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: Overload:WeihanLi.Common.Templating.ITemplateRendererBuilder.Build
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.Build
  nameWithType: ITemplateRendererBuilder.Build
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions(System.Action{WeihanLi.Common.Templating.TemplateOptions})
  name: ConfigureOptions(Action<TemplateOptions>)
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: M:WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions(System.Action{WeihanLi.Common.Templating.TemplateOptions})
  name.vb: ConfigureOptions(Action(Of TemplateOptions))
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions(System.Action<WeihanLi.Common.Templating.TemplateOptions>)
  fullName.vb: WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions(System.Action(Of WeihanLi.Common.Templating.TemplateOptions))
  nameWithType: ITemplateRendererBuilder.ConfigureOptions(Action<TemplateOptions>)
  nameWithType.vb: ITemplateRendererBuilder.ConfigureOptions(Action(Of TemplateOptions))
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions*
  name: ConfigureOptions
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: Overload:WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.ConfigureOptions
  nameWithType: ITemplateRendererBuilder.ConfigureOptions
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.Use(System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name: Use(Func<TemplateRenderContext, Func<TemplateRenderContext, Task>, Task>)
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: M:WeihanLi.Common.Templating.ITemplateRendererBuilder.Use(System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Func{WeihanLi.Common.Templating.TemplateRenderContext,System.Threading.Tasks.Task},System.Threading.Tasks.Task})
  name.vb: Use(Func(Of TemplateRenderContext, Func(Of TemplateRenderContext, Task), Task))
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.Use(System.Func<WeihanLi.Common.Templating.TemplateRenderContext, System.Func<WeihanLi.Common.Templating.TemplateRenderContext, System.Threading.Tasks.Task>, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Common.Templating.ITemplateRendererBuilder.Use(System.Func(Of WeihanLi.Common.Templating.TemplateRenderContext, System.Func(Of WeihanLi.Common.Templating.TemplateRenderContext, System.Threading.Tasks.Task), System.Threading.Tasks.Task))
  nameWithType: ITemplateRendererBuilder.Use(Func<TemplateRenderContext, Func<TemplateRenderContext, Task>, Task>)
  nameWithType.vb: ITemplateRendererBuilder.Use(Func(Of TemplateRenderContext, Func(Of TemplateRenderContext, Task), Task))
- uid: WeihanLi.Common.Templating.ITemplateRendererBuilder.Use*
  name: Use
  href: api/WeihanLi.Common.Templating.ITemplateRendererBuilder.yml
  commentId: Overload:WeihanLi.Common.Templating.ITemplateRendererBuilder.Use
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.ITemplateRendererBuilder.Use
  nameWithType: ITemplateRendererBuilder.Use
- uid: WeihanLi.Common.Templating.TemplateEngine
  name: TemplateEngine
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: T:WeihanLi.Common.Templating.TemplateEngine
  fullName: WeihanLi.Common.Templating.TemplateEngine
  nameWithType: TemplateEngine
- uid: WeihanLi.Common.Templating.TemplateEngine.#ctor(WeihanLi.Common.Templating.ITemplateParser,WeihanLi.Common.Templating.ITemplateRenderer)
  name: TemplateEngine(ITemplateParser, ITemplateRenderer)
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: M:WeihanLi.Common.Templating.TemplateEngine.#ctor(WeihanLi.Common.Templating.ITemplateParser,WeihanLi.Common.Templating.ITemplateRenderer)
  name.vb: New(ITemplateParser, ITemplateRenderer)
  fullName: WeihanLi.Common.Templating.TemplateEngine.TemplateEngine(WeihanLi.Common.Templating.ITemplateParser, WeihanLi.Common.Templating.ITemplateRenderer)
  fullName.vb: WeihanLi.Common.Templating.TemplateEngine.New(WeihanLi.Common.Templating.ITemplateParser, WeihanLi.Common.Templating.ITemplateRenderer)
  nameWithType: TemplateEngine.TemplateEngine(ITemplateParser, ITemplateRenderer)
  nameWithType.vb: TemplateEngine.New(ITemplateParser, ITemplateRenderer)
- uid: WeihanLi.Common.Templating.TemplateEngine.#ctor*
  name: TemplateEngine
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateEngine.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Templating.TemplateEngine.TemplateEngine
  fullName.vb: WeihanLi.Common.Templating.TemplateEngine.New
  nameWithType: TemplateEngine.TemplateEngine
  nameWithType.vb: TemplateEngine.New
- uid: WeihanLi.Common.Templating.TemplateEngine.CreateDefault
  name: CreateDefault()
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: M:WeihanLi.Common.Templating.TemplateEngine.CreateDefault
  fullName: WeihanLi.Common.Templating.TemplateEngine.CreateDefault()
  nameWithType: TemplateEngine.CreateDefault()
- uid: WeihanLi.Common.Templating.TemplateEngine.CreateDefault*
  name: CreateDefault
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateEngine.CreateDefault
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateEngine.CreateDefault
  nameWithType: TemplateEngine.CreateDefault
- uid: WeihanLi.Common.Templating.TemplateEngine.ParseAsync(System.String)
  name: ParseAsync(string)
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: M:WeihanLi.Common.Templating.TemplateEngine.ParseAsync(System.String)
  name.vb: ParseAsync(String)
  fullName: WeihanLi.Common.Templating.TemplateEngine.ParseAsync(string)
  fullName.vb: WeihanLi.Common.Templating.TemplateEngine.ParseAsync(String)
  nameWithType: TemplateEngine.ParseAsync(string)
  nameWithType.vb: TemplateEngine.ParseAsync(String)
- uid: WeihanLi.Common.Templating.TemplateEngine.ParseAsync*
  name: ParseAsync
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateEngine.ParseAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateEngine.ParseAsync
  nameWithType: TemplateEngine.ParseAsync
- uid: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(System.String,System.Object)
  name: RenderAsync(string, object)
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: M:WeihanLi.Common.Templating.TemplateEngine.RenderAsync(System.String,System.Object)
  name.vb: RenderAsync(String, Object)
  fullName: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(string, object)
  fullName.vb: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(String, Object)
  nameWithType: TemplateEngine.RenderAsync(string, object)
  nameWithType.vb: TemplateEngine.RenderAsync(String, Object)
- uid: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name: RenderAsync(TemplateRenderContext, object)
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: M:WeihanLi.Common.Templating.TemplateEngine.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext,System.Object)
  name.vb: RenderAsync(TemplateRenderContext, Object)
  fullName: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, object)
  fullName.vb: WeihanLi.Common.Templating.TemplateEngine.RenderAsync(WeihanLi.Common.Templating.TemplateRenderContext, Object)
  nameWithType: TemplateEngine.RenderAsync(TemplateRenderContext, object)
  nameWithType.vb: TemplateEngine.RenderAsync(TemplateRenderContext, Object)
- uid: WeihanLi.Common.Templating.TemplateEngine.RenderAsync*
  name: RenderAsync
  href: api/WeihanLi.Common.Templating.TemplateEngine.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateEngine.RenderAsync
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateEngine.RenderAsync
  nameWithType: TemplateEngine.RenderAsync
- uid: WeihanLi.Common.Templating.TemplateOptions
  name: TemplateOptions
  href: api/WeihanLi.Common.Templating.TemplateOptions.yml
  commentId: T:WeihanLi.Common.Templating.TemplateOptions
  fullName: WeihanLi.Common.Templating.TemplateOptions
  nameWithType: TemplateOptions
- uid: WeihanLi.Common.Templating.TemplateRenderContext
  name: TemplateRenderContext
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: T:WeihanLi.Common.Templating.TemplateRenderContext
  fullName: WeihanLi.Common.Templating.TemplateRenderContext
  nameWithType: TemplateRenderContext
- uid: WeihanLi.Common.Templating.TemplateRenderContext.#ctor(System.String,System.Collections.Generic.HashSet{System.String})
  name: TemplateRenderContext(string, HashSet<string>)
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: M:WeihanLi.Common.Templating.TemplateRenderContext.#ctor(System.String,System.Collections.Generic.HashSet{System.String})
  name.vb: New(String, HashSet(Of String))
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.TemplateRenderContext(string, System.Collections.Generic.HashSet<string>)
  fullName.vb: WeihanLi.Common.Templating.TemplateRenderContext.New(String, System.Collections.Generic.HashSet(Of String))
  nameWithType: TemplateRenderContext.TemplateRenderContext(string, HashSet<string>)
  nameWithType.vb: TemplateRenderContext.New(String, HashSet(Of String))
- uid: WeihanLi.Common.Templating.TemplateRenderContext.#ctor*
  name: TemplateRenderContext
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.TemplateRenderContext
  fullName.vb: WeihanLi.Common.Templating.TemplateRenderContext.New
  nameWithType: TemplateRenderContext.TemplateRenderContext
  nameWithType.vb: TemplateRenderContext.New
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Parameters
  name: Parameters
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: P:WeihanLi.Common.Templating.TemplateRenderContext.Parameters
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Parameters
  nameWithType: TemplateRenderContext.Parameters
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Parameters*
  name: Parameters
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.Parameters
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Parameters
  nameWithType: TemplateRenderContext.Parameters
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Properties
  name: Properties
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: P:WeihanLi.Common.Templating.TemplateRenderContext.Properties
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Properties
  nameWithType: TemplateRenderContext.Properties
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Properties*
  name: Properties
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.Properties
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Properties
  nameWithType: TemplateRenderContext.Properties
- uid: WeihanLi.Common.Templating.TemplateRenderContext.RenderedText
  name: RenderedText
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: P:WeihanLi.Common.Templating.TemplateRenderContext.RenderedText
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.RenderedText
  nameWithType: TemplateRenderContext.RenderedText
- uid: WeihanLi.Common.Templating.TemplateRenderContext.RenderedText*
  name: RenderedText
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.RenderedText
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.RenderedText
  nameWithType: TemplateRenderContext.RenderedText
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Text
  name: Text
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: P:WeihanLi.Common.Templating.TemplateRenderContext.Text
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Text
  nameWithType: TemplateRenderContext.Text
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Text*
  name: Text
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.Text
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Text
  nameWithType: TemplateRenderContext.Text
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Variables
  name: Variables
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: P:WeihanLi.Common.Templating.TemplateRenderContext.Variables
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Variables
  nameWithType: TemplateRenderContext.Variables
- uid: WeihanLi.Common.Templating.TemplateRenderContext.Variables*
  name: Variables
  href: api/WeihanLi.Common.Templating.TemplateRenderContext.yml
  commentId: Overload:WeihanLi.Common.Templating.TemplateRenderContext.Variables
  isSpec: "True"
  fullName: WeihanLi.Common.Templating.TemplateRenderContext.Variables
  nameWithType: TemplateRenderContext.Variables
- uid: WeihanLi.Data
  name: WeihanLi.Data
  href: api/WeihanLi.Data.yml
  commentId: N:WeihanLi.Data
  fullName: WeihanLi.Data
  nameWithType: WeihanLi.Data
- uid: WeihanLi.Data.SqlExtensions
  name: SqlExtensions
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: T:WeihanLi.Data.SqlExtensions
  fullName: WeihanLi.Data.SqlExtensions
  nameWithType: SqlExtensions
- uid: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.Int32)
  name: BulkCopy(SqlConnection, DataTable, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.Int32)
  name.vb: BulkCopy(SqlConnection, DataTable, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, Integer)
  nameWithType: SqlExtensions.BulkCopy(SqlConnection, DataTable, int)
  nameWithType.vb: SqlExtensions.BulkCopy(SqlConnection, DataTable, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)
  name: BulkCopy(SqlConnection, DataTable, string, int, IDictionary<string, string>?, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)
  name.vb: BulkCopy(SqlConnection, DataTable, String, Integer, IDictionary(Of String, String), Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string, int, System.Collections.Generic.IDictionary<string, string>?, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String, Integer, System.Collections.Generic.IDictionary(Of String, String), Integer)
  nameWithType: SqlExtensions.BulkCopy(SqlConnection, DataTable, string, int, IDictionary<string, string>?, int)
  nameWithType.vb: SqlExtensions.BulkCopy(SqlConnection, DataTable, String, Integer, IDictionary(Of String, String), Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32)
  name: BulkCopy(SqlConnection, DataTable, string, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32)
  name.vb: BulkCopy(SqlConnection, DataTable, String, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String, Integer)
  nameWithType: SqlExtensions.BulkCopy(SqlConnection, DataTable, string, int)
  nameWithType.vb: SqlExtensions.BulkCopy(SqlConnection, DataTable, String, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)
  name: BulkCopy(SqlConnection, DataTable, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)
  name.vb: BulkCopy(SqlConnection, DataTable, String)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String)
  nameWithType: SqlExtensions.BulkCopy(SqlConnection, DataTable, string)
  nameWithType.vb: SqlExtensions.BulkCopy(SqlConnection, DataTable, String)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable)
  name: BulkCopy(SqlConnection, DataTable)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable)
  nameWithType: SqlExtensions.BulkCopy(SqlConnection, DataTable)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy*
  name: BulkCopy
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: Overload:WeihanLi.Data.SqlExtensions.BulkCopy
  isSpec: "True"
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy
  nameWithType: SqlExtensions.BulkCopy
- uid: WeihanLi.Data.SqlExtensions.BulkCopy``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.Int32)
  name: BulkCopy<T>(SqlConnection, IReadOnlyCollection<T>?, string, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.Int32)
  name.vb: BulkCopy(Of T)(SqlConnection, IReadOnlyCollection(Of T), String, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy<T>(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection<T>?, string, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Of T)(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection(Of T), String, Integer)
  nameWithType: SqlExtensions.BulkCopy<T>(SqlConnection, IReadOnlyCollection<T>?, string, int)
  nameWithType.vb: SqlExtensions.BulkCopy(Of T)(SqlConnection, IReadOnlyCollection(Of T), String, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopy``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String)
  name: BulkCopy<T>(SqlConnection, IReadOnlyCollection<T>, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopy``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String)
  name.vb: BulkCopy(Of T)(SqlConnection, IReadOnlyCollection(Of T), String)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopy<T>(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection<T>, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopy(Of T)(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection(Of T), String)
  nameWithType: SqlExtensions.BulkCopy<T>(SqlConnection, IReadOnlyCollection<T>, string)
  nameWithType.vb: SqlExtensions.BulkCopy(Of T)(SqlConnection, IReadOnlyCollection(Of T), String)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.Int32)
  name: BulkCopyAsync(SqlConnection, DataTable, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.Int32)
  name.vb: BulkCopyAsync(SqlConnection, DataTable, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, Integer)
  nameWithType: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, int)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)
  name: BulkCopyAsync(SqlConnection, DataTable, string, int, IDictionary<string, string>?, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)
  name.vb: BulkCopyAsync(SqlConnection, DataTable, String, Integer, IDictionary(Of String, String), Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string, int, System.Collections.Generic.IDictionary<string, string>?, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String, Integer, System.Collections.Generic.IDictionary(Of String, String), Integer)
  nameWithType: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, string, int, IDictionary<string, string>?, int)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, String, Integer, IDictionary(Of String, String), Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32)
  name: BulkCopyAsync(SqlConnection, DataTable, string, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String,System.Int32)
  name.vb: BulkCopyAsync(SqlConnection, DataTable, String, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String, Integer)
  nameWithType: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, string, int)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, String, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)
  name: BulkCopyAsync(SqlConnection, DataTable, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable,System.String)
  name.vb: BulkCopyAsync(SqlConnection, DataTable, String)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable, String)
  nameWithType: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, string)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable, String)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable)
  name: BulkCopyAsync(SqlConnection, DataTable)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection,System.Data.DataTable)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Microsoft.Data.SqlClient.SqlConnection, System.Data.DataTable)
  nameWithType: SqlExtensions.BulkCopyAsync(SqlConnection, DataTable)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync*
  name: BulkCopyAsync
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: Overload:WeihanLi.Data.SqlExtensions.BulkCopyAsync
  isSpec: "True"
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync
  nameWithType: SqlExtensions.BulkCopyAsync
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.Int32)
  name: BulkCopyAsync<T>(SqlConnection, IReadOnlyCollection<T>?, string, int)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.Int32)
  name.vb: BulkCopyAsync(Of T)(SqlConnection, IReadOnlyCollection(Of T), String, Integer)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync<T>(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection<T>?, string, int)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Of T)(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection(Of T), String, Integer)
  nameWithType: SqlExtensions.BulkCopyAsync<T>(SqlConnection, IReadOnlyCollection<T>?, string, int)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(Of T)(SqlConnection, IReadOnlyCollection(Of T), String, Integer)
- uid: WeihanLi.Data.SqlExtensions.BulkCopyAsync``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String)
  name: BulkCopyAsync<T>(SqlConnection, IReadOnlyCollection<T>, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.BulkCopyAsync``1(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.IReadOnlyCollection{``0},System.String)
  name.vb: BulkCopyAsync(Of T)(SqlConnection, IReadOnlyCollection(Of T), String)
  fullName: WeihanLi.Data.SqlExtensions.BulkCopyAsync<T>(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection<T>, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.BulkCopyAsync(Of T)(Microsoft.Data.SqlClient.SqlConnection, System.Collections.Generic.IReadOnlyCollection(Of T), String)
  nameWithType: SqlExtensions.BulkCopyAsync<T>(SqlConnection, IReadOnlyCollection<T>, string)
  nameWithType.vb: SqlExtensions.BulkCopyAsync(Of T)(SqlConnection, IReadOnlyCollection(Of T), String)
- uid: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb(Microsoft.Data.SqlClient.SqlConnection,System.String)
  name: GetColumnNamesFromDb(SqlConnection, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb(Microsoft.Data.SqlClient.SqlConnection,System.String)
  name.vb: GetColumnNamesFromDb(SqlConnection, String)
  fullName: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb(Microsoft.Data.SqlClient.SqlConnection, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb(Microsoft.Data.SqlClient.SqlConnection, String)
  nameWithType: SqlExtensions.GetColumnNamesFromDb(SqlConnection, string)
  nameWithType.vb: SqlExtensions.GetColumnNamesFromDb(SqlConnection, String)
- uid: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb*
  name: GetColumnNamesFromDb
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: Overload:WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb
  isSpec: "True"
  fullName: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDb
  nameWithType: SqlExtensions.GetColumnNamesFromDb
- uid: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync(Microsoft.Data.SqlClient.SqlConnection,System.String)
  name: GetColumnNamesFromDbAsync(SqlConnection, string)
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: M:WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync(Microsoft.Data.SqlClient.SqlConnection,System.String)
  name.vb: GetColumnNamesFromDbAsync(SqlConnection, String)
  fullName: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync(Microsoft.Data.SqlClient.SqlConnection, string)
  fullName.vb: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync(Microsoft.Data.SqlClient.SqlConnection, String)
  nameWithType: SqlExtensions.GetColumnNamesFromDbAsync(SqlConnection, string)
  nameWithType.vb: SqlExtensions.GetColumnNamesFromDbAsync(SqlConnection, String)
- uid: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync*
  name: GetColumnNamesFromDbAsync
  href: api/WeihanLi.Data.SqlExtensions.yml
  commentId: Overload:WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync
  isSpec: "True"
  fullName: WeihanLi.Data.SqlExtensions.GetColumnNamesFromDbAsync
  nameWithType: SqlExtensions.GetColumnNamesFromDbAsync
- uid: WeihanLi.Extensions
  name: WeihanLi.Extensions
  href: api/WeihanLi.Extensions.yml
  commentId: N:WeihanLi.Extensions
  fullName: WeihanLi.Extensions
  nameWithType: WeihanLi.Extensions
- uid: WeihanLi.Extensions.CollectionExtension
  name: CollectionExtension
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: T:WeihanLi.Extensions.CollectionExtension
  fullName: WeihanLi.Extensions.CollectionExtension
  nameWithType: CollectionExtension
- uid: WeihanLi.Extensions.CollectionExtension.AddIf*
  name: AddIf
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.AddIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.AddIf
  nameWithType: CollectionExtension.AddIf
- uid: WeihanLi.Extensions.CollectionExtension.AddIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0)
  name: AddIf<T>(ICollection<T>, Func<T, bool>, T)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.AddIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0)
  name.vb: AddIf(Of T)(ICollection(Of T), Func(Of T, Boolean), T)
  fullName: WeihanLi.Extensions.CollectionExtension.AddIf<T>(System.Collections.Generic.ICollection<T>, System.Func<T, bool>, T)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.AddIf(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, Boolean), T)
  nameWithType: CollectionExtension.AddIf<T>(ICollection<T>, Func<T, bool>, T)
  nameWithType.vb: CollectionExtension.AddIf(Of T)(ICollection(Of T), Func(Of T, Boolean), T)
- uid: WeihanLi.Extensions.CollectionExtension.AddIfNotContains*
  name: AddIfNotContains
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.AddIfNotContains
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.AddIfNotContains
  nameWithType: CollectionExtension.AddIfNotContains
- uid: WeihanLi.Extensions.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  name: AddIfNotContains<T>(ICollection<T>, T)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)
  name.vb: AddIfNotContains(Of T)(ICollection(Of T), T)
  fullName: WeihanLi.Extensions.CollectionExtension.AddIfNotContains<T>(System.Collections.Generic.ICollection<T>, T)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.AddIfNotContains(Of T)(System.Collections.Generic.ICollection(Of T), T)
  nameWithType: CollectionExtension.AddIfNotContains<T>(ICollection<T>, T)
  nameWithType.vb: CollectionExtension.AddIfNotContains(Of T)(ICollection(Of T), T)
- uid: WeihanLi.Extensions.CollectionExtension.AddRange*
  name: AddRange
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.AddRange
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.AddRange
  nameWithType: CollectionExtension.AddRange
- uid: WeihanLi.Extensions.CollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  name: AddRange<T>(ICollection<T>, params T[])
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])
  name.vb: AddRange(Of T)(ICollection(Of T), ParamArray T())
  fullName: WeihanLi.Extensions.CollectionExtension.AddRange<T>(System.Collections.Generic.ICollection<T>, params T[])
  fullName.vb: WeihanLi.Extensions.CollectionExtension.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), ParamArray T())
  nameWithType: CollectionExtension.AddRange<T>(ICollection<T>, params T[])
  nameWithType.vb: CollectionExtension.AddRange(Of T)(ICollection(Of T), ParamArray T())
- uid: WeihanLi.Extensions.CollectionExtension.AddRangeIf*
  name: AddRangeIf
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.AddRangeIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.AddRangeIf
  nameWithType: CollectionExtension.AddRangeIf
- uid: WeihanLi.Extensions.CollectionExtension.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])
  name: AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[])
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])
  name.vb: AddRangeIf(Of T)(ICollection(Of T), Func(Of T, Boolean), ParamArray T())
  fullName: WeihanLi.Extensions.CollectionExtension.AddRangeIf<T>(System.Collections.Generic.ICollection<T>, System.Func<T, bool>, params T[])
  fullName.vb: WeihanLi.Extensions.CollectionExtension.AddRangeIf(Of T)(System.Collections.Generic.ICollection(Of T), System.Func(Of T, Boolean), ParamArray T())
  nameWithType: CollectionExtension.AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[])
  nameWithType.vb: CollectionExtension.AddRangeIf(Of T)(ICollection(Of T), Func(Of T, Boolean), ParamArray T())
- uid: WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains*
  name: AddRangeIfNotContains
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains
  nameWithType: CollectionExtension.AddRangeIfNotContains
- uid: WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])
  name: AddRangeIfNotContains<T>(ICollection<T>, params T[])
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])
  name.vb: AddRangeIfNotContains(Of T)(ICollection(Of T), ParamArray T())
  fullName: WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains<T>(System.Collections.Generic.ICollection<T>, params T[])
  fullName.vb: WeihanLi.Extensions.CollectionExtension.AddRangeIfNotContains(Of T)(System.Collections.Generic.ICollection(Of T), ParamArray T())
  nameWithType: CollectionExtension.AddRangeIfNotContains<T>(ICollection<T>, params T[])
  nameWithType.vb: CollectionExtension.AddRangeIfNotContains(Of T)(ICollection(Of T), ParamArray T())
- uid: WeihanLi.Extensions.CollectionExtension.ContainsAll*
  name: ContainsAll
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.ContainsAll
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.ContainsAll
  nameWithType: CollectionExtension.ContainsAll
- uid: WeihanLi.Extensions.CollectionExtension.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])
  name: ContainsAll<T>(ICollection<T>, params T[])
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])
  name.vb: ContainsAll(Of T)(ICollection(Of T), ParamArray T())
  fullName: WeihanLi.Extensions.CollectionExtension.ContainsAll<T>(System.Collections.Generic.ICollection<T>, params T[])
  fullName.vb: WeihanLi.Extensions.CollectionExtension.ContainsAll(Of T)(System.Collections.Generic.ICollection(Of T), ParamArray T())
  nameWithType: CollectionExtension.ContainsAll<T>(ICollection<T>, params T[])
  nameWithType.vb: CollectionExtension.ContainsAll(Of T)(ICollection(Of T), ParamArray T())
- uid: WeihanLi.Extensions.CollectionExtension.ContainsAny*
  name: ContainsAny
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.ContainsAny
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.ContainsAny
  nameWithType: CollectionExtension.ContainsAny
- uid: WeihanLi.Extensions.CollectionExtension.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])
  name: ContainsAny<T>(ICollection<T>, params T[])
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])
  name.vb: ContainsAny(Of T)(ICollection(Of T), ParamArray T())
  fullName: WeihanLi.Extensions.CollectionExtension.ContainsAny<T>(System.Collections.Generic.ICollection<T>, params T[])
  fullName.vb: WeihanLi.Extensions.CollectionExtension.ContainsAny(Of T)(System.Collections.Generic.ICollection(Of T), ParamArray T())
  nameWithType: CollectionExtension.ContainsAny<T>(ICollection<T>, params T[])
  nameWithType.vb: CollectionExtension.ContainsAny(Of T)(ICollection(Of T), ParamArray T())
- uid: WeihanLi.Extensions.CollectionExtension.GetRandomList*
  name: GetRandomList
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.GetRandomList
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.GetRandomList
  nameWithType: CollectionExtension.GetRandomList
- uid: WeihanLi.Extensions.CollectionExtension.GetRandomList``1(System.Collections.Generic.IList{``0})
  name: GetRandomList<T>(IList<T>)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.GetRandomList``1(System.Collections.Generic.IList{``0})
  name.vb: GetRandomList(Of T)(IList(Of T))
  fullName: WeihanLi.Extensions.CollectionExtension.GetRandomList<T>(System.Collections.Generic.IList<T>)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.GetRandomList(Of T)(System.Collections.Generic.IList(Of T))
  nameWithType: CollectionExtension.GetRandomList<T>(IList<T>)
  nameWithType.vb: CollectionExtension.GetRandomList(Of T)(IList(Of T))
- uid: WeihanLi.Extensions.CollectionExtension.HasValue*
  name: HasValue
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.HasValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.HasValue
  nameWithType: CollectionExtension.HasValue
- uid: WeihanLi.Extensions.CollectionExtension.HasValue``1(System.Collections.Generic.ICollection{``0})
  name: HasValue<T>(ICollection<T>?)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.HasValue``1(System.Collections.Generic.ICollection{``0})
  name.vb: HasValue(Of T)(ICollection(Of T))
  fullName: WeihanLi.Extensions.CollectionExtension.HasValue<T>(System.Collections.Generic.ICollection<T>?)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.HasValue(Of T)(System.Collections.Generic.ICollection(Of T))
  nameWithType: CollectionExtension.HasValue<T>(ICollection<T>?)
  nameWithType.vb: CollectionExtension.HasValue(Of T)(ICollection(Of T))
- uid: WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty*
  name: IsNullOrEmpty
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty
  nameWithType: CollectionExtension.IsNullOrEmpty
- uid: WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name: IsNullOrEmpty<T>(ICollection<T>?)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})
  name.vb: IsNullOrEmpty(Of T)(ICollection(Of T))
  fullName: WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>?)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.IsNullOrEmpty(Of T)(System.Collections.Generic.ICollection(Of T))
  nameWithType: CollectionExtension.IsNullOrEmpty<T>(ICollection<T>?)
  nameWithType.vb: CollectionExtension.IsNullOrEmpty(Of T)(ICollection(Of T))
- uid: WeihanLi.Extensions.CollectionExtension.RemoveWhere*
  name: RemoveWhere
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.RemoveWhere
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.RemoveWhere
  nameWithType: CollectionExtension.RemoveWhere
- uid: WeihanLi.Extensions.CollectionExtension.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  name: RemoveWhere<T>(IList<T>, Func<T, bool>)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  name.vb: RemoveWhere(Of T)(IList(Of T), Func(Of T, Boolean))
  fullName: WeihanLi.Extensions.CollectionExtension.RemoveWhere<T>(System.Collections.Generic.IList<T>, System.Func<T, bool>)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.RemoveWhere(Of T)(System.Collections.Generic.IList(Of T), System.Func(Of T, Boolean))
  nameWithType: CollectionExtension.RemoveWhere<T>(IList<T>, Func<T, bool>)
  nameWithType.vb: CollectionExtension.RemoveWhere(Of T)(IList(Of T), Func(Of T, Boolean))
- uid: WeihanLi.Extensions.CollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)
  name: ToDictionary(NameValueCollection?)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)
  name.vb: ToDictionary(NameValueCollection)
  fullName: WeihanLi.Extensions.CollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection?)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)
  nameWithType: CollectionExtension.ToDictionary(NameValueCollection?)
  nameWithType.vb: CollectionExtension.ToDictionary(NameValueCollection)
- uid: WeihanLi.Extensions.CollectionExtension.ToDictionary*
  name: ToDictionary
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.ToDictionary
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.ToDictionary
  nameWithType: CollectionExtension.ToDictionary
- uid: WeihanLi.Extensions.CollectionExtension.ToQueryString(System.Collections.Specialized.NameValueCollection)
  name: ToQueryString(NameValueCollection?)
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: M:WeihanLi.Extensions.CollectionExtension.ToQueryString(System.Collections.Specialized.NameValueCollection)
  name.vb: ToQueryString(NameValueCollection)
  fullName: WeihanLi.Extensions.CollectionExtension.ToQueryString(System.Collections.Specialized.NameValueCollection?)
  fullName.vb: WeihanLi.Extensions.CollectionExtension.ToQueryString(System.Collections.Specialized.NameValueCollection)
  nameWithType: CollectionExtension.ToQueryString(NameValueCollection?)
  nameWithType.vb: CollectionExtension.ToQueryString(NameValueCollection)
- uid: WeihanLi.Extensions.CollectionExtension.ToQueryString*
  name: ToQueryString
  href: api/WeihanLi.Extensions.CollectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CollectionExtension.ToQueryString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CollectionExtension.ToQueryString
  nameWithType: CollectionExtension.ToQueryString
- uid: WeihanLi.Extensions.CompressionExtension
  name: CompressionExtension
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: T:WeihanLi.Extensions.CompressionExtension
  fullName: WeihanLi.Extensions.CompressionExtension
  nameWithType: CompressionExtension
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZip(System.Byte[])
  name: CompressGZip(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZip(System.Byte[])
  name.vb: CompressGZip(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZip(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZip(Byte())
  nameWithType: CompressionExtension.CompressGZip(byte[])
  nameWithType.vb: CompressionExtension.CompressGZip(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZip(System.IO.Stream)
  name: CompressGZip(Stream)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZip(System.IO.Stream)
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZip(System.IO.Stream)
  nameWithType: CompressionExtension.CompressGZip(Stream)
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZip(System.String,System.Text.Encoding)
  name: CompressGZip(string, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZip(System.String,System.Text.Encoding)
  name.vb: CompressGZip(String, Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZip(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZip(String, System.Text.Encoding)
  nameWithType: CompressionExtension.CompressGZip(string, Encoding)
  nameWithType.vb: CompressionExtension.CompressGZip(String, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZip(System.String)
  name: CompressGZip(string)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZip(System.String)
  name.vb: CompressGZip(String)
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZip(string)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZip(String)
  nameWithType: CompressionExtension.CompressGZip(string)
  nameWithType.vb: CompressionExtension.CompressGZip(String)
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZip*
  name: CompressGZip
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.CompressGZip
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZip
  nameWithType: CompressionExtension.CompressGZip
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(System.Byte[])
  name: CompressGZipAsync(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(System.Byte[])
  name.vb: CompressGZipAsync(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(Byte())
  nameWithType: CompressionExtension.CompressGZipAsync(byte[])
  nameWithType.vb: CompressionExtension.CompressGZipAsync(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(System.IO.Stream)
  name: CompressGZipAsync(Stream)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(System.IO.Stream)
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync(System.IO.Stream)
  nameWithType: CompressionExtension.CompressGZipAsync(Stream)
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync*
  name: CompressGZipAsync
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.CompressGZipAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipAsync
  nameWithType: CompressionExtension.CompressGZipAsync
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipString(System.Byte[],System.Text.Encoding)
  name: CompressGZipString(byte[], Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZipString(System.Byte[],System.Text.Encoding)
  name.vb: CompressGZipString(Byte(), Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipString(byte[], System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZipString(Byte(), System.Text.Encoding)
  nameWithType: CompressionExtension.CompressGZipString(byte[], Encoding)
  nameWithType.vb: CompressionExtension.CompressGZipString(Byte(), Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipString(System.Byte[])
  name: CompressGZipString(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CompressGZipString(System.Byte[])
  name.vb: CompressGZipString(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipString(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CompressGZipString(Byte())
  nameWithType: CompressionExtension.CompressGZipString(byte[])
  nameWithType.vb: CompressionExtension.CompressGZipString(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.CompressGZipString*
  name: CompressGZipString
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.CompressGZipString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.CompressGZipString
  nameWithType: CompressionExtension.CompressGZipString
- uid: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo,System.IO.FileInfo)
  name: CreateGZip(FileInfo, FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo,System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo, System.IO.FileInfo)
  nameWithType: CompressionExtension.CreateGZip(FileInfo, FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo,System.String)
  name: CreateGZip(FileInfo, string)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo,System.String)
  name.vb: CreateGZip(FileInfo, String)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo, string)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo, String)
  nameWithType: CompressionExtension.CreateGZip(FileInfo, string)
  nameWithType.vb: CompressionExtension.CreateGZip(FileInfo, String)
- uid: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo)
  name: CreateGZip(FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateGZip(System.IO.FileInfo)
  nameWithType: CompressionExtension.CreateGZip(FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.CreateGZip*
  name: CreateGZip
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.CreateGZip
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.CreateGZip
  nameWithType: CompressionExtension.CreateGZip
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  name: CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, bool, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  name.vb: CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, Boolean, Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, System.IO.FileInfo, System.IO.Compression.CompressionLevel, bool, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, System.IO.FileInfo, System.IO.Compression.CompressionLevel, Boolean, System.Text.Encoding)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, bool, Encoding)
  nameWithType.vb: CompressionExtension.CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, Boolean, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean)
  name: CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, bool)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean)
  name.vb: CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, Boolean)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, System.IO.FileInfo, System.IO.Compression.CompressionLevel, bool)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, System.IO.FileInfo, System.IO.Compression.CompressionLevel, Boolean)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, bool)
  nameWithType.vb: CompressionExtension.CreateZipFile(DirectoryInfo, FileInfo, CompressionLevel, Boolean)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo)
  name: CreateZipFile(DirectoryInfo, FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, System.IO.FileInfo)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  name: CreateZipFile(DirectoryInfo, string, CompressionLevel, bool, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  name.vb: CreateZipFile(DirectoryInfo, String, CompressionLevel, Boolean, Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, string, System.IO.Compression.CompressionLevel, bool, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, String, System.IO.Compression.CompressionLevel, Boolean, System.Text.Encoding)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, string, CompressionLevel, bool, Encoding)
  nameWithType.vb: CompressionExtension.CreateZipFile(DirectoryInfo, String, CompressionLevel, Boolean, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  name: CreateZipFile(DirectoryInfo, string, CompressionLevel, bool)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  name.vb: CreateZipFile(DirectoryInfo, String, CompressionLevel, Boolean)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, string, System.IO.Compression.CompressionLevel, bool)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, String, System.IO.Compression.CompressionLevel, Boolean)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, string, CompressionLevel, bool)
  nameWithType.vb: CompressionExtension.CreateZipFile(DirectoryInfo, String, CompressionLevel, Boolean)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String)
  name: CreateZipFile(DirectoryInfo, string)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo,System.String)
  name.vb: CreateZipFile(DirectoryInfo, String)
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, string)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.CreateZipFile(System.IO.DirectoryInfo, String)
  nameWithType: CompressionExtension.CreateZipFile(DirectoryInfo, string)
  nameWithType.vb: CompressionExtension.CreateZipFile(DirectoryInfo, String)
- uid: WeihanLi.Extensions.CompressionExtension.CreateZipFile*
  name: CreateZipFile
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.CreateZipFile
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.CreateZipFile
  nameWithType: CompressionExtension.CreateZipFile
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZip(System.Byte[])
  name: DecompressGZip(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZip(System.Byte[])
  name.vb: DecompressGZip(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZip(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.DecompressGZip(Byte())
  nameWithType: CompressionExtension.DecompressGZip(byte[])
  nameWithType.vb: CompressionExtension.DecompressGZip(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZip(System.IO.Stream)
  name: DecompressGZip(Stream)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZip(System.IO.Stream)
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZip(System.IO.Stream)
  nameWithType: CompressionExtension.DecompressGZip(Stream)
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZip*
  name: DecompressGZip
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.DecompressGZip
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZip
  nameWithType: CompressionExtension.DecompressGZip
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(System.Byte[])
  name: DecompressGZipAsync(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(System.Byte[])
  name.vb: DecompressGZipAsync(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(Byte())
  nameWithType: CompressionExtension.DecompressGZipAsync(byte[])
  nameWithType.vb: CompressionExtension.DecompressGZipAsync(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(System.IO.Stream)
  name: DecompressGZipAsync(Stream)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(System.IO.Stream)
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync(System.IO.Stream)
  nameWithType: CompressionExtension.DecompressGZipAsync(Stream)
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync*
  name: DecompressGZipAsync
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipAsync
  nameWithType: CompressionExtension.DecompressGZipAsync
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(System.Byte[],System.Text.Encoding)
  name: DecompressGZipString(byte[], Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZipString(System.Byte[],System.Text.Encoding)
  name.vb: DecompressGZipString(Byte(), Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(byte[], System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(Byte(), System.Text.Encoding)
  nameWithType: CompressionExtension.DecompressGZipString(byte[], Encoding)
  nameWithType.vb: CompressionExtension.DecompressGZipString(Byte(), Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(System.Byte[])
  name: DecompressGZipString(byte[])
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.DecompressGZipString(System.Byte[])
  name.vb: DecompressGZipString(Byte())
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(byte[])
  fullName.vb: WeihanLi.Extensions.CompressionExtension.DecompressGZipString(Byte())
  nameWithType: CompressionExtension.DecompressGZipString(byte[])
  nameWithType.vb: CompressionExtension.DecompressGZipString(Byte())
- uid: WeihanLi.Extensions.CompressionExtension.DecompressGZipString*
  name: DecompressGZipString
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.DecompressGZipString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.DecompressGZipString
  nameWithType: CompressionExtension.DecompressGZipString
- uid: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo,System.IO.FileInfo)
  name: ExtractGZipToDirectory(FileInfo, FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo,System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo, System.IO.FileInfo)
  nameWithType: CompressionExtension.ExtractGZipToDirectory(FileInfo, FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo,System.String)
  name: ExtractGZipToDirectory(FileInfo, string)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo,System.String)
  name.vb: ExtractGZipToDirectory(FileInfo, String)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo, string)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo, String)
  nameWithType: CompressionExtension.ExtractGZipToDirectory(FileInfo, string)
  nameWithType.vb: CompressionExtension.ExtractGZipToDirectory(FileInfo, String)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo)
  name: ExtractGZipToDirectory(FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory(System.IO.FileInfo)
  nameWithType: CompressionExtension.ExtractGZipToDirectory(FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory*
  name: ExtractGZipToDirectory
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractGZipToDirectory
  nameWithType: CompressionExtension.ExtractGZipToDirectory
- uid: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo,System.Text.Encoding)
  name: ExtractZipFileToDirectory(FileInfo, DirectoryInfo, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo,System.Text.Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, System.IO.DirectoryInfo, System.Text.Encoding)
  nameWithType: CompressionExtension.ExtractZipFileToDirectory(FileInfo, DirectoryInfo, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo)
  name: ExtractZipFileToDirectory(FileInfo, DirectoryInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, System.IO.DirectoryInfo)
  nameWithType: CompressionExtension.ExtractZipFileToDirectory(FileInfo, DirectoryInfo)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.String,System.Text.Encoding)
  name: ExtractZipFileToDirectory(FileInfo, string, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.String,System.Text.Encoding)
  name.vb: ExtractZipFileToDirectory(FileInfo, String, Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, String, System.Text.Encoding)
  nameWithType: CompressionExtension.ExtractZipFileToDirectory(FileInfo, string, Encoding)
  nameWithType.vb: CompressionExtension.ExtractZipFileToDirectory(FileInfo, String, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.String)
  name: ExtractZipFileToDirectory(FileInfo, string)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo,System.String)
  name.vb: ExtractZipFileToDirectory(FileInfo, String)
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, string)
  fullName.vb: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory(System.IO.FileInfo, String)
  nameWithType: CompressionExtension.ExtractZipFileToDirectory(FileInfo, string)
  nameWithType.vb: CompressionExtension.ExtractZipFileToDirectory(FileInfo, String)
- uid: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory*
  name: ExtractZipFileToDirectory
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.ExtractZipFileToDirectory
  nameWithType: CompressionExtension.ExtractZipFileToDirectory
- uid: WeihanLi.Extensions.CompressionExtension.OpenReadZipFile(System.IO.FileInfo)
  name: OpenReadZipFile(FileInfo)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.OpenReadZipFile(System.IO.FileInfo)
  fullName: WeihanLi.Extensions.CompressionExtension.OpenReadZipFile(System.IO.FileInfo)
  nameWithType: CompressionExtension.OpenReadZipFile(FileInfo)
- uid: WeihanLi.Extensions.CompressionExtension.OpenReadZipFile*
  name: OpenReadZipFile
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.OpenReadZipFile
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.OpenReadZipFile
  nameWithType: CompressionExtension.OpenReadZipFile
- uid: WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  name: OpenZipFile(FileInfo, ZipArchiveMode, Encoding)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  fullName: WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo, System.IO.Compression.ZipArchiveMode, System.Text.Encoding)
  nameWithType: CompressionExtension.OpenZipFile(FileInfo, ZipArchiveMode, Encoding)
- uid: WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode)
  name: OpenZipFile(FileInfo, ZipArchiveMode)
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: M:WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode)
  fullName: WeihanLi.Extensions.CompressionExtension.OpenZipFile(System.IO.FileInfo, System.IO.Compression.ZipArchiveMode)
  nameWithType: CompressionExtension.OpenZipFile(FileInfo, ZipArchiveMode)
- uid: WeihanLi.Extensions.CompressionExtension.OpenZipFile*
  name: OpenZipFile
  href: api/WeihanLi.Extensions.CompressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.CompressionExtension.OpenZipFile
  isSpec: "True"
  fullName: WeihanLi.Extensions.CompressionExtension.OpenZipFile
  nameWithType: CompressionExtension.OpenZipFile
- uid: WeihanLi.Extensions.CoreExtension
  name: CoreExtension
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: T:WeihanLi.Extensions.CoreExtension
  fullName: WeihanLi.Extensions.CoreExtension
  nameWithType: CoreExtension
- uid: WeihanLi.Extensions.CoreExtension.Abs(System.Decimal)
  name: Abs(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Abs(System.Decimal)
  name.vb: Abs(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Abs(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Abs(Decimal)
  nameWithType: CoreExtension.Abs(decimal)
  nameWithType.vb: CoreExtension.Abs(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Abs(System.Double)
  name: Abs(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Abs(System.Double)
  name.vb: Abs(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Abs(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Abs(Double)
  nameWithType: CoreExtension.Abs(double)
  nameWithType.vb: CoreExtension.Abs(Double)
- uid: WeihanLi.Extensions.CoreExtension.Abs(System.Int32)
  name: Abs(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Abs(System.Int32)
  name.vb: Abs(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Abs(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Abs(Integer)
  nameWithType: CoreExtension.Abs(int)
  nameWithType.vb: CoreExtension.Abs(Integer)
- uid: WeihanLi.Extensions.CoreExtension.Abs*
  name: Abs
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Abs
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Abs
  nameWithType: CoreExtension.Abs
- uid: WeihanLi.Extensions.CoreExtension.Acos(System.Double)
  name: Acos(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Acos(System.Double)
  name.vb: Acos(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Acos(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Acos(Double)
  nameWithType: CoreExtension.Acos(double)
  nameWithType.vb: CoreExtension.Acos(Double)
- uid: WeihanLi.Extensions.CoreExtension.Acos*
  name: Acos
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Acos
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Acos
  nameWithType: CoreExtension.Acos
- uid: WeihanLi.Extensions.CoreExtension.Age(System.DateTime)
  name: Age(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Age(System.DateTime)
  name.vb: Age(Date)
  fullName: WeihanLi.Extensions.CoreExtension.Age(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Age(Date)
  nameWithType: CoreExtension.Age(DateTime)
  nameWithType.vb: CoreExtension.Age(Date)
- uid: WeihanLi.Extensions.CoreExtension.Age*
  name: Age
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Age
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Age
  nameWithType: CoreExtension.Age
- uid: WeihanLi.Extensions.CoreExtension.Ago(System.TimeSpan)
  name: Ago(TimeSpan)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Ago(System.TimeSpan)
  fullName: WeihanLi.Extensions.CoreExtension.Ago(System.TimeSpan)
  nameWithType: CoreExtension.Ago(TimeSpan)
- uid: WeihanLi.Extensions.CoreExtension.Ago*
  name: Ago
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Ago
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Ago
  nameWithType: CoreExtension.Ago
- uid: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder,System.Func{System.String},System.Boolean)
  name: AppendIf(StringBuilder, Func<string>, bool)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder,System.Func{System.String},System.Boolean)
  name.vb: AppendIf(StringBuilder, Func(Of String), Boolean)
  fullName: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder, System.Func<string>, bool)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder, System.Func(Of String), Boolean)
  nameWithType: CoreExtension.AppendIf(StringBuilder, Func<string>, bool)
  nameWithType.vb: CoreExtension.AppendIf(StringBuilder, Func(Of String), Boolean)
- uid: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder,System.String,System.Boolean)
  name: AppendIf(StringBuilder, string, bool)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder,System.String,System.Boolean)
  name.vb: AppendIf(StringBuilder, String, Boolean)
  fullName: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder, string, bool)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendIf(System.Text.StringBuilder, String, Boolean)
  nameWithType: CoreExtension.AppendIf(StringBuilder, string, bool)
  nameWithType.vb: CoreExtension.AppendIf(StringBuilder, String, Boolean)
- uid: WeihanLi.Extensions.CoreExtension.AppendIf*
  name: AppendIf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.AppendIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.AppendIf
  nameWithType: CoreExtension.AppendIf
- uid: WeihanLi.Extensions.CoreExtension.AppendJoin*
  name: AppendJoin
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.AppendJoin
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.AppendJoin
  nameWithType: CoreExtension.AppendJoin
- uid: WeihanLi.Extensions.CoreExtension.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})
  name: AppendJoin<T>(StringBuilder, string, IEnumerable<T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})
  name.vb: AppendJoin(Of T)(StringBuilder, String, IEnumerable(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.AppendJoin<T>(System.Text.StringBuilder, string, System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendJoin(Of T)(System.Text.StringBuilder, String, System.Collections.Generic.IEnumerable(Of T))
  nameWithType: CoreExtension.AppendJoin<T>(StringBuilder, string, IEnumerable<T>)
  nameWithType.vb: CoreExtension.AppendJoin(Of T)(StringBuilder, String, IEnumerable(Of T))
- uid: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder,System.Func{System.String},System.Boolean)
  name: AppendLineIf(StringBuilder, Func<string>, bool)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder,System.Func{System.String},System.Boolean)
  name.vb: AppendLineIf(StringBuilder, Func(Of String), Boolean)
  fullName: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder, System.Func<string>, bool)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder, System.Func(Of String), Boolean)
  nameWithType: CoreExtension.AppendLineIf(StringBuilder, Func<string>, bool)
  nameWithType.vb: CoreExtension.AppendLineIf(StringBuilder, Func(Of String), Boolean)
- uid: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder,System.String,System.Boolean)
  name: AppendLineIf(StringBuilder, string, bool)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder,System.String,System.Boolean)
  name.vb: AppendLineIf(StringBuilder, String, Boolean)
  fullName: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder, string, bool)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendLineIf(System.Text.StringBuilder, String, Boolean)
  nameWithType: CoreExtension.AppendLineIf(StringBuilder, string, bool)
  nameWithType.vb: CoreExtension.AppendLineIf(StringBuilder, String, Boolean)
- uid: WeihanLi.Extensions.CoreExtension.AppendLineIf*
  name: AppendLineIf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.AppendLineIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.AppendLineIf
  nameWithType: CoreExtension.AppendLineIf
- uid: WeihanLi.Extensions.CoreExtension.AppendLineJoin*
  name: AppendLineJoin
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.AppendLineJoin
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.AppendLineJoin
  nameWithType: CoreExtension.AppendLineJoin
- uid: WeihanLi.Extensions.CoreExtension.AppendLineJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})
  name: AppendLineJoin<T>(StringBuilder, string, IEnumerable<T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AppendLineJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})
  name.vb: AppendLineJoin(Of T)(StringBuilder, String, IEnumerable(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.AppendLineJoin<T>(System.Text.StringBuilder, string, System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AppendLineJoin(Of T)(System.Text.StringBuilder, String, System.Collections.Generic.IEnumerable(Of T))
  nameWithType: CoreExtension.AppendLineJoin<T>(StringBuilder, string, IEnumerable<T>)
  nameWithType.vb: CoreExtension.AppendLineJoin(Of T)(StringBuilder, String, IEnumerable(Of T))
- uid: WeihanLi.Extensions.CoreExtension.Asin(System.Double)
  name: Asin(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Asin(System.Double)
  name.vb: Asin(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Asin(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Asin(Double)
  nameWithType: CoreExtension.Asin(double)
  nameWithType.vb: CoreExtension.Asin(Double)
- uid: WeihanLi.Extensions.CoreExtension.Asin*
  name: Asin
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Asin
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Asin
  nameWithType: CoreExtension.Asin
- uid: WeihanLi.Extensions.CoreExtension.AsOrDefault*
  name: AsOrDefault
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.AsOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.AsOrDefault
  nameWithType: CoreExtension.AsOrDefault
- uid: WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object,``0)
  name: AsOrDefault<T>(object?, T)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object,``0)
  name.vb: AsOrDefault(Of T)(Object, T)
  fullName: WeihanLi.Extensions.CoreExtension.AsOrDefault<T>(object?, T)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AsOrDefault(Of T)(Object, T)
  nameWithType: CoreExtension.AsOrDefault<T>(object?, T)
  nameWithType.vb: CoreExtension.AsOrDefault(Of T)(Object, T)
- uid: WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object,System.Func{``0})
  name: AsOrDefault<T>(object?, Func<T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object,System.Func{``0})
  name.vb: AsOrDefault(Of T)(Object, Func(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.AsOrDefault<T>(object?, System.Func<T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AsOrDefault(Of T)(Object, System.Func(Of T))
  nameWithType: CoreExtension.AsOrDefault<T>(object?, Func<T>)
  nameWithType.vb: CoreExtension.AsOrDefault(Of T)(Object, Func(Of T))
- uid: WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object)
  name: AsOrDefault<T>(object?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.AsOrDefault``1(System.Object)
  name.vb: AsOrDefault(Of T)(Object)
  fullName: WeihanLi.Extensions.CoreExtension.AsOrDefault<T>(object?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.AsOrDefault(Of T)(Object)
  nameWithType: CoreExtension.AsOrDefault<T>(object?)
  nameWithType.vb: CoreExtension.AsOrDefault(Of T)(Object)
- uid: WeihanLi.Extensions.CoreExtension.Atan(System.Double)
  name: Atan(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Atan(System.Double)
  name.vb: Atan(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Atan(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Atan(Double)
  nameWithType: CoreExtension.Atan(double)
  nameWithType.vb: CoreExtension.Atan(Double)
- uid: WeihanLi.Extensions.CoreExtension.Atan*
  name: Atan
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Atan
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Atan
  nameWithType: CoreExtension.Atan
- uid: WeihanLi.Extensions.CoreExtension.Atan2(System.Double,System.Double)
  name: Atan2(double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Atan2(System.Double,System.Double)
  name.vb: Atan2(Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.Atan2(double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Atan2(Double, Double)
  nameWithType: CoreExtension.Atan2(double, double)
  nameWithType.vb: CoreExtension.Atan2(Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.Atan2*
  name: Atan2
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Atan2
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Atan2
  nameWithType: CoreExtension.Atan2
- uid: WeihanLi.Extensions.CoreExtension.BigMul(System.Int32,System.Int32)
  name: BigMul(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.BigMul(System.Int32,System.Int32)
  name.vb: BigMul(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.BigMul(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.BigMul(Integer, Integer)
  nameWithType: CoreExtension.BigMul(int, int)
  nameWithType.vb: CoreExtension.BigMul(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.BigMul*
  name: BigMul
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.BigMul
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.BigMul
  nameWithType: CoreExtension.BigMul
- uid: WeihanLi.Extensions.CoreExtension.Ceiling(System.Decimal)
  name: Ceiling(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Ceiling(System.Decimal)
  name.vb: Ceiling(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Ceiling(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Ceiling(Decimal)
  nameWithType: CoreExtension.Ceiling(decimal)
  nameWithType.vb: CoreExtension.Ceiling(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Ceiling(System.Double)
  name: Ceiling(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Ceiling(System.Double)
  name.vb: Ceiling(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Ceiling(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Ceiling(Double)
  nameWithType: CoreExtension.Ceiling(double)
  nameWithType.vb: CoreExtension.Ceiling(Double)
- uid: WeihanLi.Extensions.CoreExtension.Ceiling*
  name: Ceiling
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Ceiling
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Ceiling
  nameWithType: CoreExtension.Ceiling
- uid: WeihanLi.Extensions.CoreExtension.Chain*
  name: Chain
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Chain
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Chain
  nameWithType: CoreExtension.Chain
- uid: WeihanLi.Extensions.CoreExtension.Chain``1(``0,System.Action{``0})
  name: Chain<T>(T, Action<T>?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Chain``1(``0,System.Action{``0})
  name.vb: Chain(Of T)(T, Action(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.Chain<T>(T, System.Action<T>?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Chain(Of T)(T, System.Action(Of T))
  nameWithType: CoreExtension.Chain<T>(T, Action<T>?)
  nameWithType.vb: CoreExtension.Chain(Of T)(T, Action(Of T))
- uid: WeihanLi.Extensions.CoreExtension.CoinToss(System.Random)
  name: CoinToss(Random)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.CoinToss(System.Random)
  fullName: WeihanLi.Extensions.CoreExtension.CoinToss(System.Random)
  nameWithType: CoreExtension.CoinToss(Random)
- uid: WeihanLi.Extensions.CoreExtension.CoinToss*
  name: CoinToss
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.CoinToss
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.CoinToss
  nameWithType: CoreExtension.CoinToss
- uid: WeihanLi.Extensions.CoreExtension.Combine(System.Delegate,System.Delegate)
  name: Combine(Delegate, Delegate)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Combine(System.Delegate,System.Delegate)
  fullName: WeihanLi.Extensions.CoreExtension.Combine(System.Delegate, System.Delegate)
  nameWithType: CoreExtension.Combine(Delegate, Delegate)
- uid: WeihanLi.Extensions.CoreExtension.Combine*
  name: Combine
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Combine
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Combine
  nameWithType: CoreExtension.Combine
- uid: WeihanLi.Extensions.CoreExtension.Concatenate(System.Collections.Generic.IEnumerable{System.String})
  name: Concatenate(IEnumerable<string>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Concatenate(System.Collections.Generic.IEnumerable{System.String})
  name.vb: Concatenate(IEnumerable(Of String))
  fullName: WeihanLi.Extensions.CoreExtension.Concatenate(System.Collections.Generic.IEnumerable<string>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Concatenate(System.Collections.Generic.IEnumerable(Of String))
  nameWithType: CoreExtension.Concatenate(IEnumerable<string>)
  nameWithType.vb: CoreExtension.Concatenate(IEnumerable(Of String))
- uid: WeihanLi.Extensions.CoreExtension.Concatenate*
  name: Concatenate
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Concatenate
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Concatenate
  nameWithType: CoreExtension.Concatenate
- uid: WeihanLi.Extensions.CoreExtension.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  name: Concatenate<T>(IEnumerable<T>, Func<T, string>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})
  name.vb: Concatenate(Of T)(IEnumerable(Of T), Func(Of T, String))
  fullName: WeihanLi.Extensions.CoreExtension.Concatenate<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, string>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Concatenate(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, String))
  nameWithType: CoreExtension.Concatenate<T>(IEnumerable<T>, Func<T, string>)
  nameWithType.vb: CoreExtension.Concatenate(Of T)(IEnumerable(Of T), Func(Of T, String))
- uid: WeihanLi.Extensions.CoreExtension.Contains(System.String,System.String,System.StringComparison)
  name: Contains(string, string, StringComparison)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Contains(System.String,System.String,System.StringComparison)
  name.vb: Contains(String, String, StringComparison)
  fullName: WeihanLi.Extensions.CoreExtension.Contains(string, string, System.StringComparison)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Contains(String, String, System.StringComparison)
  nameWithType: CoreExtension.Contains(string, string, StringComparison)
  nameWithType.vb: CoreExtension.Contains(String, String, StringComparison)
- uid: WeihanLi.Extensions.CoreExtension.Contains(System.String,System.String)
  name: Contains(string, string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Contains(System.String,System.String)
  name.vb: Contains(String, String)
  fullName: WeihanLi.Extensions.CoreExtension.Contains(string, string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Contains(String, String)
  nameWithType: CoreExtension.Contains(string, string)
  nameWithType.vb: CoreExtension.Contains(String, String)
- uid: WeihanLi.Extensions.CoreExtension.Contains*
  name: Contains
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Contains
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Contains
  nameWithType: CoreExtension.Contains
- uid: WeihanLi.Extensions.CoreExtension.ConvertFromUtf32(System.Int32)
  name: ConvertFromUtf32(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertFromUtf32(System.Int32)
  name.vb: ConvertFromUtf32(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertFromUtf32(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertFromUtf32(Integer)
  nameWithType: CoreExtension.ConvertFromUtf32(int)
  nameWithType.vb: CoreExtension.ConvertFromUtf32(Integer)
- uid: WeihanLi.Extensions.CoreExtension.ConvertFromUtf32*
  name: ConvertFromUtf32
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ConvertFromUtf32
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ConvertFromUtf32
  nameWithType: CoreExtension.ConvertFromUtf32
- uid: WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  name.vb: ConvertTime(Date, TimeZoneInfo, TimeZoneInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime, System.TimeZoneInfo, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertTime(Date, System.TimeZoneInfo, System.TimeZoneInfo)
  nameWithType: CoreExtension.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  nameWithType.vb: CoreExtension.ConvertTime(Date, TimeZoneInfo, TimeZoneInfo)
- uid: WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo)
  name: ConvertTime(DateTime, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime,System.TimeZoneInfo)
  name.vb: ConvertTime(Date, TimeZoneInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTime(System.DateTime, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertTime(Date, System.TimeZoneInfo)
  nameWithType: CoreExtension.ConvertTime(DateTime, TimeZoneInfo)
  nameWithType.vb: CoreExtension.ConvertTime(Date, TimeZoneInfo)
- uid: WeihanLi.Extensions.CoreExtension.ConvertTime*
  name: ConvertTime
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ConvertTime
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTime
  nameWithType: CoreExtension.ConvertTime
- uid: WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  name: ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)
  name.vb: ConvertTimeFromUtc(Date, TimeZoneInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc(System.DateTime, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc(Date, System.TimeZoneInfo)
  nameWithType: CoreExtension.ConvertTimeFromUtc(DateTime, TimeZoneInfo)
  nameWithType.vb: CoreExtension.ConvertTimeFromUtc(Date, TimeZoneInfo)
- uid: WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc*
  name: ConvertTimeFromUtc
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTimeFromUtc
  nameWithType: CoreExtension.ConvertTimeFromUtc
- uid: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  name: ConvertTimeToUtc(DateTime, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)
  name.vb: ConvertTimeToUtc(Date, TimeZoneInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(Date, System.TimeZoneInfo)
  nameWithType: CoreExtension.ConvertTimeToUtc(DateTime, TimeZoneInfo)
  nameWithType.vb: CoreExtension.ConvertTimeToUtc(Date, TimeZoneInfo)
- uid: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime)
  name: ConvertTimeToUtc(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime)
  name.vb: ConvertTimeToUtc(Date)
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc(Date)
  nameWithType: CoreExtension.ConvertTimeToUtc(DateTime)
  nameWithType.vb: CoreExtension.ConvertTimeToUtc(Date)
- uid: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc*
  name: ConvertTimeToUtc
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ConvertTimeToUtc
  nameWithType: CoreExtension.ConvertTimeToUtc
- uid: WeihanLi.Extensions.CoreExtension.Cos(System.Double)
  name: Cos(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Cos(System.Double)
  name.vb: Cos(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Cos(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Cos(Double)
  nameWithType: CoreExtension.Cos(double)
  nameWithType.vb: CoreExtension.Cos(Double)
- uid: WeihanLi.Extensions.CoreExtension.Cos*
  name: Cos
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Cos
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Cos
  nameWithType: CoreExtension.Cos
- uid: WeihanLi.Extensions.CoreExtension.Cosh(System.Double)
  name: Cosh(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Cosh(System.Double)
  name.vb: Cosh(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Cosh(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Cosh(Double)
  nameWithType: CoreExtension.Cosh(double)
  nameWithType.vb: CoreExtension.Cosh(Double)
- uid: WeihanLi.Extensions.CoreExtension.Cosh*
  name: Cosh
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Cosh
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Cosh
  nameWithType: CoreExtension.Cosh
- uid: WeihanLi.Extensions.CoreExtension.CreateInstance*
  name: CreateInstance
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.CreateInstance
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.CreateInstance
  nameWithType: CoreExtension.CreateInstance
- uid: WeihanLi.Extensions.CoreExtension.CreateInstance``1(System.Type,System.Object[])
  name: CreateInstance<T>(Type, params object?[]?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.CreateInstance``1(System.Type,System.Object[])
  name.vb: CreateInstance(Of T)(Type, ParamArray Object())
  fullName: WeihanLi.Extensions.CoreExtension.CreateInstance<T>(System.Type, params object?[]?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.CreateInstance(Of T)(System.Type, ParamArray Object())
  nameWithType: CoreExtension.CreateInstance<T>(Type, params object?[]?)
  nameWithType.vb: CoreExtension.CreateInstance(Of T)(Type, ParamArray Object())
- uid: WeihanLi.Extensions.CoreExtension.DaysInMonth(System.Int32,System.Int32)
  name: DaysInMonth(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.DaysInMonth(System.Int32,System.Int32)
  name.vb: DaysInMonth(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.DaysInMonth(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.DaysInMonth(Integer, Integer)
  nameWithType: CoreExtension.DaysInMonth(int, int)
  nameWithType.vb: CoreExtension.DaysInMonth(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.DaysInMonth*
  name: DaysInMonth
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.DaysInMonth
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.DaysInMonth
  nameWithType: CoreExtension.DaysInMonth
- uid: WeihanLi.Extensions.CoreExtension.DivRem(System.Int32,System.Int32,System.Int32@)
  name: DivRem(int, int, out int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.DivRem(System.Int32,System.Int32,System.Int32@)
  name.vb: DivRem(Integer, Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.DivRem(int, int, out int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.DivRem(Integer, Integer, Integer)
  nameWithType: CoreExtension.DivRem(int, int, out int)
  nameWithType.vb: CoreExtension.DivRem(Integer, Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.DivRem*
  name: DivRem
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.DivRem
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.DivRem
  nameWithType: CoreExtension.DivRem
- uid: WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase(System.String,System.String)
  name: EqualsIgnoreCase(string?, string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase(System.String,System.String)
  name.vb: EqualsIgnoreCase(String, String)
  fullName: WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase(string?, string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase(String, String)
  nameWithType: CoreExtension.EqualsIgnoreCase(string?, string?)
  nameWithType.vb: CoreExtension.EqualsIgnoreCase(String, String)
- uid: WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase*
  name: EqualsIgnoreCase
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.EqualsIgnoreCase
  nameWithType: CoreExtension.EqualsIgnoreCase
- uid: WeihanLi.Extensions.CoreExtension.Exp(System.Double)
  name: Exp(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Exp(System.Double)
  name.vb: Exp(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Exp(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Exp(Double)
  nameWithType: CoreExtension.Exp(double)
  nameWithType.vb: CoreExtension.Exp(Double)
- uid: WeihanLi.Extensions.CoreExtension.Exp*
  name: Exp
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Exp
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Exp
  nameWithType: CoreExtension.Exp
- uid: WeihanLi.Extensions.CoreExtension.Extract(System.String,System.Func{System.Char,System.Boolean})
  name: Extract(string, Func<char, bool>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Extract(System.String,System.Func{System.Char,System.Boolean})
  name.vb: Extract(String, Func(Of Char, Boolean))
  fullName: WeihanLi.Extensions.CoreExtension.Extract(string, System.Func<char, bool>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Extract(String, System.Func(Of Char, Boolean))
  nameWithType: CoreExtension.Extract(string, Func<char, bool>)
  nameWithType.vb: CoreExtension.Extract(String, Func(Of Char, Boolean))
- uid: WeihanLi.Extensions.CoreExtension.Extract*
  name: Extract
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Extract
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Extract
  nameWithType: CoreExtension.Extract
- uid: WeihanLi.Extensions.CoreExtension.FactorOf(System.Int16,System.Int16)
  name: FactorOf(short, short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.FactorOf(System.Int16,System.Int16)
  name.vb: FactorOf(Short, Short)
  fullName: WeihanLi.Extensions.CoreExtension.FactorOf(short, short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.FactorOf(Short, Short)
  nameWithType: CoreExtension.FactorOf(short, short)
  nameWithType.vb: CoreExtension.FactorOf(Short, Short)
- uid: WeihanLi.Extensions.CoreExtension.FactorOf(System.Int32,System.Int32)
  name: FactorOf(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.FactorOf(System.Int32,System.Int32)
  name.vb: FactorOf(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.FactorOf(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.FactorOf(Integer, Integer)
  nameWithType: CoreExtension.FactorOf(int, int)
  nameWithType.vb: CoreExtension.FactorOf(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.FactorOf*
  name: FactorOf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.FactorOf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.FactorOf
  nameWithType: CoreExtension.FactorOf
- uid: WeihanLi.Extensions.CoreExtension.Floor(System.Decimal)
  name: Floor(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Floor(System.Decimal)
  name.vb: Floor(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Floor(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Floor(Decimal)
  nameWithType: CoreExtension.Floor(decimal)
  nameWithType.vb: CoreExtension.Floor(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Floor(System.Double)
  name: Floor(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Floor(System.Double)
  name.vb: Floor(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Floor(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Floor(Double)
  nameWithType: CoreExtension.Floor(double)
  nameWithType.vb: CoreExtension.Floor(Double)
- uid: WeihanLi.Extensions.CoreExtension.Floor*
  name: Floor
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Floor
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Floor
  nameWithType: CoreExtension.Floor
- uid: WeihanLi.Extensions.CoreExtension.FormatWith(System.String,System.Object[])
  name: FormatWith(string, params object[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.FormatWith(System.String,System.Object[])
  name.vb: FormatWith(String, ParamArray Object())
  fullName: WeihanLi.Extensions.CoreExtension.FormatWith(string, params object[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.FormatWith(String, ParamArray Object())
  nameWithType: CoreExtension.FormatWith(string, params object[])
  nameWithType.vb: CoreExtension.FormatWith(String, ParamArray Object())
- uid: WeihanLi.Extensions.CoreExtension.FormatWith*
  name: FormatWith
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.FormatWith
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.FormatWith
  nameWithType: CoreExtension.FormatWith
- uid: WeihanLi.Extensions.CoreExtension.FromNow(System.TimeSpan)
  name: FromNow(TimeSpan)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.FromNow(System.TimeSpan)
  fullName: WeihanLi.Extensions.CoreExtension.FromNow(System.TimeSpan)
  nameWithType: CoreExtension.FromNow(TimeSpan)
- uid: WeihanLi.Extensions.CoreExtension.FromNow*
  name: FromNow
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.FromNow
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.FromNow
  nameWithType: CoreExtension.FromNow
- uid: WeihanLi.Extensions.CoreExtension.FromTicks(System.Int64)
  name: FromTicks(long)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.FromTicks(System.Int64)
  name.vb: FromTicks(Long)
  fullName: WeihanLi.Extensions.CoreExtension.FromTicks(long)
  fullName.vb: WeihanLi.Extensions.CoreExtension.FromTicks(Long)
  nameWithType: CoreExtension.FromTicks(long)
  nameWithType.vb: CoreExtension.FromTicks(Long)
- uid: WeihanLi.Extensions.CoreExtension.FromTicks*
  name: FromTicks
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.FromTicks
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.FromTicks
  nameWithType: CoreExtension.FromTicks
- uid: WeihanLi.Extensions.CoreExtension.GetBytes(System.Int16)
  name: GetBytes(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetBytes(System.Int16)
  name.vb: GetBytes(Short)
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetBytes(Short)
  nameWithType: CoreExtension.GetBytes(short)
  nameWithType.vb: CoreExtension.GetBytes(Short)
- uid: WeihanLi.Extensions.CoreExtension.GetBytes(System.Int32)
  name: GetBytes(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetBytes(System.Int32)
  name.vb: GetBytes(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetBytes(Integer)
  nameWithType: CoreExtension.GetBytes(int)
  nameWithType.vb: CoreExtension.GetBytes(Integer)
- uid: WeihanLi.Extensions.CoreExtension.GetBytes(System.Int64)
  name: GetBytes(long)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetBytes(System.Int64)
  name.vb: GetBytes(Long)
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes(long)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetBytes(Long)
  nameWithType: CoreExtension.GetBytes(long)
  nameWithType.vb: CoreExtension.GetBytes(Long)
- uid: WeihanLi.Extensions.CoreExtension.GetBytes(System.String,System.Text.Encoding)
  name: GetBytes(string, Encoding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetBytes(System.String,System.Text.Encoding)
  name.vb: GetBytes(String, Encoding)
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetBytes(String, System.Text.Encoding)
  nameWithType: CoreExtension.GetBytes(string, Encoding)
  nameWithType.vb: CoreExtension.GetBytes(String, Encoding)
- uid: WeihanLi.Extensions.CoreExtension.GetBytes(System.String)
  name: GetBytes(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetBytes(System.String)
  name.vb: GetBytes(String)
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetBytes(String)
  nameWithType: CoreExtension.GetBytes(string)
  nameWithType.vb: CoreExtension.GetBytes(String)
- uid: WeihanLi.Extensions.CoreExtension.GetBytes*
  name: GetBytes
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetBytes
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetBytes
  nameWithType: CoreExtension.GetBytes
- uid: WeihanLi.Extensions.CoreExtension.GetDefaultValue(System.Type)
  name: GetDefaultValue(Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetDefaultValue(System.Type)
  fullName: WeihanLi.Extensions.CoreExtension.GetDefaultValue(System.Type)
  nameWithType: CoreExtension.GetDefaultValue(Type)
- uid: WeihanLi.Extensions.CoreExtension.GetDefaultValue*
  name: GetDefaultValue
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetDefaultValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetDefaultValue
  nameWithType: CoreExtension.GetDefaultValue
- uid: WeihanLi.Extensions.CoreExtension.GetDescription(System.Enum)
  name: GetDescription(Enum)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetDescription(System.Enum)
  fullName: WeihanLi.Extensions.CoreExtension.GetDescription(System.Enum)
  nameWithType: CoreExtension.GetDescription(Enum)
- uid: WeihanLi.Extensions.CoreExtension.GetDescription*
  name: GetDescription
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetDescription
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetDescription
  nameWithType: CoreExtension.GetDescription
- uid: WeihanLi.Extensions.CoreExtension.GetNumericValue(System.Char)
  name: GetNumericValue(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetNumericValue(System.Char)
  name.vb: GetNumericValue(Char)
  fullName: WeihanLi.Extensions.CoreExtension.GetNumericValue(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetNumericValue(Char)
  nameWithType: CoreExtension.GetNumericValue(char)
  nameWithType.vb: CoreExtension.GetNumericValue(Char)
- uid: WeihanLi.Extensions.CoreExtension.GetNumericValue*
  name: GetNumericValue
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetNumericValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetNumericValue
  nameWithType: CoreExtension.GetNumericValue
- uid: WeihanLi.Extensions.CoreExtension.GetString(System.Byte[],System.Text.Encoding)
  name: GetString(byte[], Encoding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetString(System.Byte[],System.Text.Encoding)
  name.vb: GetString(Byte(), Encoding)
  fullName: WeihanLi.Extensions.CoreExtension.GetString(byte[], System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetString(Byte(), System.Text.Encoding)
  nameWithType: CoreExtension.GetString(byte[], Encoding)
  nameWithType.vb: CoreExtension.GetString(Byte(), Encoding)
- uid: WeihanLi.Extensions.CoreExtension.GetString(System.Byte[])
  name: GetString(byte[]?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetString(System.Byte[])
  name.vb: GetString(Byte())
  fullName: WeihanLi.Extensions.CoreExtension.GetString(byte[]?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetString(Byte())
  nameWithType: CoreExtension.GetString(byte[]?)
  nameWithType.vb: CoreExtension.GetString(Byte())
- uid: WeihanLi.Extensions.CoreExtension.GetString*
  name: GetString
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetString
  nameWithType: CoreExtension.GetString
- uid: WeihanLi.Extensions.CoreExtension.GetTypeArray(System.Object[])
  name: GetTypeArray(object[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetTypeArray(System.Object[])
  name.vb: GetTypeArray(Object())
  fullName: WeihanLi.Extensions.CoreExtension.GetTypeArray(object[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetTypeArray(Object())
  nameWithType: CoreExtension.GetTypeArray(object[])
  nameWithType.vb: CoreExtension.GetTypeArray(Object())
- uid: WeihanLi.Extensions.CoreExtension.GetTypeArray*
  name: GetTypeArray
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetTypeArray
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetTypeArray
  nameWithType: CoreExtension.GetTypeArray
- uid: WeihanLi.Extensions.CoreExtension.GetUnderlyingType(System.Type)
  name: GetUnderlyingType(Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetUnderlyingType(System.Type)
  fullName: WeihanLi.Extensions.CoreExtension.GetUnderlyingType(System.Type)
  nameWithType: CoreExtension.GetUnderlyingType(Type)
- uid: WeihanLi.Extensions.CoreExtension.GetUnderlyingType*
  name: GetUnderlyingType
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetUnderlyingType
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetUnderlyingType
  nameWithType: CoreExtension.GetUnderlyingType
- uid: WeihanLi.Extensions.CoreExtension.GetUnicodeCategory(System.Char)
  name: GetUnicodeCategory(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetUnicodeCategory(System.Char)
  name.vb: GetUnicodeCategory(Char)
  fullName: WeihanLi.Extensions.CoreExtension.GetUnicodeCategory(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetUnicodeCategory(Char)
  nameWithType: CoreExtension.GetUnicodeCategory(char)
  nameWithType.vb: CoreExtension.GetUnicodeCategory(Char)
- uid: WeihanLi.Extensions.CoreExtension.GetUnicodeCategory*
  name: GetUnicodeCategory
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetUnicodeCategory
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetUnicodeCategory
  nameWithType: CoreExtension.GetUnicodeCategory
- uid: WeihanLi.Extensions.CoreExtension.GetValueOrDefault*
  name: GetValueOrDefault
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.GetValueOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.GetValueOrDefault
  nameWithType: CoreExtension.GetValueOrDefault
- uid: WeihanLi.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1},``1)
  name: GetValueOrDefault<T, TResult>(T, Func<T, TResult>, TResult)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1},``1)
  name.vb: GetValueOrDefault(Of T, TResult)(T, Func(Of T, TResult), TResult)
  fullName: WeihanLi.Extensions.CoreExtension.GetValueOrDefault<T, TResult>(T, System.Func<T, TResult>, TResult)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetValueOrDefault(Of T, TResult)(T, System.Func(Of T, TResult), TResult)
  nameWithType: CoreExtension.GetValueOrDefault<T, TResult>(T, Func<T, TResult>, TResult)
  nameWithType.vb: CoreExtension.GetValueOrDefault(Of T, TResult)(T, Func(Of T, TResult), TResult)
- uid: WeihanLi.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1})
  name: GetValueOrDefault<T, TResult>(T, Func<T, TResult>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.GetValueOrDefault``2(``0,System.Func{``0,``1})
  name.vb: GetValueOrDefault(Of T, TResult)(T, Func(Of T, TResult))
  fullName: WeihanLi.Extensions.CoreExtension.GetValueOrDefault<T, TResult>(T, System.Func<T, TResult>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.GetValueOrDefault(Of T, TResult)(T, System.Func(Of T, TResult))
  nameWithType: CoreExtension.GetValueOrDefault<T, TResult>(T, Func<T, TResult>)
  nameWithType.vb: CoreExtension.GetValueOrDefault(Of T, TResult)(T, Func(Of T, TResult))
- uid: WeihanLi.Extensions.CoreExtension.HasEmptyConstructor(System.Type)
  name: HasEmptyConstructor(Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.HasEmptyConstructor(System.Type)
  fullName: WeihanLi.Extensions.CoreExtension.HasEmptyConstructor(System.Type)
  nameWithType: CoreExtension.HasEmptyConstructor(Type)
- uid: WeihanLi.Extensions.CoreExtension.HasEmptyConstructor*
  name: HasEmptyConstructor
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.HasEmptyConstructor
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.HasEmptyConstructor
  nameWithType: CoreExtension.HasEmptyConstructor
- uid: WeihanLi.Extensions.CoreExtension.HostToNetworkOrder(System.Int16)
  name: HostToNetworkOrder(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.HostToNetworkOrder(System.Int16)
  name.vb: HostToNetworkOrder(Short)
  fullName: WeihanLi.Extensions.CoreExtension.HostToNetworkOrder(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.HostToNetworkOrder(Short)
  nameWithType: CoreExtension.HostToNetworkOrder(short)
  nameWithType.vb: CoreExtension.HostToNetworkOrder(Short)
- uid: WeihanLi.Extensions.CoreExtension.HostToNetworkOrder*
  name: HostToNetworkOrder
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.HostToNetworkOrder
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.HostToNetworkOrder
  nameWithType: CoreExtension.HostToNetworkOrder
- uid: WeihanLi.Extensions.CoreExtension.IfFalse(System.Boolean,System.Action)
  name: IfFalse(bool, Action?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IfFalse(System.Boolean,System.Action)
  name.vb: IfFalse(Boolean, Action)
  fullName: WeihanLi.Extensions.CoreExtension.IfFalse(bool, System.Action?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IfFalse(Boolean, System.Action)
  nameWithType: CoreExtension.IfFalse(bool, Action?)
  nameWithType.vb: CoreExtension.IfFalse(Boolean, Action)
- uid: WeihanLi.Extensions.CoreExtension.IfFalse*
  name: IfFalse
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IfFalse
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IfFalse
  nameWithType: CoreExtension.IfFalse
- uid: WeihanLi.Extensions.CoreExtension.IfTrue(System.Boolean,System.Action)
  name: IfTrue(bool, Action?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IfTrue(System.Boolean,System.Action)
  name.vb: IfTrue(Boolean, Action)
  fullName: WeihanLi.Extensions.CoreExtension.IfTrue(bool, System.Action?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IfTrue(Boolean, System.Action)
  nameWithType: CoreExtension.IfTrue(bool, Action?)
  nameWithType.vb: CoreExtension.IfTrue(Boolean, Action)
- uid: WeihanLi.Extensions.CoreExtension.IfTrue*
  name: IfTrue
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IfTrue
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IfTrue
  nameWithType: CoreExtension.IfTrue
- uid: WeihanLi.Extensions.CoreExtension.In(System.Enum,System.Enum[])
  name: In(Enum, params Enum[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.In(System.Enum,System.Enum[])
  name.vb: In(Enum, ParamArray Enum())
  fullName: WeihanLi.Extensions.CoreExtension.In(System.Enum, params System.Enum[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.In(System.Enum, ParamArray System.Enum())
  nameWithType: CoreExtension.In(Enum, params Enum[])
  nameWithType.vb: CoreExtension.In(Enum, ParamArray Enum())
- uid: WeihanLi.Extensions.CoreExtension.In*
  name: In
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.In
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.In
  nameWithType: CoreExtension.In
- uid: WeihanLi.Extensions.CoreExtension.InRange(System.DateTime,System.DateTime,System.DateTime)
  name: InRange(DateTime, DateTime, DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange(System.DateTime,System.DateTime,System.DateTime)
  name.vb: InRange(Date, Date, Date)
  fullName: WeihanLi.Extensions.CoreExtension.InRange(System.DateTime, System.DateTime, System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Date, Date, Date)
  nameWithType: CoreExtension.InRange(DateTime, DateTime, DateTime)
  nameWithType.vb: CoreExtension.InRange(Date, Date, Date)
- uid: WeihanLi.Extensions.CoreExtension.InRange(System.Decimal,System.Decimal,System.Decimal)
  name: InRange(decimal, decimal, decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange(System.Decimal,System.Decimal,System.Decimal)
  name.vb: InRange(Decimal, Decimal, Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.InRange(decimal, decimal, decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Decimal, Decimal, Decimal)
  nameWithType: CoreExtension.InRange(decimal, decimal, decimal)
  nameWithType.vb: CoreExtension.InRange(Decimal, Decimal, Decimal)
- uid: WeihanLi.Extensions.CoreExtension.InRange(System.Double,System.Double,System.Double)
  name: InRange(double, double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange(System.Double,System.Double,System.Double)
  name.vb: InRange(Double, Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.InRange(double, double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Double, Double, Double)
  nameWithType: CoreExtension.InRange(double, double, double)
  nameWithType.vb: CoreExtension.InRange(Double, Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.InRange(System.Int16,System.Int16,System.Int16)
  name: InRange(short, short, short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange(System.Int16,System.Int16,System.Int16)
  name.vb: InRange(Short, Short, Short)
  fullName: WeihanLi.Extensions.CoreExtension.InRange(short, short, short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Short, Short, Short)
  nameWithType: CoreExtension.InRange(short, short, short)
  nameWithType.vb: CoreExtension.InRange(Short, Short, Short)
- uid: WeihanLi.Extensions.CoreExtension.InRange(System.Int32,System.Int32,System.Int32)
  name: InRange(int, int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange(System.Int32,System.Int32,System.Int32)
  name.vb: InRange(Integer, Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.InRange(int, int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Integer, Integer, Integer)
  nameWithType: CoreExtension.InRange(int, int, int)
  nameWithType.vb: CoreExtension.InRange(Integer, Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.InRange*
  name: InRange
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.InRange
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.InRange
  nameWithType: CoreExtension.InRange
- uid: WeihanLi.Extensions.CoreExtension.InRange``1(``0,``0,``0)
  name: InRange<T>(T, T, T)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.InRange``1(``0,``0,``0)
  name.vb: InRange(Of T)(T, T, T)
  fullName: WeihanLi.Extensions.CoreExtension.InRange<T>(T, T, T)
  fullName.vb: WeihanLi.Extensions.CoreExtension.InRange(Of T)(T, T, T)
  nameWithType: CoreExtension.InRange<T>(T, T, T)
  nameWithType.vb: CoreExtension.InRange(Of T)(T, T, T)
- uid: WeihanLi.Extensions.CoreExtension.Int64BitsToDouble(System.Int64)
  name: Int64BitsToDouble(long)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Int64BitsToDouble(System.Int64)
  name.vb: Int64BitsToDouble(Long)
  fullName: WeihanLi.Extensions.CoreExtension.Int64BitsToDouble(long)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Int64BitsToDouble(Long)
  nameWithType: CoreExtension.Int64BitsToDouble(long)
  nameWithType.vb: CoreExtension.Int64BitsToDouble(Long)
- uid: WeihanLi.Extensions.CoreExtension.Int64BitsToDouble*
  name: Int64BitsToDouble
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Int64BitsToDouble
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Int64BitsToDouble
  nameWithType: CoreExtension.Int64BitsToDouble
- uid: WeihanLi.Extensions.CoreExtension.Intern(System.String)
  name: Intern(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Intern(System.String)
  name.vb: Intern(String)
  fullName: WeihanLi.Extensions.CoreExtension.Intern(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Intern(String)
  nameWithType: CoreExtension.Intern(string)
  nameWithType.vb: CoreExtension.Intern(String)
- uid: WeihanLi.Extensions.CoreExtension.Intern*
  name: Intern
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Intern
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Intern
  nameWithType: CoreExtension.Intern
- uid: WeihanLi.Extensions.CoreExtension.IsAssignableFrom(System.Object,System.Type)
  name: IsAssignableFrom(object, Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsAssignableFrom(System.Object,System.Type)
  name.vb: IsAssignableFrom(Object, Type)
  fullName: WeihanLi.Extensions.CoreExtension.IsAssignableFrom(object, System.Type)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsAssignableFrom(Object, System.Type)
  nameWithType: CoreExtension.IsAssignableFrom(object, Type)
  nameWithType.vb: CoreExtension.IsAssignableFrom(Object, Type)
- uid: WeihanLi.Extensions.CoreExtension.IsAssignableFrom*
  name: IsAssignableFrom
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsAssignableFrom
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsAssignableFrom
  nameWithType: CoreExtension.IsAssignableFrom
- uid: WeihanLi.Extensions.CoreExtension.IsAssignableFrom``1(System.Object)
  name: IsAssignableFrom<T>(object)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsAssignableFrom``1(System.Object)
  name.vb: IsAssignableFrom(Of T)(Object)
  fullName: WeihanLi.Extensions.CoreExtension.IsAssignableFrom<T>(object)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsAssignableFrom(Of T)(Object)
  nameWithType: CoreExtension.IsAssignableFrom<T>(object)
  nameWithType.vb: CoreExtension.IsAssignableFrom(Of T)(Object)
- uid: WeihanLi.Extensions.CoreExtension.IsControl(System.Char)
  name: IsControl(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsControl(System.Char)
  name.vb: IsControl(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsControl(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsControl(Char)
  nameWithType: CoreExtension.IsControl(char)
  nameWithType.vb: CoreExtension.IsControl(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsControl*
  name: IsControl
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsControl
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsControl
  nameWithType: CoreExtension.IsControl
- uid: WeihanLi.Extensions.CoreExtension.IsDateEqual(System.DateTime,System.DateTime)
  name: IsDateEqual(DateTime, DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsDateEqual(System.DateTime,System.DateTime)
  name.vb: IsDateEqual(Date, Date)
  fullName: WeihanLi.Extensions.CoreExtension.IsDateEqual(System.DateTime, System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsDateEqual(Date, Date)
  nameWithType: CoreExtension.IsDateEqual(DateTime, DateTime)
  nameWithType.vb: CoreExtension.IsDateEqual(Date, Date)
- uid: WeihanLi.Extensions.CoreExtension.IsDateEqual*
  name: IsDateEqual
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsDateEqual
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsDateEqual
  nameWithType: CoreExtension.IsDateEqual
- uid: WeihanLi.Extensions.CoreExtension.IsDefault*
  name: IsDefault
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsDefault
  nameWithType: CoreExtension.IsDefault
- uid: WeihanLi.Extensions.CoreExtension.IsDefault``1(``0)
  name: IsDefault<T>(T)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsDefault``1(``0)
  name.vb: IsDefault(Of T)(T)
  fullName: WeihanLi.Extensions.CoreExtension.IsDefault<T>(T)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsDefault(Of T)(T)
  nameWithType: CoreExtension.IsDefault<T>(T)
  nameWithType.vb: CoreExtension.IsDefault(Of T)(T)
- uid: WeihanLi.Extensions.CoreExtension.IsDigit(System.Char)
  name: IsDigit(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsDigit(System.Char)
  name.vb: IsDigit(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsDigit(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsDigit(Char)
  nameWithType: CoreExtension.IsDigit(char)
  nameWithType.vb: CoreExtension.IsDigit(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsDigit*
  name: IsDigit
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsDigit
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsDigit
  nameWithType: CoreExtension.IsDigit
- uid: WeihanLi.Extensions.CoreExtension.IsEmpty(System.Guid)
  name: IsEmpty(Guid)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsEmpty(System.Guid)
  fullName: WeihanLi.Extensions.CoreExtension.IsEmpty(System.Guid)
  nameWithType: CoreExtension.IsEmpty(Guid)
- uid: WeihanLi.Extensions.CoreExtension.IsEmpty*
  name: IsEmpty
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsEmpty
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsEmpty
  nameWithType: CoreExtension.IsEmpty
- uid: WeihanLi.Extensions.CoreExtension.IsEven(System.Int16)
  name: IsEven(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsEven(System.Int16)
  name.vb: IsEven(Short)
  fullName: WeihanLi.Extensions.CoreExtension.IsEven(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsEven(Short)
  nameWithType: CoreExtension.IsEven(short)
  nameWithType.vb: CoreExtension.IsEven(Short)
- uid: WeihanLi.Extensions.CoreExtension.IsEven(System.Int32)
  name: IsEven(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsEven(System.Int32)
  name.vb: IsEven(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.IsEven(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsEven(Integer)
  nameWithType: CoreExtension.IsEven(int)
  nameWithType.vb: CoreExtension.IsEven(Integer)
- uid: WeihanLi.Extensions.CoreExtension.IsEven*
  name: IsEven
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsEven
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsEven
  nameWithType: CoreExtension.IsEven
- uid: WeihanLi.Extensions.CoreExtension.IsInterned(System.String)
  name: IsInterned(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsInterned(System.String)
  name.vb: IsInterned(String)
  fullName: WeihanLi.Extensions.CoreExtension.IsInterned(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsInterned(String)
  nameWithType: CoreExtension.IsInterned(string)
  nameWithType.vb: CoreExtension.IsInterned(String)
- uid: WeihanLi.Extensions.CoreExtension.IsInterned*
  name: IsInterned
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsInterned
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsInterned
  nameWithType: CoreExtension.IsInterned
- uid: WeihanLi.Extensions.CoreExtension.IsLeapYear(System.Int32)
  name: IsLeapYear(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsLeapYear(System.Int32)
  name.vb: IsLeapYear(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.IsLeapYear(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsLeapYear(Integer)
  nameWithType: CoreExtension.IsLeapYear(int)
  nameWithType.vb: CoreExtension.IsLeapYear(Integer)
- uid: WeihanLi.Extensions.CoreExtension.IsLeapYear*
  name: IsLeapYear
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsLeapYear
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsLeapYear
  nameWithType: CoreExtension.IsLeapYear
- uid: WeihanLi.Extensions.CoreExtension.IsLetter(System.Char)
  name: IsLetter(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsLetter(System.Char)
  name.vb: IsLetter(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsLetter(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsLetter(Char)
  nameWithType: CoreExtension.IsLetter(char)
  nameWithType.vb: CoreExtension.IsLetter(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsLetter*
  name: IsLetter
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsLetter
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsLetter
  nameWithType: CoreExtension.IsLetter
- uid: WeihanLi.Extensions.CoreExtension.IsLetterOrDigit(System.Char)
  name: IsLetterOrDigit(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsLetterOrDigit(System.Char)
  name.vb: IsLetterOrDigit(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsLetterOrDigit(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsLetterOrDigit(Char)
  nameWithType: CoreExtension.IsLetterOrDigit(char)
  nameWithType.vb: CoreExtension.IsLetterOrDigit(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsLetterOrDigit*
  name: IsLetterOrDigit
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsLetterOrDigit
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsLetterOrDigit
  nameWithType: CoreExtension.IsLetterOrDigit
- uid: WeihanLi.Extensions.CoreExtension.IsLike(System.String,System.String)
  name: IsLike(string, string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsLike(System.String,System.String)
  name.vb: IsLike(String, String)
  fullName: WeihanLi.Extensions.CoreExtension.IsLike(string, string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsLike(String, String)
  nameWithType: CoreExtension.IsLike(string, string)
  nameWithType.vb: CoreExtension.IsLike(String, String)
- uid: WeihanLi.Extensions.CoreExtension.IsLike*
  name: IsLike
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsLike
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsLike
  nameWithType: CoreExtension.IsLike
- uid: WeihanLi.Extensions.CoreExtension.IsLower(System.Char)
  name: IsLower(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsLower(System.Char)
  name.vb: IsLower(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsLower(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsLower(Char)
  nameWithType: CoreExtension.IsLower(char)
  nameWithType.vb: CoreExtension.IsLower(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsLower*
  name: IsLower
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsLower
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsLower
  nameWithType: CoreExtension.IsLower
- uid: WeihanLi.Extensions.CoreExtension.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  name: IsMatch(string, string, RegexOptions)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  name.vb: IsMatch(String, String, RegexOptions)
  fullName: WeihanLi.Extensions.CoreExtension.IsMatch(string, string, System.Text.RegularExpressions.RegexOptions)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsMatch(String, String, System.Text.RegularExpressions.RegexOptions)
  nameWithType: CoreExtension.IsMatch(string, string, RegexOptions)
  nameWithType.vb: CoreExtension.IsMatch(String, String, RegexOptions)
- uid: WeihanLi.Extensions.CoreExtension.IsMatch(System.String,System.String)
  name: IsMatch(string, string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsMatch(System.String,System.String)
  name.vb: IsMatch(String, String)
  fullName: WeihanLi.Extensions.CoreExtension.IsMatch(string, string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsMatch(String, String)
  nameWithType: CoreExtension.IsMatch(string, string)
  nameWithType.vb: CoreExtension.IsMatch(String, String)
- uid: WeihanLi.Extensions.CoreExtension.IsMatch*
  name: IsMatch
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsMatch
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsMatch
  nameWithType: CoreExtension.IsMatch
- uid: WeihanLi.Extensions.CoreExtension.IsMultipleOf(System.Int32,System.Int32)
  name: IsMultipleOf(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsMultipleOf(System.Int32,System.Int32)
  name.vb: IsMultipleOf(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.IsMultipleOf(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsMultipleOf(Integer, Integer)
  nameWithType: CoreExtension.IsMultipleOf(int, int)
  nameWithType.vb: CoreExtension.IsMultipleOf(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.IsMultipleOf*
  name: IsMultipleOf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsMultipleOf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsMultipleOf
  nameWithType: CoreExtension.IsMultipleOf
- uid: WeihanLi.Extensions.CoreExtension.IsNotEmpty(System.Guid)
  name: IsNotEmpty(Guid)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNotEmpty(System.Guid)
  fullName: WeihanLi.Extensions.CoreExtension.IsNotEmpty(System.Guid)
  nameWithType: CoreExtension.IsNotEmpty(Guid)
- uid: WeihanLi.Extensions.CoreExtension.IsNotEmpty*
  name: IsNotEmpty
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNotEmpty
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNotEmpty
  nameWithType: CoreExtension.IsNotEmpty
- uid: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(System.Nullable{System.Guid})
  name: IsNotNullOrEmpty(Guid?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(System.Nullable{System.Guid})
  fullName: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(System.Guid?)
  nameWithType: CoreExtension.IsNotNullOrEmpty(Guid?)
- uid: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(System.String)
  name: IsNotNullOrEmpty(string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(System.String)
  name.vb: IsNotNullOrEmpty(String)
  fullName: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty(String)
  nameWithType: CoreExtension.IsNotNullOrEmpty(string?)
  nameWithType.vb: CoreExtension.IsNotNullOrEmpty(String)
- uid: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty*
  name: IsNotNullOrEmpty
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNotNullOrEmpty
  nameWithType: CoreExtension.IsNotNullOrEmpty
- uid: WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace(System.String)
  name: IsNotNullOrWhiteSpace(string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace(System.String)
  name.vb: IsNotNullOrWhiteSpace(String)
  fullName: WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace(string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace(String)
  nameWithType: CoreExtension.IsNotNullOrWhiteSpace(string?)
  nameWithType.vb: CoreExtension.IsNotNullOrWhiteSpace(String)
- uid: WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace*
  name: IsNotNullOrWhiteSpace
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNotNullOrWhiteSpace
  nameWithType: CoreExtension.IsNotNullOrWhiteSpace
- uid: WeihanLi.Extensions.CoreExtension.IsNullableType(System.Type)
  name: IsNullableType(Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNullableType(System.Type)
  fullName: WeihanLi.Extensions.CoreExtension.IsNullableType(System.Type)
  nameWithType: CoreExtension.IsNullableType(Type)
- uid: WeihanLi.Extensions.CoreExtension.IsNullableType*
  name: IsNullableType
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNullableType
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNullableType
  nameWithType: CoreExtension.IsNullableType
- uid: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(System.Nullable{System.Guid})
  name: IsNullOrEmpty(Guid?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(System.Nullable{System.Guid})
  fullName: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(System.Guid?)
  nameWithType: CoreExtension.IsNullOrEmpty(Guid?)
- uid: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(System.String)
  name: IsNullOrEmpty(string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(System.String)
  name.vb: IsNullOrEmpty(String)
  fullName: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty(String)
  nameWithType: CoreExtension.IsNullOrEmpty(string?)
  nameWithType.vb: CoreExtension.IsNullOrEmpty(String)
- uid: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty*
  name: IsNullOrEmpty
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNullOrEmpty
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNullOrEmpty
  nameWithType: CoreExtension.IsNullOrEmpty
- uid: WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace(System.String)
  name: IsNullOrWhiteSpace(string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace(System.String)
  name.vb: IsNullOrWhiteSpace(String)
  fullName: WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace(string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace(String)
  nameWithType: CoreExtension.IsNullOrWhiteSpace(string?)
  nameWithType.vb: CoreExtension.IsNullOrWhiteSpace(String)
- uid: WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace*
  name: IsNullOrWhiteSpace
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNullOrWhiteSpace
  nameWithType: CoreExtension.IsNullOrWhiteSpace
- uid: WeihanLi.Extensions.CoreExtension.IsNumber(System.Char)
  name: IsNumber(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsNumber(System.Char)
  name.vb: IsNumber(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsNumber(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsNumber(Char)
  nameWithType: CoreExtension.IsNumber(char)
  nameWithType.vb: CoreExtension.IsNumber(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsNumber*
  name: IsNumber
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsNumber
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsNumber
  nameWithType: CoreExtension.IsNumber
- uid: WeihanLi.Extensions.CoreExtension.IsOdd(System.Int16)
  name: IsOdd(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsOdd(System.Int16)
  name.vb: IsOdd(Short)
  fullName: WeihanLi.Extensions.CoreExtension.IsOdd(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsOdd(Short)
  nameWithType: CoreExtension.IsOdd(short)
  nameWithType.vb: CoreExtension.IsOdd(Short)
- uid: WeihanLi.Extensions.CoreExtension.IsOdd(System.Int32)
  name: IsOdd(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsOdd(System.Int32)
  name.vb: IsOdd(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.IsOdd(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsOdd(Integer)
  nameWithType: CoreExtension.IsOdd(int)
  nameWithType.vb: CoreExtension.IsOdd(Integer)
- uid: WeihanLi.Extensions.CoreExtension.IsOdd*
  name: IsOdd
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsOdd
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsOdd
  nameWithType: CoreExtension.IsOdd
- uid: WeihanLi.Extensions.CoreExtension.IsPrime(System.Int16)
  name: IsPrime(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsPrime(System.Int16)
  name.vb: IsPrime(Short)
  fullName: WeihanLi.Extensions.CoreExtension.IsPrime(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsPrime(Short)
  nameWithType: CoreExtension.IsPrime(short)
  nameWithType.vb: CoreExtension.IsPrime(Short)
- uid: WeihanLi.Extensions.CoreExtension.IsPrime(System.Int32)
  name: IsPrime(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsPrime(System.Int32)
  name.vb: IsPrime(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.IsPrime(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsPrime(Integer)
  nameWithType: CoreExtension.IsPrime(int)
  nameWithType.vb: CoreExtension.IsPrime(Integer)
- uid: WeihanLi.Extensions.CoreExtension.IsPrime*
  name: IsPrime
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsPrime
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsPrime
  nameWithType: CoreExtension.IsPrime
- uid: WeihanLi.Extensions.CoreExtension.IsSeparator(System.Char)
  name: IsSeparator(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsSeparator(System.Char)
  name.vb: IsSeparator(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsSeparator(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsSeparator(Char)
  nameWithType: CoreExtension.IsSeparator(char)
  nameWithType.vb: CoreExtension.IsSeparator(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsSeparator*
  name: IsSeparator
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsSeparator
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsSeparator
  nameWithType: CoreExtension.IsSeparator
- uid: WeihanLi.Extensions.CoreExtension.IsSymbol(System.Char)
  name: IsSymbol(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsSymbol(System.Char)
  name.vb: IsSymbol(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsSymbol(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsSymbol(Char)
  nameWithType: CoreExtension.IsSymbol(char)
  nameWithType.vb: CoreExtension.IsSymbol(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsSymbol*
  name: IsSymbol
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsSymbol
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsSymbol
  nameWithType: CoreExtension.IsSymbol
- uid: WeihanLi.Extensions.CoreExtension.IsToday(System.DateTime)
  name: IsToday(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsToday(System.DateTime)
  name.vb: IsToday(Date)
  fullName: WeihanLi.Extensions.CoreExtension.IsToday(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsToday(Date)
  nameWithType: CoreExtension.IsToday(DateTime)
  nameWithType.vb: CoreExtension.IsToday(Date)
- uid: WeihanLi.Extensions.CoreExtension.IsToday*
  name: IsToday
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsToday
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsToday
  nameWithType: CoreExtension.IsToday
- uid: WeihanLi.Extensions.CoreExtension.IsUpper(System.Char)
  name: IsUpper(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsUpper(System.Char)
  name.vb: IsUpper(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsUpper(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsUpper(Char)
  nameWithType: CoreExtension.IsUpper(char)
  nameWithType.vb: CoreExtension.IsUpper(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsUpper*
  name: IsUpper
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsUpper
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsUpper
  nameWithType: CoreExtension.IsUpper
- uid: WeihanLi.Extensions.CoreExtension.IsWeekDay(System.DateTime)
  name: IsWeekDay(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsWeekDay(System.DateTime)
  name.vb: IsWeekDay(Date)
  fullName: WeihanLi.Extensions.CoreExtension.IsWeekDay(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsWeekDay(Date)
  nameWithType: CoreExtension.IsWeekDay(DateTime)
  nameWithType.vb: CoreExtension.IsWeekDay(Date)
- uid: WeihanLi.Extensions.CoreExtension.IsWeekDay*
  name: IsWeekDay
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsWeekDay
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsWeekDay
  nameWithType: CoreExtension.IsWeekDay
- uid: WeihanLi.Extensions.CoreExtension.IsWeekendDay(System.DateTime)
  name: IsWeekendDay(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsWeekendDay(System.DateTime)
  name.vb: IsWeekendDay(Date)
  fullName: WeihanLi.Extensions.CoreExtension.IsWeekendDay(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsWeekendDay(Date)
  nameWithType: CoreExtension.IsWeekendDay(DateTime)
  nameWithType.vb: CoreExtension.IsWeekendDay(Date)
- uid: WeihanLi.Extensions.CoreExtension.IsWeekendDay*
  name: IsWeekendDay
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsWeekendDay
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsWeekendDay
  nameWithType: CoreExtension.IsWeekendDay
- uid: WeihanLi.Extensions.CoreExtension.IsWhiteSpace(System.Char)
  name: IsWhiteSpace(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.IsWhiteSpace(System.Char)
  name.vb: IsWhiteSpace(Char)
  fullName: WeihanLi.Extensions.CoreExtension.IsWhiteSpace(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.IsWhiteSpace(Char)
  nameWithType: CoreExtension.IsWhiteSpace(char)
  nameWithType.vb: CoreExtension.IsWhiteSpace(Char)
- uid: WeihanLi.Extensions.CoreExtension.IsWhiteSpace*
  name: IsWhiteSpace
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.IsWhiteSpace
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.IsWhiteSpace
  nameWithType: CoreExtension.IsWhiteSpace
- uid: WeihanLi.Extensions.CoreExtension.Join*
  name: Join
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Join
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Join
  nameWithType: CoreExtension.Join
- uid: WeihanLi.Extensions.CoreExtension.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  name: Join<T>(string, IEnumerable<T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  name.vb: Join(Of T)(String, IEnumerable(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.Join<T>(string, System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Join(Of T)(String, System.Collections.Generic.IEnumerable(Of T))
  nameWithType: CoreExtension.Join<T>(string, IEnumerable<T>)
  nameWithType.vb: CoreExtension.Join(Of T)(String, IEnumerable(Of T))
- uid: WeihanLi.Extensions.CoreExtension.Log(System.Double,System.Double)
  name: Log(double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Log(System.Double,System.Double)
  name.vb: Log(Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.Log(double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Log(Double, Double)
  nameWithType: CoreExtension.Log(double, double)
  nameWithType.vb: CoreExtension.Log(Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.Log(System.Double)
  name: Log(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Log(System.Double)
  name.vb: Log(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Log(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Log(Double)
  nameWithType: CoreExtension.Log(double)
  nameWithType.vb: CoreExtension.Log(Double)
- uid: WeihanLi.Extensions.CoreExtension.Log*
  name: Log
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Log
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Log
  nameWithType: CoreExtension.Log
- uid: WeihanLi.Extensions.CoreExtension.Log10(System.Double)
  name: Log10(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Log10(System.Double)
  name.vb: Log10(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Log10(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Log10(Double)
  nameWithType: CoreExtension.Log10(double)
  nameWithType.vb: CoreExtension.Log10(Double)
- uid: WeihanLi.Extensions.CoreExtension.Log10*
  name: Log10
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Log10
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Log10
  nameWithType: CoreExtension.Log10
- uid: WeihanLi.Extensions.CoreExtension.Max(System.Byte,System.Byte)
  name: Max(byte, byte)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Max(System.Byte,System.Byte)
  name.vb: Max(Byte, Byte)
  fullName: WeihanLi.Extensions.CoreExtension.Max(byte, byte)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Max(Byte, Byte)
  nameWithType: CoreExtension.Max(byte, byte)
  nameWithType.vb: CoreExtension.Max(Byte, Byte)
- uid: WeihanLi.Extensions.CoreExtension.Max(System.Decimal,System.Decimal)
  name: Max(decimal, decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Max(System.Decimal,System.Decimal)
  name.vb: Max(Decimal, Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Max(decimal, decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Max(Decimal, Decimal)
  nameWithType: CoreExtension.Max(decimal, decimal)
  nameWithType.vb: CoreExtension.Max(Decimal, Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Max(System.Double,System.Double)
  name: Max(double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Max(System.Double,System.Double)
  name.vb: Max(Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.Max(double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Max(Double, Double)
  nameWithType: CoreExtension.Max(double, double)
  nameWithType.vb: CoreExtension.Max(Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.Max(System.Int16,System.Int16)
  name: Max(short, short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Max(System.Int16,System.Int16)
  name.vb: Max(Short, Short)
  fullName: WeihanLi.Extensions.CoreExtension.Max(short, short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Max(Short, Short)
  nameWithType: CoreExtension.Max(short, short)
  nameWithType.vb: CoreExtension.Max(Short, Short)
- uid: WeihanLi.Extensions.CoreExtension.Max(System.Int32,System.Int32)
  name: Max(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Max(System.Int32,System.Int32)
  name.vb: Max(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Max(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Max(Integer, Integer)
  nameWithType: CoreExtension.Max(int, int)
  nameWithType.vb: CoreExtension.Max(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Max*
  name: Max
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Max
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Max
  nameWithType: CoreExtension.Max
- uid: WeihanLi.Extensions.CoreExtension.Min(System.Byte,System.Byte)
  name: Min(byte, byte)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Min(System.Byte,System.Byte)
  name.vb: Min(Byte, Byte)
  fullName: WeihanLi.Extensions.CoreExtension.Min(byte, byte)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Min(Byte, Byte)
  nameWithType: CoreExtension.Min(byte, byte)
  nameWithType.vb: CoreExtension.Min(Byte, Byte)
- uid: WeihanLi.Extensions.CoreExtension.Min(System.Decimal,System.Decimal)
  name: Min(decimal, decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Min(System.Decimal,System.Decimal)
  name.vb: Min(Decimal, Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Min(decimal, decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Min(Decimal, Decimal)
  nameWithType: CoreExtension.Min(decimal, decimal)
  nameWithType.vb: CoreExtension.Min(Decimal, Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Min(System.Double,System.Double)
  name: Min(double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Min(System.Double,System.Double)
  name.vb: Min(Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.Min(double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Min(Double, Double)
  nameWithType: CoreExtension.Min(double, double)
  nameWithType.vb: CoreExtension.Min(Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.Min(System.Int16,System.Int16)
  name: Min(short, short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Min(System.Int16,System.Int16)
  name.vb: Min(Short, Short)
  fullName: WeihanLi.Extensions.CoreExtension.Min(short, short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Min(Short, Short)
  nameWithType: CoreExtension.Min(short, short)
  nameWithType.vb: CoreExtension.Min(Short, Short)
- uid: WeihanLi.Extensions.CoreExtension.Min(System.Int32,System.Int32)
  name: Min(int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Min(System.Int32,System.Int32)
  name.vb: Min(Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Min(int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Min(Integer, Integer)
  nameWithType: CoreExtension.Min(int, int)
  nameWithType.vb: CoreExtension.Min(Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Min*
  name: Min
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Min
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Min
  nameWithType: CoreExtension.Min
- uid: WeihanLi.Extensions.CoreExtension.NetworkToHostOrder(System.Int16)
  name: NetworkToHostOrder(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.NetworkToHostOrder(System.Int16)
  name.vb: NetworkToHostOrder(Short)
  fullName: WeihanLi.Extensions.CoreExtension.NetworkToHostOrder(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.NetworkToHostOrder(Short)
  nameWithType: CoreExtension.NetworkToHostOrder(short)
  nameWithType.vb: CoreExtension.NetworkToHostOrder(Short)
- uid: WeihanLi.Extensions.CoreExtension.NetworkToHostOrder*
  name: NetworkToHostOrder
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.NetworkToHostOrder
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.NetworkToHostOrder
  nameWithType: CoreExtension.NetworkToHostOrder
- uid: WeihanLi.Extensions.CoreExtension.NullIf*
  name: NullIf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.NullIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.NullIf
  nameWithType: CoreExtension.NullIf
- uid: WeihanLi.Extensions.CoreExtension.NullIf``1(``0,System.Func{``0,System.Boolean})
  name: NullIf<T>(T, Func<T, bool>?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.NullIf``1(``0,System.Func{``0,System.Boolean})
  name.vb: NullIf(Of T)(T, Func(Of T, Boolean))
  fullName: WeihanLi.Extensions.CoreExtension.NullIf<T>(T, System.Func<T, bool>?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.NullIf(Of T)(T, System.Func(Of T, Boolean))
  nameWithType: CoreExtension.NullIf<T>(T, Func<T, bool>?)
  nameWithType.vb: CoreExtension.NullIf(Of T)(T, Func(Of T, Boolean))
- uid: WeihanLi.Extensions.CoreExtension.OneOf*
  name: OneOf
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.OneOf
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.OneOf
  nameWithType: CoreExtension.OneOf
- uid: WeihanLi.Extensions.CoreExtension.OneOf``1(System.Random,``0[])
  name: OneOf<T>(Random, params T[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.OneOf``1(System.Random,``0[])
  name.vb: OneOf(Of T)(Random, ParamArray T())
  fullName: WeihanLi.Extensions.CoreExtension.OneOf<T>(System.Random, params T[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.OneOf(Of T)(System.Random, ParamArray T())
  nameWithType: CoreExtension.OneOf<T>(Random, params T[])
  nameWithType.vb: CoreExtension.OneOf(Of T)(Random, ParamArray T())
- uid: WeihanLi.Extensions.CoreExtension.ParseParamDictionary(System.Object)
  name: ParseParamDictionary(object?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ParseParamDictionary(System.Object)
  name.vb: ParseParamDictionary(Object)
  fullName: WeihanLi.Extensions.CoreExtension.ParseParamDictionary(object?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ParseParamDictionary(Object)
  nameWithType: CoreExtension.ParseParamDictionary(object?)
  nameWithType.vb: CoreExtension.ParseParamDictionary(Object)
- uid: WeihanLi.Extensions.CoreExtension.ParseParamDictionary*
  name: ParseParamDictionary
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ParseParamDictionary
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ParseParamDictionary
  nameWithType: CoreExtension.ParseParamDictionary
- uid: WeihanLi.Extensions.CoreExtension.Pow(System.Double,System.Double)
  name: Pow(double, double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Pow(System.Double,System.Double)
  name.vb: Pow(Double, Double)
  fullName: WeihanLi.Extensions.CoreExtension.Pow(double, double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Pow(Double, Double)
  nameWithType: CoreExtension.Pow(double, double)
  nameWithType.vb: CoreExtension.Pow(Double, Double)
- uid: WeihanLi.Extensions.CoreExtension.Pow*
  name: Pow
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Pow
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Pow
  nameWithType: CoreExtension.Pow
- uid: WeihanLi.Extensions.CoreExtension.Remove(System.Delegate,System.Delegate)
  name: Remove(Delegate, Delegate)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Remove(System.Delegate,System.Delegate)
  fullName: WeihanLi.Extensions.CoreExtension.Remove(System.Delegate, System.Delegate)
  nameWithType: CoreExtension.Remove(Delegate, Delegate)
- uid: WeihanLi.Extensions.CoreExtension.Remove*
  name: Remove
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Remove
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Remove
  nameWithType: CoreExtension.Remove
- uid: WeihanLi.Extensions.CoreExtension.RemoveAll(System.Delegate,System.Delegate)
  name: RemoveAll(Delegate, Delegate)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.RemoveAll(System.Delegate,System.Delegate)
  fullName: WeihanLi.Extensions.CoreExtension.RemoveAll(System.Delegate, System.Delegate)
  nameWithType: CoreExtension.RemoveAll(Delegate, Delegate)
- uid: WeihanLi.Extensions.CoreExtension.RemoveAll*
  name: RemoveAll
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.RemoveAll
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.RemoveAll
  nameWithType: CoreExtension.RemoveAll
- uid: WeihanLi.Extensions.CoreExtension.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})
  name: RemoveWhere(string, Func<char, bool>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})
  name.vb: RemoveWhere(String, Func(Of Char, Boolean))
  fullName: WeihanLi.Extensions.CoreExtension.RemoveWhere(string, System.Func<char, bool>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.RemoveWhere(String, System.Func(Of Char, Boolean))
  nameWithType: CoreExtension.RemoveWhere(string, Func<char, bool>)
  nameWithType.vb: CoreExtension.RemoveWhere(String, Func(Of Char, Boolean))
- uid: WeihanLi.Extensions.CoreExtension.RemoveWhere*
  name: RemoveWhere
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.RemoveWhere
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.RemoveWhere
  nameWithType: CoreExtension.RemoveWhere
- uid: WeihanLi.Extensions.CoreExtension.Repeat(System.Char,System.Int32)
  name: Repeat(char, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Repeat(System.Char,System.Int32)
  name.vb: Repeat(Char, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Repeat(char, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Repeat(Char, Integer)
  nameWithType: CoreExtension.Repeat(char, int)
  nameWithType.vb: CoreExtension.Repeat(Char, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Repeat(System.String,System.Int32)
  name: Repeat(string, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Repeat(System.String,System.Int32)
  name.vb: Repeat(String, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Repeat(string, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Repeat(String, Integer)
  nameWithType: CoreExtension.Repeat(string, int)
  nameWithType.vb: CoreExtension.Repeat(String, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Repeat*
  name: Repeat
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Repeat
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Repeat
  nameWithType: CoreExtension.Repeat
- uid: WeihanLi.Extensions.CoreExtension.Resize(System.Byte[],System.Int32)
  name: Resize(byte[], int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Resize(System.Byte[],System.Int32)
  name.vb: Resize(Byte(), Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Resize(byte[], int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Resize(Byte(), Integer)
  nameWithType: CoreExtension.Resize(byte[], int)
  nameWithType.vb: CoreExtension.Resize(Byte(), Integer)
- uid: WeihanLi.Extensions.CoreExtension.Resize*
  name: Resize
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Resize
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Resize
  nameWithType: CoreExtension.Resize
- uid: WeihanLi.Extensions.CoreExtension.Reverse(System.String)
  name: Reverse(string?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Reverse(System.String)
  name.vb: Reverse(String)
  fullName: WeihanLi.Extensions.CoreExtension.Reverse(string?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Reverse(String)
  nameWithType: CoreExtension.Reverse(string?)
  nameWithType.vb: CoreExtension.Reverse(String)
- uid: WeihanLi.Extensions.CoreExtension.Reverse*
  name: Reverse
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Reverse
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Reverse
  nameWithType: CoreExtension.Reverse
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.Int32,System.MidpointRounding)
  name: Round(decimal, int, MidpointRounding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.Int32,System.MidpointRounding)
  name.vb: Round(Decimal, Integer, MidpointRounding)
  fullName: WeihanLi.Extensions.CoreExtension.Round(decimal, int, System.MidpointRounding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Decimal, Integer, System.MidpointRounding)
  nameWithType: CoreExtension.Round(decimal, int, MidpointRounding)
  nameWithType.vb: CoreExtension.Round(Decimal, Integer, MidpointRounding)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.Int32)
  name: Round(decimal, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.Int32)
  name.vb: Round(Decimal, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Round(decimal, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Decimal, Integer)
  nameWithType: CoreExtension.Round(decimal, int)
  nameWithType.vb: CoreExtension.Round(Decimal, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.MidpointRounding)
  name: Round(decimal, MidpointRounding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Decimal,System.MidpointRounding)
  name.vb: Round(Decimal, MidpointRounding)
  fullName: WeihanLi.Extensions.CoreExtension.Round(decimal, System.MidpointRounding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Decimal, System.MidpointRounding)
  nameWithType: CoreExtension.Round(decimal, MidpointRounding)
  nameWithType.vb: CoreExtension.Round(Decimal, MidpointRounding)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Decimal)
  name: Round(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Decimal)
  name.vb: Round(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Round(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Decimal)
  nameWithType: CoreExtension.Round(decimal)
  nameWithType.vb: CoreExtension.Round(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Double,System.Int32,System.MidpointRounding)
  name: Round(double, int, MidpointRounding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Double,System.Int32,System.MidpointRounding)
  name.vb: Round(Double, Integer, MidpointRounding)
  fullName: WeihanLi.Extensions.CoreExtension.Round(double, int, System.MidpointRounding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Double, Integer, System.MidpointRounding)
  nameWithType: CoreExtension.Round(double, int, MidpointRounding)
  nameWithType.vb: CoreExtension.Round(Double, Integer, MidpointRounding)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Double,System.Int32)
  name: Round(double, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Double,System.Int32)
  name.vb: Round(Double, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Round(double, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Double, Integer)
  nameWithType: CoreExtension.Round(double, int)
  nameWithType.vb: CoreExtension.Round(Double, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Double,System.MidpointRounding)
  name: Round(double, MidpointRounding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Double,System.MidpointRounding)
  name.vb: Round(Double, MidpointRounding)
  fullName: WeihanLi.Extensions.CoreExtension.Round(double, System.MidpointRounding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Double, System.MidpointRounding)
  nameWithType: CoreExtension.Round(double, MidpointRounding)
  nameWithType.vb: CoreExtension.Round(Double, MidpointRounding)
- uid: WeihanLi.Extensions.CoreExtension.Round(System.Double)
  name: Round(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Round(System.Double)
  name.vb: Round(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Round(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Round(Double)
  nameWithType: CoreExtension.Round(double)
  nameWithType.vb: CoreExtension.Round(Double)
- uid: WeihanLi.Extensions.CoreExtension.Round*
  name: Round
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Round
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Round
  nameWithType: CoreExtension.Round
- uid: WeihanLi.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32,System.Int32)
  name: SafeSubstring(string, int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32,System.Int32)
  name.vb: SafeSubstring(String, Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.SafeSubstring(string, int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.SafeSubstring(String, Integer, Integer)
  nameWithType: CoreExtension.SafeSubstring(string, int, int)
  nameWithType.vb: CoreExtension.SafeSubstring(String, Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32)
  name: SafeSubstring(string, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.SafeSubstring(System.String,System.Int32)
  name.vb: SafeSubstring(String, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.SafeSubstring(string, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.SafeSubstring(String, Integer)
  nameWithType: CoreExtension.SafeSubstring(string, int)
  nameWithType.vb: CoreExtension.SafeSubstring(String, Integer)
- uid: WeihanLi.Extensions.CoreExtension.SafeSubstring*
  name: SafeSubstring
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.SafeSubstring
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.SafeSubstring
  nameWithType: CoreExtension.SafeSubstring
- uid: WeihanLi.Extensions.CoreExtension.Sign(System.Decimal)
  name: Sign(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sign(System.Decimal)
  name.vb: Sign(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Sign(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sign(Decimal)
  nameWithType: CoreExtension.Sign(decimal)
  nameWithType.vb: CoreExtension.Sign(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Sign(System.Double)
  name: Sign(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sign(System.Double)
  name.vb: Sign(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Sign(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sign(Double)
  nameWithType: CoreExtension.Sign(double)
  nameWithType.vb: CoreExtension.Sign(Double)
- uid: WeihanLi.Extensions.CoreExtension.Sign(System.Int16)
  name: Sign(short)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sign(System.Int16)
  name.vb: Sign(Short)
  fullName: WeihanLi.Extensions.CoreExtension.Sign(short)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sign(Short)
  nameWithType: CoreExtension.Sign(short)
  nameWithType.vb: CoreExtension.Sign(Short)
- uid: WeihanLi.Extensions.CoreExtension.Sign(System.Int32)
  name: Sign(int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sign(System.Int32)
  name.vb: Sign(Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Sign(int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sign(Integer)
  nameWithType: CoreExtension.Sign(int)
  nameWithType.vb: CoreExtension.Sign(Integer)
- uid: WeihanLi.Extensions.CoreExtension.Sign*
  name: Sign
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Sign
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Sign
  nameWithType: CoreExtension.Sign
- uid: WeihanLi.Extensions.CoreExtension.Sin(System.Double)
  name: Sin(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sin(System.Double)
  name.vb: Sin(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Sin(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sin(Double)
  nameWithType: CoreExtension.Sin(double)
  nameWithType.vb: CoreExtension.Sin(Double)
- uid: WeihanLi.Extensions.CoreExtension.Sin*
  name: Sin
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Sin
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Sin
  nameWithType: CoreExtension.Sin
- uid: WeihanLi.Extensions.CoreExtension.Sinh(System.Double)
  name: Sinh(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sinh(System.Double)
  name.vb: Sinh(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Sinh(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sinh(Double)
  nameWithType: CoreExtension.Sinh(double)
  nameWithType.vb: CoreExtension.Sinh(Double)
- uid: WeihanLi.Extensions.CoreExtension.Sinh*
  name: Sinh
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Sinh
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Sinh
  nameWithType: CoreExtension.Sinh
- uid: WeihanLi.Extensions.CoreExtension.Split(System.String,System.String,System.StringSplitOptions)
  name: Split(string, string, StringSplitOptions)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Split(System.String,System.String,System.StringSplitOptions)
  name.vb: Split(String, String, StringSplitOptions)
  fullName: WeihanLi.Extensions.CoreExtension.Split(string, string, System.StringSplitOptions)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Split(String, String, System.StringSplitOptions)
  nameWithType: CoreExtension.Split(string, string, StringSplitOptions)
  nameWithType.vb: CoreExtension.Split(String, String, StringSplitOptions)
- uid: WeihanLi.Extensions.CoreExtension.Split*
  name: Split
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Split
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Split
  nameWithType: CoreExtension.Split
- uid: WeihanLi.Extensions.CoreExtension.Sqrt(System.Double)
  name: Sqrt(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sqrt(System.Double)
  name.vb: Sqrt(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Sqrt(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sqrt(Double)
  nameWithType: CoreExtension.Sqrt(double)
  nameWithType.vb: CoreExtension.Sqrt(Double)
- uid: WeihanLi.Extensions.CoreExtension.Sqrt*
  name: Sqrt
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Sqrt
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Sqrt
  nameWithType: CoreExtension.Sqrt
- uid: WeihanLi.Extensions.CoreExtension.StartOfDay(System.DateTime)
  name: StartOfDay(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.StartOfDay(System.DateTime)
  name.vb: StartOfDay(Date)
  fullName: WeihanLi.Extensions.CoreExtension.StartOfDay(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.StartOfDay(Date)
  nameWithType: CoreExtension.StartOfDay(DateTime)
  nameWithType.vb: CoreExtension.StartOfDay(Date)
- uid: WeihanLi.Extensions.CoreExtension.StartOfDay*
  name: StartOfDay
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.StartOfDay
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.StartOfDay
  nameWithType: CoreExtension.StartOfDay
- uid: WeihanLi.Extensions.CoreExtension.StartOfMonth(System.DateTime)
  name: StartOfMonth(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.StartOfMonth(System.DateTime)
  name.vb: StartOfMonth(Date)
  fullName: WeihanLi.Extensions.CoreExtension.StartOfMonth(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.StartOfMonth(Date)
  nameWithType: CoreExtension.StartOfMonth(DateTime)
  nameWithType.vb: CoreExtension.StartOfMonth(Date)
- uid: WeihanLi.Extensions.CoreExtension.StartOfMonth*
  name: StartOfMonth
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.StartOfMonth
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.StartOfMonth
  nameWithType: CoreExtension.StartOfMonth
- uid: WeihanLi.Extensions.CoreExtension.StartOfWeek(System.DateTime,System.DayOfWeek)
  name: StartOfWeek(DateTime, DayOfWeek)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.StartOfWeek(System.DateTime,System.DayOfWeek)
  name.vb: StartOfWeek(Date, DayOfWeek)
  fullName: WeihanLi.Extensions.CoreExtension.StartOfWeek(System.DateTime, System.DayOfWeek)
  fullName.vb: WeihanLi.Extensions.CoreExtension.StartOfWeek(Date, System.DayOfWeek)
  nameWithType: CoreExtension.StartOfWeek(DateTime, DayOfWeek)
  nameWithType.vb: CoreExtension.StartOfWeek(Date, DayOfWeek)
- uid: WeihanLi.Extensions.CoreExtension.StartOfWeek*
  name: StartOfWeek
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.StartOfWeek
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.StartOfWeek
  nameWithType: CoreExtension.StartOfWeek
- uid: WeihanLi.Extensions.CoreExtension.StartOfYear(System.DateTime)
  name: StartOfYear(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.StartOfYear(System.DateTime)
  name.vb: StartOfYear(Date)
  fullName: WeihanLi.Extensions.CoreExtension.StartOfYear(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.StartOfYear(Date)
  nameWithType: CoreExtension.StartOfYear(DateTime)
  nameWithType.vb: CoreExtension.StartOfYear(Date)
- uid: WeihanLi.Extensions.CoreExtension.StartOfYear*
  name: StartOfYear
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.StartOfYear
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.StartOfYear
  nameWithType: CoreExtension.StartOfYear
- uid: WeihanLi.Extensions.CoreExtension.Sub(System.String,System.Int32)
  name: Sub(string, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Sub(System.String,System.Int32)
  name.vb: Sub(String, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Sub(string, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Sub(String, Integer)
  nameWithType: CoreExtension.Sub(string, int)
  nameWithType.vb: CoreExtension.Sub(String, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Sub*
  name: Sub
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Sub
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Sub
  nameWithType: CoreExtension.Sub
- uid: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32,System.Int32)
  name: Substring(StringBuilder, int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32,System.Int32)
  name.vb: Substring(StringBuilder, Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder, int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder, Integer, Integer)
  nameWithType: CoreExtension.Substring(StringBuilder, int, int)
  nameWithType.vb: CoreExtension.Substring(StringBuilder, Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32)
  name: Substring(StringBuilder, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder,System.Int32)
  name.vb: Substring(StringBuilder, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Substring(System.Text.StringBuilder, Integer)
  nameWithType: CoreExtension.Substring(StringBuilder, int)
  nameWithType.vb: CoreExtension.Substring(StringBuilder, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Substring*
  name: Substring
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Substring
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Substring
  nameWithType: CoreExtension.Substring
- uid: WeihanLi.Extensions.CoreExtension.Tan(System.Double)
  name: Tan(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Tan(System.Double)
  name.vb: Tan(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Tan(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Tan(Double)
  nameWithType: CoreExtension.Tan(double)
  nameWithType.vb: CoreExtension.Tan(Double)
- uid: WeihanLi.Extensions.CoreExtension.Tan*
  name: Tan
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Tan
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Tan
  nameWithType: CoreExtension.Tan
- uid: WeihanLi.Extensions.CoreExtension.Tanh(System.Double)
  name: Tanh(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Tanh(System.Double)
  name.vb: Tanh(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Tanh(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Tanh(Double)
  nameWithType: CoreExtension.Tanh(double)
  nameWithType.vb: CoreExtension.Tanh(Double)
- uid: WeihanLi.Extensions.CoreExtension.Tanh*
  name: Tanh
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Tanh
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Tanh
  nameWithType: CoreExtension.Tanh
- uid: WeihanLi.Extensions.CoreExtension.To(System.Object,System.Type)
  name: To(object?, Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.To(System.Object,System.Type)
  name.vb: To(Object, Type)
  fullName: WeihanLi.Extensions.CoreExtension.To(object?, System.Type)
  fullName.vb: WeihanLi.Extensions.CoreExtension.To(Object, System.Type)
  nameWithType: CoreExtension.To(object?, Type)
  nameWithType.vb: CoreExtension.To(Object, Type)
- uid: WeihanLi.Extensions.CoreExtension.To*
  name: To
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.To
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.To
  nameWithType: CoreExtension.To
- uid: WeihanLi.Extensions.CoreExtension.To``1(System.Object)
  name: To<T>(object?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.To``1(System.Object)
  name.vb: To(Of T)(Object)
  fullName: WeihanLi.Extensions.CoreExtension.To<T>(object?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.To(Of T)(Object)
  nameWithType: CoreExtension.To<T>(object?)
  nameWithType.vb: CoreExtension.To(Of T)(Object)
- uid: WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  name: ToBase64String(byte[], Base64FormattingOptions)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Base64FormattingOptions)
  name.vb: ToBase64String(Byte(), Base64FormattingOptions)
  fullName: WeihanLi.Extensions.CoreExtension.ToBase64String(byte[], System.Base64FormattingOptions)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToBase64String(Byte(), System.Base64FormattingOptions)
  nameWithType: CoreExtension.ToBase64String(byte[], Base64FormattingOptions)
  nameWithType.vb: CoreExtension.ToBase64String(Byte(), Base64FormattingOptions)
- uid: WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  name: ToBase64String(byte[], int, int, Base64FormattingOptions)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)
  name.vb: ToBase64String(Byte(), Integer, Integer, Base64FormattingOptions)
  fullName: WeihanLi.Extensions.CoreExtension.ToBase64String(byte[], int, int, System.Base64FormattingOptions)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToBase64String(Byte(), Integer, Integer, System.Base64FormattingOptions)
  nameWithType: CoreExtension.ToBase64String(byte[], int, int, Base64FormattingOptions)
  nameWithType.vb: CoreExtension.ToBase64String(Byte(), Integer, Integer, Base64FormattingOptions)
- uid: WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32)
  name: ToBase64String(byte[], int, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[],System.Int32,System.Int32)
  name.vb: ToBase64String(Byte(), Integer, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.ToBase64String(byte[], int, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToBase64String(Byte(), Integer, Integer)
  nameWithType: CoreExtension.ToBase64String(byte[], int, int)
  nameWithType.vb: CoreExtension.ToBase64String(Byte(), Integer, Integer)
- uid: WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[])
  name: ToBase64String(byte[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToBase64String(System.Byte[])
  name.vb: ToBase64String(Byte())
  fullName: WeihanLi.Extensions.CoreExtension.ToBase64String(byte[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToBase64String(Byte())
  nameWithType: CoreExtension.ToBase64String(byte[])
  nameWithType.vb: CoreExtension.ToBase64String(Byte())
- uid: WeihanLi.Extensions.CoreExtension.ToBase64String*
  name: ToBase64String
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToBase64String
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToBase64String
  nameWithType: CoreExtension.ToBase64String
- uid: WeihanLi.Extensions.CoreExtension.ToByteArray(System.String,System.Text.Encoding)
  name: ToByteArray(string, Encoding)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToByteArray(System.String,System.Text.Encoding)
  name.vb: ToByteArray(String, Encoding)
  fullName: WeihanLi.Extensions.CoreExtension.ToByteArray(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToByteArray(String, System.Text.Encoding)
  nameWithType: CoreExtension.ToByteArray(string, Encoding)
  nameWithType.vb: CoreExtension.ToByteArray(String, Encoding)
- uid: WeihanLi.Extensions.CoreExtension.ToByteArray(System.String)
  name: ToByteArray(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToByteArray(System.String)
  name.vb: ToByteArray(String)
  fullName: WeihanLi.Extensions.CoreExtension.ToByteArray(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToByteArray(String)
  nameWithType: CoreExtension.ToByteArray(string)
  nameWithType.vb: CoreExtension.ToByteArray(String)
- uid: WeihanLi.Extensions.CoreExtension.ToByteArray*
  name: ToByteArray
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToByteArray
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToByteArray
  nameWithType: CoreExtension.ToByteArray
- uid: WeihanLi.Extensions.CoreExtension.ToEnum*
  name: ToEnum
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToEnum
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToEnum
  nameWithType: CoreExtension.ToEnum
- uid: WeihanLi.Extensions.CoreExtension.ToEnum``1(System.String)
  name: ToEnum<T>(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToEnum``1(System.String)
  name.vb: ToEnum(Of T)(String)
  fullName: WeihanLi.Extensions.CoreExtension.ToEnum<T>(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToEnum(Of T)(String)
  nameWithType: CoreExtension.ToEnum<T>(string)
  nameWithType.vb: CoreExtension.ToEnum(Of T)(String)
- uid: WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan(System.DateTime)
  name: ToEpochTimeSpan(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan(System.DateTime)
  name.vb: ToEpochTimeSpan(Date)
  fullName: WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan(Date)
  nameWithType: CoreExtension.ToEpochTimeSpan(DateTime)
  nameWithType.vb: CoreExtension.ToEpochTimeSpan(Date)
- uid: WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan*
  name: ToEpochTimeSpan
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToEpochTimeSpan
  nameWithType: CoreExtension.ToEpochTimeSpan
- uid: WeihanLi.Extensions.CoreExtension.ToLower(System.Char,System.Globalization.CultureInfo)
  name: ToLower(char, CultureInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToLower(System.Char,System.Globalization.CultureInfo)
  name.vb: ToLower(Char, CultureInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ToLower(char, System.Globalization.CultureInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToLower(Char, System.Globalization.CultureInfo)
  nameWithType: CoreExtension.ToLower(char, CultureInfo)
  nameWithType.vb: CoreExtension.ToLower(Char, CultureInfo)
- uid: WeihanLi.Extensions.CoreExtension.ToLower(System.Char)
  name: ToLower(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToLower(System.Char)
  name.vb: ToLower(Char)
  fullName: WeihanLi.Extensions.CoreExtension.ToLower(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToLower(Char)
  nameWithType: CoreExtension.ToLower(char)
  nameWithType.vb: CoreExtension.ToLower(Char)
- uid: WeihanLi.Extensions.CoreExtension.ToLower*
  name: ToLower
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToLower
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToLower
  nameWithType: CoreExtension.ToLower
- uid: WeihanLi.Extensions.CoreExtension.ToLowerInvariant(System.Char)
  name: ToLowerInvariant(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToLowerInvariant(System.Char)
  name.vb: ToLowerInvariant(Char)
  fullName: WeihanLi.Extensions.CoreExtension.ToLowerInvariant(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToLowerInvariant(Char)
  nameWithType: CoreExtension.ToLowerInvariant(char)
  nameWithType.vb: CoreExtension.ToLowerInvariant(Char)
- uid: WeihanLi.Extensions.CoreExtension.ToLowerInvariant*
  name: ToLowerInvariant
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToLowerInvariant
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToLowerInvariant
  nameWithType: CoreExtension.ToLowerInvariant
- uid: WeihanLi.Extensions.CoreExtension.ToMemoryStream(System.Byte[])
  name: ToMemoryStream(byte[])
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToMemoryStream(System.Byte[])
  name.vb: ToMemoryStream(Byte())
  fullName: WeihanLi.Extensions.CoreExtension.ToMemoryStream(byte[])
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToMemoryStream(Byte())
  nameWithType: CoreExtension.ToMemoryStream(byte[])
  nameWithType.vb: CoreExtension.ToMemoryStream(Byte())
- uid: WeihanLi.Extensions.CoreExtension.ToMemoryStream*
  name: ToMemoryStream
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToMemoryStream
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToMemoryStream
  nameWithType: CoreExtension.ToMemoryStream
- uid: WeihanLi.Extensions.CoreExtension.ToMoney(System.Decimal)
  name: ToMoney(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToMoney(System.Decimal)
  name.vb: ToMoney(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.ToMoney(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToMoney(Decimal)
  nameWithType: CoreExtension.ToMoney(decimal)
  nameWithType.vb: CoreExtension.ToMoney(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.ToMoney(System.Double)
  name: ToMoney(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToMoney(System.Double)
  name.vb: ToMoney(Double)
  fullName: WeihanLi.Extensions.CoreExtension.ToMoney(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToMoney(Double)
  nameWithType: CoreExtension.ToMoney(double)
  nameWithType.vb: CoreExtension.ToMoney(Double)
- uid: WeihanLi.Extensions.CoreExtension.ToMoney*
  name: ToMoney
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToMoney
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToMoney
  nameWithType: CoreExtension.ToMoney
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault(System.Object,System.Type)
  name: ToOrDefault(object?, Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToOrDefault(System.Object,System.Type)
  name.vb: ToOrDefault(Object, Type)
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault(object?, System.Type)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToOrDefault(Object, System.Type)
  nameWithType: CoreExtension.ToOrDefault(object?, Type)
  nameWithType.vb: CoreExtension.ToOrDefault(Object, Type)
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault*
  name: ToOrDefault
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault
  nameWithType: CoreExtension.ToOrDefault
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,``0)
  name: ToOrDefault<T>(object?, T)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,``0)
  name.vb: ToOrDefault(Of T)(Object, T)
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault<T>(object?, T)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToOrDefault(Of T)(Object, T)
  nameWithType: CoreExtension.ToOrDefault<T>(object?, T)
  nameWithType.vb: CoreExtension.ToOrDefault(Of T)(Object, T)
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{``0})
  name: ToOrDefault<T>(object?, Func<T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{``0})
  name.vb: ToOrDefault(Of T)(Object, Func(Of T))
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault<T>(object?, System.Func<T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToOrDefault(Of T)(Object, System.Func(Of T))
  nameWithType: CoreExtension.ToOrDefault<T>(object?, Func<T>)
  nameWithType.vb: CoreExtension.ToOrDefault(Of T)(Object, Func(Of T))
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{System.Object,``0})
  name: ToOrDefault<T>(object?, Func<object?, T>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object,System.Func{System.Object,``0})
  name.vb: ToOrDefault(Of T)(Object, Func(Of Object, T))
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault<T>(object?, System.Func<object?, T>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToOrDefault(Of T)(Object, System.Func(Of Object, T))
  nameWithType: CoreExtension.ToOrDefault<T>(object?, Func<object?, T>)
  nameWithType.vb: CoreExtension.ToOrDefault(Of T)(Object, Func(Of Object, T))
- uid: WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object)
  name: ToOrDefault<T>(object?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToOrDefault``1(System.Object)
  name.vb: ToOrDefault(Of T)(Object)
  fullName: WeihanLi.Extensions.CoreExtension.ToOrDefault<T>(object?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToOrDefault(Of T)(Object)
  nameWithType: CoreExtension.ToOrDefault<T>(object?)
  nameWithType.vb: CoreExtension.ToOrDefault(Of T)(Object)
- uid: WeihanLi.Extensions.CoreExtension.ToSafeString(System.Object)
  name: ToSafeString(object?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToSafeString(System.Object)
  name.vb: ToSafeString(Object)
  fullName: WeihanLi.Extensions.CoreExtension.ToSafeString(object?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToSafeString(Object)
  nameWithType: CoreExtension.ToSafeString(object?)
  nameWithType.vb: CoreExtension.ToSafeString(Object)
- uid: WeihanLi.Extensions.CoreExtension.ToSafeString*
  name: ToSafeString
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToSafeString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToSafeString
  nameWithType: CoreExtension.ToSafeString
- uid: WeihanLi.Extensions.CoreExtension.ToStandardDateString(System.DateTime)
  name: ToStandardDateString(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToStandardDateString(System.DateTime)
  name.vb: ToStandardDateString(Date)
  fullName: WeihanLi.Extensions.CoreExtension.ToStandardDateString(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToStandardDateString(Date)
  nameWithType: CoreExtension.ToStandardDateString(DateTime)
  nameWithType.vb: CoreExtension.ToStandardDateString(Date)
- uid: WeihanLi.Extensions.CoreExtension.ToStandardDateString*
  name: ToStandardDateString
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToStandardDateString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToStandardDateString
  nameWithType: CoreExtension.ToStandardDateString
- uid: WeihanLi.Extensions.CoreExtension.ToStandardTimeString(System.DateTime)
  name: ToStandardTimeString(DateTime)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToStandardTimeString(System.DateTime)
  name.vb: ToStandardTimeString(Date)
  fullName: WeihanLi.Extensions.CoreExtension.ToStandardTimeString(System.DateTime)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToStandardTimeString(Date)
  nameWithType: CoreExtension.ToStandardTimeString(DateTime)
  nameWithType.vb: CoreExtension.ToStandardTimeString(Date)
- uid: WeihanLi.Extensions.CoreExtension.ToStandardTimeString*
  name: ToStandardTimeString
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToStandardTimeString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToStandardTimeString
  nameWithType: CoreExtension.ToStandardTimeString
- uid: WeihanLi.Extensions.CoreExtension.ToString(System.Boolean,System.String,System.String)
  name: ToString(bool, string, string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToString(System.Boolean,System.String,System.String)
  name.vb: ToString(Boolean, String, String)
  fullName: WeihanLi.Extensions.CoreExtension.ToString(bool, string, string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToString(Boolean, String, String)
  nameWithType: CoreExtension.ToString(bool, string, string)
  nameWithType.vb: CoreExtension.ToString(Boolean, String, String)
- uid: WeihanLi.Extensions.CoreExtension.ToString*
  name: ToString
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToString
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToString
  nameWithType: CoreExtension.ToString
- uid: WeihanLi.Extensions.CoreExtension.ToTitleCase(System.String,System.Globalization.CultureInfo)
  name: ToTitleCase(string, CultureInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToTitleCase(System.String,System.Globalization.CultureInfo)
  name.vb: ToTitleCase(String, CultureInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ToTitleCase(string, System.Globalization.CultureInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToTitleCase(String, System.Globalization.CultureInfo)
  nameWithType: CoreExtension.ToTitleCase(string, CultureInfo)
  nameWithType.vb: CoreExtension.ToTitleCase(String, CultureInfo)
- uid: WeihanLi.Extensions.CoreExtension.ToTitleCase(System.String)
  name: ToTitleCase(string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToTitleCase(System.String)
  name.vb: ToTitleCase(String)
  fullName: WeihanLi.Extensions.CoreExtension.ToTitleCase(string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToTitleCase(String)
  nameWithType: CoreExtension.ToTitleCase(string)
  nameWithType.vb: CoreExtension.ToTitleCase(String)
- uid: WeihanLi.Extensions.CoreExtension.ToTitleCase*
  name: ToTitleCase
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToTitleCase
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToTitleCase
  nameWithType: CoreExtension.ToTitleCase
- uid: WeihanLi.Extensions.CoreExtension.ToUpper(System.Char,System.Globalization.CultureInfo)
  name: ToUpper(char, CultureInfo)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToUpper(System.Char,System.Globalization.CultureInfo)
  name.vb: ToUpper(Char, CultureInfo)
  fullName: WeihanLi.Extensions.CoreExtension.ToUpper(char, System.Globalization.CultureInfo)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToUpper(Char, System.Globalization.CultureInfo)
  nameWithType: CoreExtension.ToUpper(char, CultureInfo)
  nameWithType.vb: CoreExtension.ToUpper(Char, CultureInfo)
- uid: WeihanLi.Extensions.CoreExtension.ToUpper(System.Char)
  name: ToUpper(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToUpper(System.Char)
  name.vb: ToUpper(Char)
  fullName: WeihanLi.Extensions.CoreExtension.ToUpper(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToUpper(Char)
  nameWithType: CoreExtension.ToUpper(char)
  nameWithType.vb: CoreExtension.ToUpper(Char)
- uid: WeihanLi.Extensions.CoreExtension.ToUpper*
  name: ToUpper
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToUpper
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToUpper
  nameWithType: CoreExtension.ToUpper
- uid: WeihanLi.Extensions.CoreExtension.ToUpperInvariant(System.Char)
  name: ToUpperInvariant(char)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.ToUpperInvariant(System.Char)
  name.vb: ToUpperInvariant(Char)
  fullName: WeihanLi.Extensions.CoreExtension.ToUpperInvariant(char)
  fullName.vb: WeihanLi.Extensions.CoreExtension.ToUpperInvariant(Char)
  nameWithType: CoreExtension.ToUpperInvariant(char)
  nameWithType.vb: CoreExtension.ToUpperInvariant(Char)
- uid: WeihanLi.Extensions.CoreExtension.ToUpperInvariant*
  name: ToUpperInvariant
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.ToUpperInvariant
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.ToUpperInvariant
  nameWithType: CoreExtension.ToUpperInvariant
- uid: WeihanLi.Extensions.CoreExtension.Truncate(System.Decimal)
  name: Truncate(decimal)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Truncate(System.Decimal)
  name.vb: Truncate(Decimal)
  fullName: WeihanLi.Extensions.CoreExtension.Truncate(decimal)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Truncate(Decimal)
  nameWithType: CoreExtension.Truncate(decimal)
  nameWithType.vb: CoreExtension.Truncate(Decimal)
- uid: WeihanLi.Extensions.CoreExtension.Truncate(System.Double)
  name: Truncate(double)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Truncate(System.Double)
  name.vb: Truncate(Double)
  fullName: WeihanLi.Extensions.CoreExtension.Truncate(double)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Truncate(Double)
  nameWithType: CoreExtension.Truncate(double)
  nameWithType.vb: CoreExtension.Truncate(Double)
- uid: WeihanLi.Extensions.CoreExtension.Truncate(System.String,System.Int32,System.String)
  name: Truncate(string, int, string)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Truncate(System.String,System.Int32,System.String)
  name.vb: Truncate(String, Integer, String)
  fullName: WeihanLi.Extensions.CoreExtension.Truncate(string, int, string)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Truncate(String, Integer, String)
  nameWithType: CoreExtension.Truncate(string, int, string)
  nameWithType.vb: CoreExtension.Truncate(String, Integer, String)
- uid: WeihanLi.Extensions.CoreExtension.Truncate(System.String,System.Int32)
  name: Truncate(string, int)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Truncate(System.String,System.Int32)
  name.vb: Truncate(String, Integer)
  fullName: WeihanLi.Extensions.CoreExtension.Truncate(string, int)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Truncate(String, Integer)
  nameWithType: CoreExtension.Truncate(string, int)
  nameWithType.vb: CoreExtension.Truncate(String, Integer)
- uid: WeihanLi.Extensions.CoreExtension.Truncate*
  name: Truncate
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Truncate
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Truncate
  nameWithType: CoreExtension.Truncate
- uid: WeihanLi.Extensions.CoreExtension.Try*
  name: Try
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Try
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Try
  nameWithType: CoreExtension.Try
- uid: WeihanLi.Extensions.CoreExtension.Try``1(``0,System.Action{``0},System.Action{``0})
  name: Try<TType>(TType, Action<TType>, Action<TType>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``1(``0,System.Action{``0},System.Action{``0})
  name.vb: Try(Of TType)(TType, Action(Of TType), Action(Of TType))
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType>(TType, System.Action<TType>, System.Action<TType>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType)(TType, System.Action(Of TType), System.Action(Of TType))
  nameWithType: CoreExtension.Try<TType>(TType, Action<TType>, Action<TType>)
  nameWithType.vb: CoreExtension.Try(Of TType)(TType, Action(Of TType), Action(Of TType))
- uid: WeihanLi.Extensions.CoreExtension.Try``1(``0,System.Action{``0})
  name: Try<TType>(TType, Action<TType>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``1(``0,System.Action{``0})
  name.vb: Try(Of TType)(TType, Action(Of TType))
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType>(TType, System.Action<TType>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType)(TType, System.Action(Of TType))
  nameWithType: CoreExtension.Try<TType>(TType, Action<TType>)
  nameWithType.vb: CoreExtension.Try(Of TType)(TType, Action(Of TType))
- uid: WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1,``1@)
  name: Try<TType, TResult>(TType, Func<TType, TResult>, TResult, out TResult)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1,``1@)
  name.vb: Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult, TResult)
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType, TResult>(TType, System.Func<TType, TResult>, TResult, out TResult)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType, TResult)(TType, System.Func(Of TType, TResult), TResult, TResult)
  nameWithType: CoreExtension.Try<TType, TResult>(TType, Func<TType, TResult>, TResult, out TResult)
  nameWithType.vb: CoreExtension.Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult, TResult)
- uid: WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1)
  name: Try<TType, TResult>(TType, Func<TType, TResult>, TResult)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1)
  name.vb: Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult)
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType, TResult>(TType, System.Func<TType, TResult>, TResult)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType, TResult)(TType, System.Func(Of TType, TResult), TResult)
  nameWithType: CoreExtension.Try<TType, TResult>(TType, Func<TType, TResult>, TResult)
  nameWithType.vb: CoreExtension.Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult)
- uid: WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1@)
  name: Try<TType, TResult>(TType, Func<TType, TResult>, out TResult?)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},``1@)
  name.vb: Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult)
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType, TResult>(TType, System.Func<TType, TResult>, out TResult?)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType, TResult)(TType, System.Func(Of TType, TResult), TResult)
  nameWithType: CoreExtension.Try<TType, TResult>(TType, Func<TType, TResult>, out TResult?)
  nameWithType.vb: CoreExtension.Try(Of TType, TResult)(TType, Func(Of TType, TResult), TResult)
- uid: WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1},``1@)
  name: Try<TType, TResult>(TType, Func<TType, TResult>, Func<TType, TResult>, out TResult)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1},``1@)
  name.vb: Try(Of TType, TResult)(TType, Func(Of TType, TResult), Func(Of TType, TResult), TResult)
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType, TResult>(TType, System.Func<TType, TResult>, System.Func<TType, TResult>, out TResult)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType, TResult)(TType, System.Func(Of TType, TResult), System.Func(Of TType, TResult), TResult)
  nameWithType: CoreExtension.Try<TType, TResult>(TType, Func<TType, TResult>, Func<TType, TResult>, out TResult)
  nameWithType.vb: CoreExtension.Try(Of TType, TResult)(TType, Func(Of TType, TResult), Func(Of TType, TResult), TResult)
- uid: WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1})
  name: Try<TType, TResult>(TType, Func<TType, TResult>, Func<TType, TResult>)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1})
  name.vb: Try(Of TType, TResult)(TType, Func(Of TType, TResult), Func(Of TType, TResult))
  fullName: WeihanLi.Extensions.CoreExtension.Try<TType, TResult>(TType, System.Func<TType, TResult>, System.Func<TType, TResult>)
  fullName.vb: WeihanLi.Extensions.CoreExtension.Try(Of TType, TResult)(TType, System.Func(Of TType, TResult), System.Func(Of TType, TResult))
  nameWithType: CoreExtension.Try<TType, TResult>(TType, Func<TType, TResult>, Func<TType, TResult>)
  nameWithType.vb: CoreExtension.Try(Of TType, TResult)(TType, Func(Of TType, TResult), Func(Of TType, TResult))
- uid: WeihanLi.Extensions.CoreExtension.Unwrap(System.Type)
  name: Unwrap(Type)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.Unwrap(System.Type)
  fullName: WeihanLi.Extensions.CoreExtension.Unwrap(System.Type)
  nameWithType: CoreExtension.Unwrap(Type)
- uid: WeihanLi.Extensions.CoreExtension.Unwrap*
  name: Unwrap
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.Unwrap
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.Unwrap
  nameWithType: CoreExtension.Unwrap
- uid: WeihanLi.Extensions.CoreExtension.UtcAgo(System.TimeSpan)
  name: UtcAgo(TimeSpan)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.UtcAgo(System.TimeSpan)
  fullName: WeihanLi.Extensions.CoreExtension.UtcAgo(System.TimeSpan)
  nameWithType: CoreExtension.UtcAgo(TimeSpan)
- uid: WeihanLi.Extensions.CoreExtension.UtcAgo*
  name: UtcAgo
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.UtcAgo
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.UtcAgo
  nameWithType: CoreExtension.UtcAgo
- uid: WeihanLi.Extensions.CoreExtension.UtcFromNow(System.TimeSpan)
  name: UtcFromNow(TimeSpan)
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: M:WeihanLi.Extensions.CoreExtension.UtcFromNow(System.TimeSpan)
  fullName: WeihanLi.Extensions.CoreExtension.UtcFromNow(System.TimeSpan)
  nameWithType: CoreExtension.UtcFromNow(TimeSpan)
- uid: WeihanLi.Extensions.CoreExtension.UtcFromNow*
  name: UtcFromNow
  href: api/WeihanLi.Extensions.CoreExtension.yml
  commentId: Overload:WeihanLi.Extensions.CoreExtension.UtcFromNow
  isSpec: "True"
  fullName: WeihanLi.Extensions.CoreExtension.UtcFromNow
  nameWithType: CoreExtension.UtcFromNow
- uid: WeihanLi.Extensions.CronExtension
  name: CronExtension
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: T:WeihanLi.Extensions.CronExtension
  fullName: WeihanLi.Extensions.CronExtension
  nameWithType: CronExtension
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeZoneInfo)
  name: GetNextOccurrence(CronExpression?, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: M:WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeZoneInfo)
  name.vb: GetNextOccurrence(CronExpression, TimeZoneInfo)
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression?, System.TimeZoneInfo)
  fullName.vb: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression, System.TimeZoneInfo)
  nameWithType: CronExtension.GetNextOccurrence(CronExpression?, TimeZoneInfo)
  nameWithType.vb: CronExtension.GetNextOccurrence(CronExpression, TimeZoneInfo)
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression)
  name: GetNextOccurrence(CronExpression?)
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: M:WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression)
  name.vb: GetNextOccurrence(CronExpression)
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression?)
  fullName.vb: WeihanLi.Extensions.CronExtension.GetNextOccurrence(WeihanLi.Common.Helpers.Cron.CronExpression)
  nameWithType: CronExtension.GetNextOccurrence(CronExpression?)
  nameWithType.vb: CronExtension.GetNextOccurrence(CronExpression)
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrence*
  name: GetNextOccurrence
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: Overload:WeihanLi.Extensions.CronExtension.GetNextOccurrence
  isSpec: "True"
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrence
  nameWithType: CronExtension.GetNextOccurrence
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeSpan,System.TimeZoneInfo)
  name: GetNextOccurrences(CronExpression, TimeSpan, TimeZoneInfo)
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: M:WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeSpan,System.TimeZoneInfo)
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression, System.TimeSpan, System.TimeZoneInfo)
  nameWithType: CronExtension.GetNextOccurrences(CronExpression, TimeSpan, TimeZoneInfo)
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeSpan)
  name: GetNextOccurrences(CronExpression, TimeSpan)
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: M:WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression,System.TimeSpan)
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrences(WeihanLi.Common.Helpers.Cron.CronExpression, System.TimeSpan)
  nameWithType: CronExtension.GetNextOccurrences(CronExpression, TimeSpan)
- uid: WeihanLi.Extensions.CronExtension.GetNextOccurrences*
  name: GetNextOccurrences
  href: api/WeihanLi.Extensions.CronExtension.yml
  commentId: Overload:WeihanLi.Extensions.CronExtension.GetNextOccurrences
  isSpec: "True"
  fullName: WeihanLi.Extensions.CronExtension.GetNextOccurrences
  nameWithType: CronExtension.GetNextOccurrences
- uid: WeihanLi.Extensions.DataExtension
  name: DataExtension
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: T:WeihanLi.Extensions.DataExtension
  fullName: WeihanLi.Extensions.DataExtension
  nameWithType: DataExtension
- uid: WeihanLi.Extensions.DataExtension.AttachDbParameters(System.Data.Common.DbCommand,System.Object)
  name: AttachDbParameters(DbCommand, object?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.AttachDbParameters(System.Data.Common.DbCommand,System.Object)
  name.vb: AttachDbParameters(DbCommand, Object)
  fullName: WeihanLi.Extensions.DataExtension.AttachDbParameters(System.Data.Common.DbCommand, object?)
  fullName.vb: WeihanLi.Extensions.DataExtension.AttachDbParameters(System.Data.Common.DbCommand, Object)
  nameWithType: DataExtension.AttachDbParameters(DbCommand, object?)
  nameWithType.vb: DataExtension.AttachDbParameters(DbCommand, Object)
- uid: WeihanLi.Extensions.DataExtension.AttachDbParameters*
  name: AttachDbParameters
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.AttachDbParameters
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.AttachDbParameters
  nameWithType: DataExtension.AttachDbParameters
- uid: WeihanLi.Extensions.DataExtension.ColumnToList*
  name: ColumnToList
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ColumnToList
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ColumnToList
  nameWithType: DataExtension.ColumnToList
- uid: WeihanLi.Extensions.DataExtension.ColumnToList``1(System.Data.DataTable,System.Int32)
  name: ColumnToList<T>(DataTable, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ColumnToList``1(System.Data.DataTable,System.Int32)
  name.vb: ColumnToList(Of T)(DataTable, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ColumnToList<T>(System.Data.DataTable, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ColumnToList(Of T)(System.Data.DataTable, Integer)
  nameWithType: DataExtension.ColumnToList<T>(DataTable, int)
  nameWithType.vb: DataExtension.ColumnToList(Of T)(DataTable, Integer)
- uid: WeihanLi.Extensions.DataExtension.CommandLogAction
  name: CommandLogAction
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: F:WeihanLi.Extensions.DataExtension.CommandLogAction
  fullName: WeihanLi.Extensions.DataExtension.CommandLogAction
  nameWithType: DataExtension.CommandLogAction
- uid: WeihanLi.Extensions.DataExtension.CommandLogFormatterFunc
  name: CommandLogFormatterFunc
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: F:WeihanLi.Extensions.DataExtension.CommandLogFormatterFunc
  fullName: WeihanLi.Extensions.DataExtension.CommandLogFormatterFunc
  nameWithType: DataExtension.CommandLogFormatterFunc
- uid: WeihanLi.Extensions.DataExtension.ContainsParam(System.Data.Common.DbParameterCollection,System.String)
  name: ContainsParam(DbParameterCollection, string)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ContainsParam(System.Data.Common.DbParameterCollection,System.String)
  name.vb: ContainsParam(DbParameterCollection, String)
  fullName: WeihanLi.Extensions.DataExtension.ContainsParam(System.Data.Common.DbParameterCollection, string)
  fullName.vb: WeihanLi.Extensions.DataExtension.ContainsParam(System.Data.Common.DbParameterCollection, String)
  nameWithType: DataExtension.ContainsParam(DbParameterCollection, string)
  nameWithType.vb: DataExtension.ContainsParam(DbParameterCollection, String)
- uid: WeihanLi.Extensions.DataExtension.ContainsParam*
  name: ContainsParam
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ContainsParam
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ContainsParam
  nameWithType: DataExtension.ContainsParam
- uid: WeihanLi.Extensions.DataExtension.EnsureOpen(System.Data.IDbConnection)
  name: EnsureOpen(IDbConnection)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.EnsureOpen(System.Data.IDbConnection)
  fullName: WeihanLi.Extensions.DataExtension.EnsureOpen(System.Data.IDbConnection)
  nameWithType: DataExtension.EnsureOpen(IDbConnection)
- uid: WeihanLi.Extensions.DataExtension.EnsureOpen*
  name: EnsureOpen
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.EnsureOpen
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.EnsureOpen
  nameWithType: DataExtension.EnsureOpen
- uid: WeihanLi.Extensions.DataExtension.EnsureOpenAsync(System.Data.Common.DbConnection)
  name: EnsureOpenAsync(DbConnection)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.EnsureOpenAsync(System.Data.Common.DbConnection)
  fullName: WeihanLi.Extensions.DataExtension.EnsureOpenAsync(System.Data.Common.DbConnection)
  nameWithType: DataExtension.EnsureOpenAsync(DbConnection)
- uid: WeihanLi.Extensions.DataExtension.EnsureOpenAsync*
  name: EnsureOpenAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.EnsureOpenAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.EnsureOpenAsync
  nameWithType: DataExtension.EnsureOpenAsync
- uid: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: Execute(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: Execute(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.Execute(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.Execute(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: Execute(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: Execute(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.Execute(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.Execute(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Int32)
  name: Execute(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: Execute(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.Execute(DbConnection, string, int)
  nameWithType.vb: DataExtension.Execute(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: Execute(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: Execute(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.Execute(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.Execute(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: Execute(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: Execute(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Execute(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.Execute(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.Execute(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Execute*
  name: Execute
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.Execute
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.Execute
  nameWithType: DataExtension.Execute
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: ExecuteAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: ExecuteAsync(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteAsync(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteAsync(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteAsync(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteAsync(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteAsync(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteAsync(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteAsync(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteAsync(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteAsync(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteAsync(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteAsync(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteAsync
  nameWithType: DataExtension.ExecuteAsync
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbCommand)
  name: ExecuteDataTable(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbCommand)
  nameWithType: DataExtension.ExecuteDataTable(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: ExecuteDataTable(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: ExecuteDataTable(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.ExecuteDataTable(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.ExecuteDataTable(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: ExecuteDataTable(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: ExecuteDataTable(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.ExecuteDataTable(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.ExecuteDataTable(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Int32)
  name: ExecuteDataTable(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: ExecuteDataTable(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.ExecuteDataTable(DbConnection, string, int)
  nameWithType.vb: DataExtension.ExecuteDataTable(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteDataTable(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteDataTable(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteDataTable(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteDataTable(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: ExecuteDataTable(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: ExecuteDataTable(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.ExecuteDataTable(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.ExecuteDataTable(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable*
  name: ExecuteDataTable
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteDataTable
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable
  nameWithType: DataExtension.ExecuteDataTable
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})
  name: ExecuteDataTable<T>(DbCommand, Func<DataTable, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,``0})
  name.vb: ExecuteDataTable(Of T)(DbCommand, Func(Of DataTable, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbCommand, System.Func<System.Data.DataTable, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbCommand, System.Func(Of System.Data.DataTable, T))
  nameWithType: DataExtension.ExecuteDataTable<T>(DbCommand, Func<DataTable, T>)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbCommand, Func(Of DataTable, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Func{System.Data.DataTable,``0},System.Int32)
  name: ExecuteDataTable<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, Func<DataTable, T>, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Func{System.Data.DataTable,``0},System.Int32)
  name.vb: ExecuteDataTable(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Func(Of DataTable, T), Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, System.Func<System.Data.DataTable, T>, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, System.Func(Of System.Data.DataTable, T), Integer)
  nameWithType: DataExtension.ExecuteDataTable<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, Func<DataTable, T>, int)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Func(Of DataTable, T), Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Func{System.Data.DataTable,``0})
  name: ExecuteDataTable<T>(DbConnection, string, CommandType, object?, Func<DataTable, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Func{System.Data.DataTable,``0})
  name.vb: ExecuteDataTable(Of T)(DbConnection, String, CommandType, Object, Func(Of DataTable, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Func<System.Data.DataTable, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Func(Of System.Data.DataTable, T))
  nameWithType: DataExtension.ExecuteDataTable<T>(DbConnection, string, CommandType, object?, Func<DataTable, T>)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbConnection, String, CommandType, Object, Func(Of DataTable, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Func{System.Data.DataTable,``0})
  name: ExecuteDataTable<T>(DbConnection, string, Func<DataTable, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Func{System.Data.DataTable,``0})
  name.vb: ExecuteDataTable(Of T)(DbConnection, String, Func(Of DataTable, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbConnection, string, System.Func<System.Data.DataTable, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbConnection, String, System.Func(Of System.Data.DataTable, T))
  nameWithType: DataExtension.ExecuteDataTable<T>(DbConnection, string, Func<DataTable, T>)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbConnection, String, Func(Of DataTable, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0})
  name: ExecuteDataTable<T>(DbConnection, string, object?, DbParameter[]?, Func<DataTable, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0})
  name.vb: ExecuteDataTable(Of T)(DbConnection, String, Object, DbParameter(), Func(Of DataTable, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbConnection, string, object?, System.Data.Common.DbParameter[]?, System.Func<System.Data.DataTable, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbConnection, String, Object, System.Data.Common.DbParameter(), System.Func(Of System.Data.DataTable, T))
  nameWithType: DataExtension.ExecuteDataTable<T>(DbConnection, string, object?, DbParameter[]?, Func<DataTable, T>)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbConnection, String, Object, DbParameter(), Func(Of DataTable, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Object,System.Func{System.Data.DataTable,``0})
  name: ExecuteDataTable<T>(DbConnection, string, object?, Func<DataTable, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTable``1(System.Data.Common.DbConnection,System.String,System.Object,System.Func{System.Data.DataTable,``0})
  name.vb: ExecuteDataTable(Of T)(DbConnection, String, Object, Func(Of DataTable, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTable<T>(System.Data.Common.DbConnection, string, object?, System.Func<System.Data.DataTable, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTable(Of T)(System.Data.Common.DbConnection, String, Object, System.Func(Of System.Data.DataTable, T))
  nameWithType: DataExtension.ExecuteDataTable<T>(DbConnection, string, object?, Func<DataTable, T>)
  nameWithType.vb: DataExtension.ExecuteDataTable(Of T)(DbConnection, String, Object, Func(Of DataTable, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteDataTableAsync(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteDataTableAsync(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteDataTableAsync(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync*
  name: ExecuteDataTableAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync
  nameWithType: DataExtension.ExecuteDataTableAsync
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbCommand, Func<DataTable, Task<T>>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.DataTable,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbCommand, Func(Of DataTable, Task(Of T)), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbCommand, System.Func<System.Data.DataTable, System.Threading.Tasks.Task<T>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbCommand, System.Func(Of System.Data.DataTable, System.Threading.Tasks.Task(Of T)), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbCommand, Func<DataTable, Task<T>>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbCommand, Func(Of DataTable, Task(Of T)), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Func{System.Data.DataTable,``0},System.Int32,System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, Func<DataTable, T>, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Func{System.Data.DataTable,``0},System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Func(Of DataTable, T), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, System.Func<System.Data.DataTable, T>, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, System.Func(Of System.Data.DataTable, T), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, Func<DataTable, T>, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Func(Of DataTable, T), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, Func<DataTable, T>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Func(Of DataTable, T), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Func<System.Data.DataTable, T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Func(Of System.Data.DataTable, T), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, Func<DataTable, T>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Func(Of DataTable, T), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, Func<DataTable, T>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, Func(Of DataTable, T), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Func<System.Data.DataTable, T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Func(Of System.Data.DataTable, T), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, CommandType, object?, Func<DataTable, T>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, CommandType, Object, Func(Of DataTable, T), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, Func<DataTable, T>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, Func(Of DataTable, T), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, System.Func<System.Data.DataTable, T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, System.Func(Of System.Data.DataTable, T), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, Func<DataTable, T>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, Func(Of DataTable, T), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, object?, DbParameter[]?, Func<DataTable, T>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[],System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, Object, DbParameter(), Func(Of DataTable, T), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, object?, System.Data.Common.DbParameter[]?, System.Func<System.Data.DataTable, T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, Object, System.Data.Common.DbParameter(), System.Func(Of System.Data.DataTable, T), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, object?, DbParameter[]?, Func<DataTable, T>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, Object, DbParameter(), Func(Of DataTable, T), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name: ExecuteDataTableAsync<T>(DbConnection, string, object?, Func<DataTable, T>, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Func{System.Data.DataTable,``0},System.Threading.CancellationToken)
  name.vb: ExecuteDataTableAsync(Of T)(DbConnection, String, Object, Func(Of DataTable, T), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync<T>(System.Data.Common.DbConnection, string, object?, System.Func<System.Data.DataTable, T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteDataTableAsync(Of T)(System.Data.Common.DbConnection, String, Object, System.Func(Of System.Data.DataTable, T), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteDataTableAsync<T>(DbConnection, string, object?, Func<DataTable, T>, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteDataTableAsync(Of T)(DbConnection, String, Object, Func(Of DataTable, T), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteExpandoObject(System.Data.Common.DbCommand)
  name: ExecuteExpandoObject(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteExpandoObject(System.Data.Common.DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteExpandoObject(System.Data.Common.DbCommand)
  nameWithType: DataExtension.ExecuteExpandoObject(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.ExecuteExpandoObject*
  name: ExecuteExpandoObject
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteExpandoObject
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteExpandoObject
  nameWithType: DataExtension.ExecuteExpandoObject
- uid: WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects(System.Data.Common.DbCommand)
  name: ExecuteExpandoObjects(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects(System.Data.Common.DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects(System.Data.Common.DbCommand)
  nameWithType: DataExtension.ExecuteExpandoObjects(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects*
  name: ExecuteExpandoObjects
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteExpandoObjects
  nameWithType: DataExtension.ExecuteExpandoObjects
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: ExecuteScalar(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: ExecuteScalar(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.ExecuteScalar(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.ExecuteScalar(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: ExecuteScalar(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: ExecuteScalar(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.ExecuteScalar(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.ExecuteScalar(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Int32)
  name: ExecuteScalar(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: ExecuteScalar(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.ExecuteScalar(DbConnection, string, int)
  nameWithType.vb: DataExtension.ExecuteScalar(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalar(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalar(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalar(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalar(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: ExecuteScalar(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: ExecuteScalar(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalar(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.ExecuteScalar(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.ExecuteScalar(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalar*
  name: ExecuteScalar
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalar
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalar
  nameWithType: DataExtension.ExecuteScalar
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarAsync(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarAsync(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarAsync(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalarAsync(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalarAsync(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalarAsync(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalarAsync(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarAsync(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarAsync(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarAsync(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync*
  name: ExecuteScalarAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalarAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarAsync
  nameWithType: DataExtension.ExecuteScalarAsync
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo*
  name: ExecuteScalarTo
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalarTo
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo
  nameWithType: DataExtension.ExecuteScalarTo
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbCommand,System.Func{System.Object,``0})
  name: ExecuteScalarTo<T>(DbCommand, Func<object?, T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbCommand,System.Func{System.Object,``0})
  name.vb: ExecuteScalarTo(Of T)(DbCommand, Func(Of Object, T))
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbCommand, System.Func<object?, T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbCommand, System.Func(Of Object, T))
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbCommand, Func<object?, T>)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbCommand, Func(Of Object, T))
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbCommand)
  name: ExecuteScalarTo<T>(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbCommand)
  name.vb: ExecuteScalarTo(Of T)(DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbCommand)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbCommand)
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbCommand)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: ExecuteScalarTo<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: ExecuteScalarTo(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object)
  name: ExecuteScalarTo<T>(DbConnection, string, CommandType, object?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object)
  name.vb: ExecuteScalarTo(Of T)(DbConnection, String, CommandType, Object)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object)
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbConnection, string, CommandType, object?)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbConnection, String, CommandType, Object)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalarTo<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalarTo(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Object)
  name: ExecuteScalarTo<T>(DbConnection, string, object?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String,System.Object)
  name.vb: ExecuteScalarTo(Of T)(DbConnection, String, Object)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbConnection, string, object?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbConnection, String, Object)
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbConnection, string, object?)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbConnection, String, Object)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String)
  name: ExecuteScalarTo<T>(DbConnection, string)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarTo``1(System.Data.Common.DbConnection,System.String)
  name.vb: ExecuteScalarTo(Of T)(DbConnection, String)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarTo<T>(System.Data.Common.DbConnection, string)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarTo(Of T)(System.Data.Common.DbConnection, String)
  nameWithType: DataExtension.ExecuteScalarTo<T>(DbConnection, string)
  nameWithType.vb: DataExtension.ExecuteScalarTo(Of T)(DbConnection, String)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync*
  name: ExecuteScalarToAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync
  nameWithType: DataExtension.ExecuteScalarToAsync
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbCommand, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbCommand, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, CommandType, object?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, CommandType, Object, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalarToAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbConnection, string, object?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, Object, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, Object, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, object?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, Object, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken)
  name: ExecuteScalarToAsync<T>(DbConnection, string, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync``1(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToAsync(Of T)(DbConnection, String, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync<T>(System.Data.Common.DbConnection, string, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToAsync(Of T)(System.Data.Common.DbConnection, String, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToAsync<T>(DbConnection, string, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToAsync(Of T)(DbConnection, String, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault*
  name: ExecuteScalarToOrDefault
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault
  nameWithType: DataExtension.ExecuteScalarToOrDefault
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbCommand)
  name: ExecuteScalarToOrDefault<T>(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbCommand)
  name.vb: ExecuteScalarToOrDefault(Of T)(DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbCommand)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbCommand)
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbCommand)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: ExecuteScalarToOrDefault<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: ExecuteScalarToOrDefault(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object)
  name: ExecuteScalarToOrDefault<T>(DbConnection, string, CommandType, object?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object)
  name.vb: ExecuteScalarToOrDefault(Of T)(DbConnection, String, CommandType, Object)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object)
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbConnection, string, CommandType, object?)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbConnection, String, CommandType, Object)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalarToOrDefault<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalarToOrDefault(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Object)
  name: ExecuteScalarToOrDefault<T>(DbConnection, string, object?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String,System.Object)
  name.vb: ExecuteScalarToOrDefault(Of T)(DbConnection, String, Object)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbConnection, string, object?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbConnection, String, Object)
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbConnection, string, object?)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbConnection, String, Object)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String)
  name: ExecuteScalarToOrDefault<T>(DbConnection, string)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault``1(System.Data.Common.DbConnection,System.String)
  name.vb: ExecuteScalarToOrDefault(Of T)(DbConnection, String)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault<T>(System.Data.Common.DbConnection, string)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefault(Of T)(System.Data.Common.DbConnection, String)
  nameWithType: DataExtension.ExecuteScalarToOrDefault<T>(DbConnection, string)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefault(Of T)(DbConnection, String)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync*
  name: ExecuteScalarToOrDefaultAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbCommand, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbCommand, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CommandType, object?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CommandType, Object, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, object?, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, Object, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, object?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, Object, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, object?, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, Object, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken)
  name: ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync``1(System.Data.Common.DbConnection,System.String,System.Threading.CancellationToken)
  name.vb: ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync<T>(System.Data.Common.DbConnection, string, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(System.Data.Common.DbConnection, String, System.Threading.CancellationToken)
  nameWithType: DataExtension.ExecuteScalarToOrDefaultAsync<T>(DbConnection, string, CancellationToken)
  nameWithType.vb: DataExtension.ExecuteScalarToOrDefaultAsync(Of T)(DbConnection, String, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbCommand)
  name: Fetch(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbCommand)
  nameWithType: DataExtension.Fetch(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: Fetch(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: Fetch(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.Fetch(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.Fetch(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: Fetch(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: Fetch(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.Fetch(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.Fetch(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Int32)
  name: Fetch(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: Fetch(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.Fetch(DbConnection, string, int)
  nameWithType.vb: DataExtension.Fetch(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: Fetch(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: Fetch(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.Fetch(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.Fetch(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: Fetch(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: Fetch(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.Fetch(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.Fetch(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch*
  name: Fetch
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.Fetch
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.Fetch
  nameWithType: DataExtension.Fetch
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbCommand)
  name: Fetch<T>(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbCommand)
  name.vb: Fetch(Of T)(DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbCommand)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbCommand)
  nameWithType: DataExtension.Fetch<T>(DbCommand)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: Fetch<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: Fetch(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.Fetch<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name: Fetch<T>(DbConnection, string, CommandType, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name.vb: Fetch(Of T)(DbConnection, String, CommandType, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer)
  nameWithType: DataExtension.Fetch<T>(DbConnection, string, CommandType, object?, int)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbConnection, String, CommandType, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name: Fetch<T>(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: Fetch(Of T)(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.Fetch<T>(DbConnection, string, int)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: Fetch<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: Fetch(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.Fetch<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: Fetch<T>(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Fetch``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: Fetch(Of T)(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Fetch<T>(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Fetch(Of T)(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.Fetch<T>(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.Fetch(Of T)(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: FetchAsync(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: FetchAsync(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: FetchAsync(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.FetchAsync(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.FetchAsync(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync*
  name: FetchAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.FetchAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync
  nameWithType: DataExtension.FetchAsync
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbCommand, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbCommand, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: FetchAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: FetchAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: FetchAsync<T>(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.FetchAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: FetchAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.FetchAsync<T>(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.FetchAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.FetchAsync<T>(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.FetchAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.IsConnectionOpen(System.Data.IDbConnection)
  name: IsConnectionOpen(IDbConnection)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.IsConnectionOpen(System.Data.IDbConnection)
  fullName: WeihanLi.Extensions.DataExtension.IsConnectionOpen(System.Data.IDbConnection)
  nameWithType: DataExtension.IsConnectionOpen(IDbConnection)
- uid: WeihanLi.Extensions.DataExtension.IsConnectionOpen*
  name: IsConnectionOpen
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.IsConnectionOpen
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.IsConnectionOpen
  nameWithType: DataExtension.IsConnectionOpen
- uid: WeihanLi.Extensions.DataExtension.QueryColumn*
  name: QueryColumn
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.QueryColumn
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn
  nameWithType: DataExtension.QueryColumn
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32)
  name: QueryColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32)
  name.vb: QueryColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, Integer)
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer)
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: QueryColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: QueryColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name: QueryColumn<T>(DbConnection, string, CommandType, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name.vb: QueryColumn(Of T)(DbConnection, String, CommandType, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer)
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, CommandType, object?, int)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, CommandType, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name: QueryColumn<T>(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: QueryColumn(Of T)(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, int)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name: QueryColumn<T>(DbConnection, string, object?, int, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name.vb: QueryColumn(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, object?, int, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, Object, Integer, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, object?, int, params DbParameter[]?)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: QueryColumn<T>(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: QueryColumn(Of T)(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumn<T>(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumn(Of T)(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.QueryColumn<T>(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.QueryColumn(Of T)(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync*
  name: QueryColumnAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.QueryColumnAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync
  nameWithType: DataExtension.QueryColumnAsync
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: QueryColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32,System.Threading.CancellationToken)
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int, CancellationToken)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name: QueryColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: QueryColumnAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: QueryColumnAsync<T>(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name: QueryColumnAsync<T>(DbConnection, string, object?, int, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, object?, int, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, object?, int, params DbParameter[]?)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: QueryColumnAsync<T>(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.QueryColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: QueryColumnAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.QueryColumnAsync<T>(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.QueryColumnAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.QueryColumnAsync<T>(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.QueryColumnAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbCommand)
  name: Select(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbCommand)
  nameWithType: DataExtension.Select(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: Select(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: Select(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.Select(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.Select(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name: Select(DbConnection, string, CommandType, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name.vb: Select(DbConnection, String, CommandType, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer)
  nameWithType: DataExtension.Select(DbConnection, string, CommandType, object?, int)
  nameWithType.vb: DataExtension.Select(DbConnection, String, CommandType, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Int32)
  name: Select(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: Select(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.Select(DbConnection, string, int)
  nameWithType.vb: DataExtension.Select(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: Select(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: Select(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.Select(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.Select(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: Select(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: Select(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.Select(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.Select(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select*
  name: Select
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.Select
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.Select
  nameWithType: DataExtension.Select
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbCommand)
  name: Select<T>(DbCommand)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbCommand)
  name.vb: Select(Of T)(DbCommand)
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbCommand)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbCommand)
  nameWithType: DataExtension.Select<T>(DbCommand)
  nameWithType.vb: DataExtension.Select(Of T)(DbCommand)
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name: Select<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32)
  name.vb: Select(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer)
  nameWithType: DataExtension.Select<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int)
  nameWithType.vb: DataExtension.Select(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name: Select<T>(DbConnection, string, CommandType, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name.vb: Select(Of T)(DbConnection, String, CommandType, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer)
  nameWithType: DataExtension.Select<T>(DbConnection, string, CommandType, object?, int)
  nameWithType.vb: DataExtension.Select(Of T)(DbConnection, String, CommandType, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name: Select<T>(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: Select(Of T)(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.Select<T>(DbConnection, string, int)
  nameWithType.vb: DataExtension.Select(Of T)(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: Select<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: Select(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.Select<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.Select(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: Select<T>(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.Select``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: Select(Of T)(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.Select<T>(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.Select(Of T)(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.Select<T>(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.Select(Of T)(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: SelectAsync(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name: SelectAsync(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: SelectAsync(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: SelectAsync(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.SelectAsync(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync*
  name: SelectAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.SelectAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync
  nameWithType: DataExtension.SelectAsync
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbCommand, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbCommand,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbCommand, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbCommand, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbCommand, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbCommand, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name: SelectAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Data.Common.DbParameter[])
  name.vb: SelectAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, object?, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, Object, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, object?, params DbParameter[]?)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, Object, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectAsync<T>(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectAsync<T>(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectAsync<T>(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectColumn*
  name: SelectColumn
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.SelectColumn
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn
  nameWithType: DataExtension.SelectColumn
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32)
  name: SelectColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32)
  name.vb: SelectColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, Integer)
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name: SelectColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32)
  name.vb: SelectColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer)
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name: SelectColumn<T>(DbConnection, string, CommandType, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32)
  name.vb: SelectColumn(Of T)(DbConnection, String, CommandType, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer)
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, CommandType, object?, int)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, CommandType, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name: SelectColumn<T>(DbConnection, string, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Int32)
  name.vb: SelectColumn(Of T)(DbConnection, String, Integer)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, Integer)
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, int)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name: SelectColumn<T>(DbConnection, string, object?, int, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name.vb: SelectColumn(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, object?, int, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, Object, Integer, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, object?, int, params DbParameter[]?)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name: SelectColumn<T>(DbConnection, string, object?, int)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumn``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32)
  name.vb: SelectColumn(Of T)(DbConnection, String, Object, Integer)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumn<T>(System.Data.Common.DbConnection, string, object?, int)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumn(Of T)(System.Data.Common.DbConnection, String, Object, Integer)
  nameWithType: DataExtension.SelectColumn<T>(DbConnection, string, object?, int)
  nameWithType.vb: DataExtension.SelectColumn(Of T)(DbConnection, String, Object, Integer)
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync*
  name: SelectColumnAsync
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.SelectColumnAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync
  nameWithType: DataExtension.SelectColumnAsync
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: SelectColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction,System.Int32,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, System.Data.Common.DbTransaction?, int, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), System.Data.Common.DbTransaction, Integer, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, DbTransaction?, int, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), DbTransaction, Integer, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name: SelectColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Data.Common.DbParameter[],System.Int32,System.Threading.CancellationToken)
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, System.Data.Common.DbParameter[]?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, System.Data.Common.DbParameter(), Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, CommandType, object?, DbParameter[]?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, DbParameter(), Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectColumnAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, System.Data.CommandType, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, System.Data.CommandType, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, CommandType, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, CommandType, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name: SelectColumnAsync<T>(DbConnection, string, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name: SelectColumnAsync<T>(DbConnection, string, object?, int, params DbParameter[]?)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Data.Common.DbParameter[])
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, object?, int, params System.Data.Common.DbParameter[]?)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, ParamArray System.Data.Common.DbParameter())
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, object?, int, params DbParameter[]?)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, Object, Integer, ParamArray DbParameter())
- uid: WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name: SelectColumnAsync<T>(DbConnection, string, object?, int, CancellationToken)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.SelectColumnAsync``1(System.Data.Common.DbConnection,System.String,System.Object,System.Int32,System.Threading.CancellationToken)
  name.vb: SelectColumnAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
  fullName: WeihanLi.Extensions.DataExtension.SelectColumnAsync<T>(System.Data.Common.DbConnection, string, object?, int, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.DataExtension.SelectColumnAsync(Of T)(System.Data.Common.DbConnection, String, Object, Integer, System.Threading.CancellationToken)
  nameWithType: DataExtension.SelectColumnAsync<T>(DbConnection, string, object?, int, CancellationToken)
  nameWithType.vb: DataExtension.SelectColumnAsync(Of T)(DbConnection, String, Object, Integer, CancellationToken)
- uid: WeihanLi.Extensions.DataExtension.ToDataTable(System.Data.IDataReader)
  name: ToDataTable(IDataReader)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToDataTable(System.Data.IDataReader)
  fullName: WeihanLi.Extensions.DataExtension.ToDataTable(System.Data.IDataReader)
  nameWithType: DataExtension.ToDataTable(IDataReader)
- uid: WeihanLi.Extensions.DataExtension.ToDataTable*
  name: ToDataTable
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToDataTable
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToDataTable
  nameWithType: DataExtension.ToDataTable
- uid: WeihanLi.Extensions.DataExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  name: ToDataTable<T>(IEnumerable<T>)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  name.vb: ToDataTable(Of T)(IEnumerable(Of T))
  fullName: WeihanLi.Extensions.DataExtension.ToDataTable<T>(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToDataTable(Of T)(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: DataExtension.ToDataTable<T>(IEnumerable<T>)
  nameWithType.vb: DataExtension.ToDataTable(Of T)(IEnumerable(Of T))
- uid: WeihanLi.Extensions.DataExtension.ToDbType(System.Type)
  name: ToDbType(Type)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToDbType(System.Type)
  fullName: WeihanLi.Extensions.DataExtension.ToDbType(System.Type)
  nameWithType: DataExtension.ToDbType(Type)
- uid: WeihanLi.Extensions.DataExtension.ToDbType*
  name: ToDbType
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToDbType
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToDbType
  nameWithType: DataExtension.ToDbType
- uid: WeihanLi.Extensions.DataExtension.ToEntities*
  name: ToEntities
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToEntities
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToEntities
  nameWithType: DataExtension.ToEntities
- uid: WeihanLi.Extensions.DataExtension.ToEntities``1(System.Data.DataTable)
  name: ToEntities<T>(DataTable)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToEntities``1(System.Data.DataTable)
  name.vb: ToEntities(Of T)(DataTable)
  fullName: WeihanLi.Extensions.DataExtension.ToEntities<T>(System.Data.DataTable)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToEntities(Of T)(System.Data.DataTable)
  nameWithType: DataExtension.ToEntities<T>(DataTable)
  nameWithType.vb: DataExtension.ToEntities(Of T)(DataTable)
- uid: WeihanLi.Extensions.DataExtension.ToEntities``1(System.Data.IDataReader)
  name: ToEntities<T>(IDataReader)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToEntities``1(System.Data.IDataReader)
  name.vb: ToEntities(Of T)(IDataReader)
  fullName: WeihanLi.Extensions.DataExtension.ToEntities<T>(System.Data.IDataReader)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToEntities(Of T)(System.Data.IDataReader)
  nameWithType: DataExtension.ToEntities<T>(IDataReader)
  nameWithType.vb: DataExtension.ToEntities(Of T)(IDataReader)
- uid: WeihanLi.Extensions.DataExtension.ToEntity*
  name: ToEntity
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToEntity
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToEntity
  nameWithType: DataExtension.ToEntity
- uid: WeihanLi.Extensions.DataExtension.ToEntity``1(System.Data.DataRow)
  name: ToEntity<T>(DataRow)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToEntity``1(System.Data.DataRow)
  name.vb: ToEntity(Of T)(DataRow)
  fullName: WeihanLi.Extensions.DataExtension.ToEntity<T>(System.Data.DataRow)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToEntity(Of T)(System.Data.DataRow)
  nameWithType: DataExtension.ToEntity<T>(DataRow)
  nameWithType.vb: DataExtension.ToEntity(Of T)(DataRow)
- uid: WeihanLi.Extensions.DataExtension.ToEntity``1(System.Data.IDataReader,System.Boolean)
  name: ToEntity<T>(IDataReader, bool)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToEntity``1(System.Data.IDataReader,System.Boolean)
  name.vb: ToEntity(Of T)(IDataReader, Boolean)
  fullName: WeihanLi.Extensions.DataExtension.ToEntity<T>(System.Data.IDataReader, bool)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToEntity(Of T)(System.Data.IDataReader, Boolean)
  nameWithType: DataExtension.ToEntity<T>(IDataReader, bool)
  nameWithType.vb: DataExtension.ToEntity(Of T)(IDataReader, Boolean)
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.DataRow)
  name: ToExpandoObject(DataRow)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.DataRow)
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.DataRow)
  nameWithType: DataExtension.ToExpandoObject(DataRow)
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.IDataReader,System.Boolean)
  name: ToExpandoObject(IDataReader, bool)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.IDataReader,System.Boolean)
  name.vb: ToExpandoObject(IDataReader, Boolean)
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.IDataReader, bool)
  fullName.vb: WeihanLi.Extensions.DataExtension.ToExpandoObject(System.Data.IDataReader, Boolean)
  nameWithType: DataExtension.ToExpandoObject(IDataReader, bool)
  nameWithType.vb: DataExtension.ToExpandoObject(IDataReader, Boolean)
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObject*
  name: ToExpandoObject
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToExpandoObject
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObject
  nameWithType: DataExtension.ToExpandoObject
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.DataTable)
  name: ToExpandoObjects(DataTable)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.DataTable)
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.DataTable)
  nameWithType: DataExtension.ToExpandoObjects(DataTable)
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.IDataReader)
  name: ToExpandoObjects(IDataReader)
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: M:WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.IDataReader)
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObjects(System.Data.IDataReader)
  nameWithType: DataExtension.ToExpandoObjects(IDataReader)
- uid: WeihanLi.Extensions.DataExtension.ToExpandoObjects*
  name: ToExpandoObjects
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: Overload:WeihanLi.Extensions.DataExtension.ToExpandoObjects
  isSpec: "True"
  fullName: WeihanLi.Extensions.DataExtension.ToExpandoObjects
  nameWithType: DataExtension.ToExpandoObjects
- uid: WeihanLi.Extensions.DataExtension.TypeMap
  name: TypeMap
  href: api/WeihanLi.Extensions.DataExtension.yml
  commentId: F:WeihanLi.Extensions.DataExtension.TypeMap
  fullName: WeihanLi.Extensions.DataExtension.TypeMap
  nameWithType: DataExtension.TypeMap
- uid: WeihanLi.Extensions.DictionaryExtension
  name: DictionaryExtension
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: T:WeihanLi.Extensions.DictionaryExtension
  fullName: WeihanLi.Extensions.DictionaryExtension
  nameWithType: DictionaryExtension
- uid: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey*
  name: AddIfNotContainsKey
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey
  nameWithType: DictionaryExtension.AddIfNotContainsKey
- uid: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name: AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name.vb: AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, TValue)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue)
  nameWithType: DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})
  name: AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})
  name.vb: AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TKey, TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TKey, TValue))
  nameWithType: DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>)
  nameWithType.vb: DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  name: AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})
  name.vb: AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TValue))
  nameWithType: DictionaryExtension.AddIfNotContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>)
  nameWithType.vb: DictionaryExtension.AddIfNotContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate*
  name: AddOrUpdate
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.AddOrUpdate
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate
  nameWithType: DictionaryExtension.AddOrUpdate
- uid: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})
  name: AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})
  name.vb: AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, TValue, System.Func<TKey, TValue, TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue, System.Func(Of TKey, TValue, TValue))
  nameWithType: DictionaryExtension.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>)
  nameWithType.vb: DictionaryExtension.AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue, Func(Of TKey, TValue, TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name: AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name.vb: AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, TValue)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue)
  nameWithType: DictionaryExtension.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryExtension.AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  name: AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  name.vb: AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.AddOrUpdate(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  nameWithType: DictionaryExtension.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  nameWithType.vb: DictionaryExtension.AddOrUpdate(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.ContainsAllKey*
  name: ContainsAllKey
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ContainsAllKey
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ContainsAllKey
  nameWithType: DictionaryExtension.ContainsAllKey
- uid: WeihanLi.Extensions.DictionaryExtension.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  name: ContainsAllKey<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[])
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  name.vb: ContainsAllKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), ParamArray TKey())
  fullName: WeihanLi.Extensions.DictionaryExtension.ContainsAllKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, params TKey[])
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ContainsAllKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), ParamArray TKey())
  nameWithType: DictionaryExtension.ContainsAllKey<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[])
  nameWithType.vb: DictionaryExtension.ContainsAllKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), ParamArray TKey())
- uid: WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey*
  name: ContainsAnyKey
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey
  nameWithType: DictionaryExtension.ContainsAnyKey
- uid: WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  name: ContainsAnyKey<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[])
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])
  name.vb: ContainsAnyKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), ParamArray TKey())
  fullName: WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, params TKey[])
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ContainsAnyKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), ParamArray TKey())
  nameWithType: DictionaryExtension.ContainsAnyKey<TKey, TValue>(IDictionary<TKey, TValue>, params TKey[])
  nameWithType.vb: DictionaryExtension.ContainsAnyKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), ParamArray TKey())
- uid: WeihanLi.Extensions.DictionaryExtension.GetOrAdd*
  name: GetOrAdd
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.GetOrAdd
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.GetOrAdd
  nameWithType: DictionaryExtension.GetOrAdd
- uid: WeihanLi.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
  fullName: WeihanLi.Extensions.DictionaryExtension.GetOrAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, TValue)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.GetOrAdd(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue)
  nameWithType: DictionaryExtension.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryExtension.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue)
- uid: WeihanLi.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})
  name: GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})
  name.vb: GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.GetOrAdd<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, System.Func<TKey, TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.GetOrAdd(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, System.Func(Of TKey, TValue))
  nameWithType: DictionaryExtension.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>)
  nameWithType.vb: DictionaryExtension.GetOrAdd(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, Func(Of TKey, TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey*
  name: RemoveIfContainsKey
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey
  nameWithType: DictionaryExtension.RemoveIfContainsKey
- uid: WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  name: RemoveIfContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)
  name.vb: RemoveIfContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
  fullName: WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.RemoveIfContainsKey(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey)
  nameWithType: DictionaryExtension.RemoveIfContainsKey<TKey, TValue>(IDictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryExtension.RemoveIfContainsKey(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey)
- uid: WeihanLi.Extensions.DictionaryExtension.ToDataTable(System.Collections.Generic.IDictionary{System.String,System.Object})
  name: ToDataTable(IDictionary<string, object>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToDataTable(System.Collections.Generic.IDictionary{System.String,System.Object})
  name.vb: ToDataTable(IDictionary(Of String, Object))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDataTable(System.Collections.Generic.IDictionary<string, object>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToDataTable(System.Collections.Generic.IDictionary(Of String, Object))
  nameWithType: DictionaryExtension.ToDataTable(IDictionary<string, object>)
  nameWithType.vb: DictionaryExtension.ToDataTable(IDictionary(Of String, Object))
- uid: WeihanLi.Extensions.DictionaryExtension.ToDataTable*
  name: ToDataTable
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToDataTable
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDataTable
  nameWithType: DictionaryExtension.ToDataTable
- uid: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbCommand)
  name: ToDbParameters(IDictionary<string, object>, DbCommand)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbCommand)
  name.vb: ToDbParameters(IDictionary(Of String, Object), DbCommand)
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary<string, object>, System.Data.Common.DbCommand)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary(Of String, Object), System.Data.Common.DbCommand)
  nameWithType: DictionaryExtension.ToDbParameters(IDictionary<string, object>, DbCommand)
  nameWithType.vb: DictionaryExtension.ToDbParameters(IDictionary(Of String, Object), DbCommand)
- uid: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbConnection)
  name: ToDbParameters(IDictionary<string, object>, DbConnection)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbConnection)
  name.vb: ToDbParameters(IDictionary(Of String, Object), DbConnection)
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary<string, object>, System.Data.Common.DbConnection)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToDbParameters(System.Collections.Generic.IDictionary(Of String, Object), System.Data.Common.DbConnection)
  nameWithType: DictionaryExtension.ToDbParameters(IDictionary<string, object>, DbConnection)
  nameWithType.vb: DictionaryExtension.ToDbParameters(IDictionary(Of String, Object), DbConnection)
- uid: WeihanLi.Extensions.DictionaryExtension.ToDbParameters*
  name: ToDbParameters
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToDbParameters
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDbParameters
  nameWithType: DictionaryExtension.ToDbParameters
- uid: WeihanLi.Extensions.DictionaryExtension.ToDictionary*
  name: ToDictionary
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToDictionary
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDictionary
  nameWithType: DictionaryExtension.ToDictionary
- uid: WeihanLi.Extensions.DictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  name: ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  name.vb: ToDictionary(Of TKey, TValue)(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToDictionary(Of TKey, TValue)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  nameWithType: DictionaryExtension.ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>)
  nameWithType.vb: DictionaryExtension.ToDictionary(Of TKey, TValue)(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
- uid: WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair(System.Collections.Specialized.NameValueCollection)
  name: ToKeyValuePair(NameValueCollection?)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair(System.Collections.Specialized.NameValueCollection)
  name.vb: ToKeyValuePair(NameValueCollection)
  fullName: WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair(System.Collections.Specialized.NameValueCollection?)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair(System.Collections.Specialized.NameValueCollection)
  nameWithType: DictionaryExtension.ToKeyValuePair(NameValueCollection?)
  nameWithType.vb: DictionaryExtension.ToKeyValuePair(NameValueCollection)
- uid: WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair*
  name: ToKeyValuePair
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToKeyValuePair
  nameWithType: DictionaryExtension.ToKeyValuePair
- uid: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})
  name: ToNameValueCollection(IDictionary<string, string>?)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})
  name.vb: ToNameValueCollection(IDictionary(Of String, String))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IDictionary<string, string>?)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IDictionary(Of String, String))
  nameWithType: DictionaryExtension.ToNameValueCollection(IDictionary<string, string>?)
  nameWithType.vb: DictionaryExtension.ToNameValueCollection(IDictionary(Of String, String))
- uid: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: ToNameValueCollection(IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: ToNameValueCollection(IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: DictionaryExtension.ToNameValueCollection(IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: DictionaryExtension.ToNameValueCollection(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection*
  name: ToNameValueCollection
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToNameValueCollection
  nameWithType: DictionaryExtension.ToNameValueCollection
- uid: WeihanLi.Extensions.DictionaryExtension.ToQueryString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: ToQueryString(IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToQueryString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: ToQueryString(IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToQueryString(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToQueryString(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: DictionaryExtension.ToQueryString(IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: DictionaryExtension.ToQueryString(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.DictionaryExtension.ToQueryString*
  name: ToQueryString
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToQueryString
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToQueryString
  nameWithType: DictionaryExtension.ToQueryString
- uid: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary*
  name: ToSortedDictionary
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary
  nameWithType: DictionaryExtension.ToSortedDictionary
- uid: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})
  name: ToSortedDictionary<TKey, TValue>(IDictionary<TKey, TValue>, IComparer<TKey>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})
  name.vb: ToSortedDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue), IComparer(Of TKey))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IComparer<TKey>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IComparer(Of TKey))
  nameWithType: DictionaryExtension.ToSortedDictionary<TKey, TValue>(IDictionary<TKey, TValue>, IComparer<TKey>)
  nameWithType.vb: DictionaryExtension.ToSortedDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue), IComparer(Of TKey))
- uid: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  name: ToSortedDictionary<TKey, TValue>(IDictionary<TKey, TValue>)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})
  name.vb: ToSortedDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue))
  fullName: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.ToSortedDictionary(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue))
  nameWithType: DictionaryExtension.ToSortedDictionary<TKey, TValue>(IDictionary<TKey, TValue>)
  nameWithType.vb: DictionaryExtension.ToSortedDictionary(Of TKey, TValue)(IDictionary(Of TKey, TValue))
- uid: WeihanLi.Extensions.DictionaryExtension.TryGetValue*
  name: TryGetValue
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: Overload:WeihanLi.Extensions.DictionaryExtension.TryGetValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.DictionaryExtension.TryGetValue
  nameWithType: DictionaryExtension.TryGetValue
- uid: WeihanLi.Extensions.DictionaryExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@,``1)
  name: TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, out TValue, TValue)
  href: api/WeihanLi.Extensions.DictionaryExtension.yml
  commentId: M:WeihanLi.Extensions.DictionaryExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@,``1)
  name.vb: TryGetValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue, TValue)
  fullName: WeihanLi.Extensions.DictionaryExtension.TryGetValue<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>, TKey, out TValue, TValue)
  fullName.vb: WeihanLi.Extensions.DictionaryExtension.TryGetValue(Of TKey, TValue)(System.Collections.Generic.IDictionary(Of TKey, TValue), TKey, TValue, TValue)
  nameWithType: DictionaryExtension.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey, out TValue, TValue)
  nameWithType.vb: DictionaryExtension.TryGetValue(Of TKey, TValue)(IDictionary(Of TKey, TValue), TKey, TValue, TValue)
- uid: WeihanLi.Extensions.Dump
  name: WeihanLi.Extensions.Dump
  href: api/WeihanLi.Extensions.Dump.yml
  commentId: N:WeihanLi.Extensions.Dump
  fullName: WeihanLi.Extensions.Dump
  nameWithType: WeihanLi.Extensions.Dump
- uid: WeihanLi.Extensions.Dump.DumpExtension
  name: DumpExtension
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: T:WeihanLi.Extensions.Dump.DumpExtension
  fullName: WeihanLi.Extensions.Dump.DumpExtension
  nameWithType: DumpExtension
- uid: WeihanLi.Extensions.Dump.DumpExtension.Dump*
  name: Dump
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: Overload:WeihanLi.Extensions.Dump.DumpExtension.Dump
  isSpec: "True"
  fullName: WeihanLi.Extensions.Dump.DumpExtension.Dump
  nameWithType: DumpExtension.Dump
- uid: WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0,System.Action{System.String},System.Func{``0,System.String})
  name: Dump<T>(T, Action<string>, Func<T, string>)
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: M:WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0,System.Action{System.String},System.Func{``0,System.String})
  name.vb: Dump(Of T)(T, Action(Of String), Func(Of T, String))
  fullName: WeihanLi.Extensions.Dump.DumpExtension.Dump<T>(T, System.Action<string>, System.Func<T, string>)
  fullName.vb: WeihanLi.Extensions.Dump.DumpExtension.Dump(Of T)(T, System.Action(Of String), System.Func(Of T, String))
  nameWithType: DumpExtension.Dump<T>(T, Action<string>, Func<T, string>)
  nameWithType.vb: DumpExtension.Dump(Of T)(T, Action(Of String), Func(Of T, String))
- uid: WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0,System.Action{System.String})
  name: Dump<T>(T, Action<string>)
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: M:WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0,System.Action{System.String})
  name.vb: Dump(Of T)(T, Action(Of String))
  fullName: WeihanLi.Extensions.Dump.DumpExtension.Dump<T>(T, System.Action<string>)
  fullName.vb: WeihanLi.Extensions.Dump.DumpExtension.Dump(Of T)(T, System.Action(Of String))
  nameWithType: DumpExtension.Dump<T>(T, Action<string>)
  nameWithType.vb: DumpExtension.Dump(Of T)(T, Action(Of String))
- uid: WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0)
  name: Dump<T>(T)
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: M:WeihanLi.Extensions.Dump.DumpExtension.Dump``1(``0)
  name.vb: Dump(Of T)(T)
  fullName: WeihanLi.Extensions.Dump.DumpExtension.Dump<T>(T)
  fullName.vb: WeihanLi.Extensions.Dump.DumpExtension.Dump(Of T)(T)
  nameWithType: DumpExtension.Dump<T>(T)
  nameWithType.vb: DumpExtension.Dump(Of T)(T)
- uid: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync*
  name: DumpAsync
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: Overload:WeihanLi.Extensions.Dump.DumpExtension.DumpAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync
  nameWithType: DumpExtension.DumpAsync
- uid: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync``1(``0,System.Func{System.String,System.Threading.Tasks.Task},System.Func{``0,System.String})
  name: DumpAsync<T>(T, Func<string, Task>, Func<T, string>)
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: M:WeihanLi.Extensions.Dump.DumpExtension.DumpAsync``1(``0,System.Func{System.String,System.Threading.Tasks.Task},System.Func{``0,System.String})
  name.vb: DumpAsync(Of T)(T, Func(Of String, Task), Func(Of T, String))
  fullName: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync<T>(T, System.Func<string, System.Threading.Tasks.Task>, System.Func<T, string>)
  fullName.vb: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync(Of T)(T, System.Func(Of String, System.Threading.Tasks.Task), System.Func(Of T, String))
  nameWithType: DumpExtension.DumpAsync<T>(T, Func<string, Task>, Func<T, string>)
  nameWithType.vb: DumpExtension.DumpAsync(Of T)(T, Func(Of String, Task), Func(Of T, String))
- uid: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync``1(``0,System.Func{System.String,System.Threading.Tasks.Task})
  name: DumpAsync<T>(T, Func<string, Task>)
  href: api/WeihanLi.Extensions.Dump.DumpExtension.yml
  commentId: M:WeihanLi.Extensions.Dump.DumpExtension.DumpAsync``1(``0,System.Func{System.String,System.Threading.Tasks.Task})
  name.vb: DumpAsync(Of T)(T, Func(Of String, Task))
  fullName: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync<T>(T, System.Func<string, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.Dump.DumpExtension.DumpAsync(Of T)(T, System.Func(Of String, System.Threading.Tasks.Task))
  nameWithType: DumpExtension.DumpAsync<T>(T, Func<string, Task>)
  nameWithType.vb: DumpExtension.DumpAsync(Of T)(T, Func(Of String, Task))
- uid: WeihanLi.Extensions.EnumerableExtension
  name: EnumerableExtension
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: T:WeihanLi.Extensions.EnumerableExtension
  fullName: WeihanLi.Extensions.EnumerableExtension
  nameWithType: EnumerableExtension
- uid: WeihanLi.Extensions.EnumerableExtension.Append*
  name: Append
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.Append
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.Append
  nameWithType: EnumerableExtension.Append
- uid: WeihanLi.Extensions.EnumerableExtension.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Append<TSource>(IEnumerable<TSource>, TSource)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  name.vb: Append(Of TSource)(IEnumerable(Of TSource), TSource)
  fullName: WeihanLi.Extensions.EnumerableExtension.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  nameWithType: EnumerableExtension.Append<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: EnumerableExtension.Append(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: WeihanLi.Extensions.EnumerableExtension.AsReadOnly*
  name: AsReadOnly
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.AsReadOnly
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.AsReadOnly
  nameWithType: EnumerableExtension.AsReadOnly
- uid: WeihanLi.Extensions.EnumerableExtension.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  name: AsReadOnly<T>(IEnumerable<T>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  name.vb: AsReadOnly(Of T)(IEnumerable(Of T))
  fullName: WeihanLi.Extensions.EnumerableExtension.AsReadOnly<T>(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.AsReadOnly(Of T)(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: EnumerableExtension.AsReadOnly<T>(IEnumerable<T>)
  nameWithType.vb: EnumerableExtension.AsReadOnly(Of T)(IEnumerable(Of T))
- uid: WeihanLi.Extensions.EnumerableExtension.Distinct*
  name: Distinct
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.Distinct
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.Distinct
  nameWithType: EnumerableExtension.Distinct
- uid: WeihanLi.Extensions.EnumerableExtension.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: Distinct<T>(IEnumerable<T>, Func<T?, T?, bool>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name.vb: Distinct(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName: WeihanLi.Extensions.EnumerableExtension.Distinct<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T?, T?, bool>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  nameWithType: EnumerableExtension.Distinct<T>(IEnumerable<T>, Func<T?, T?, bool>)
  nameWithType.vb: EnumerableExtension.Distinct(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: WeihanLi.Extensions.EnumerableExtension.Flatten*
  name: Flatten
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.Flatten
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.Flatten
  nameWithType: EnumerableExtension.Flatten
- uid: WeihanLi.Extensions.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  name: Flatten<T>(IEnumerable<IEnumerable<T>>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})
  name.vb: Flatten(Of T)(IEnumerable(Of IEnumerable(Of T)))
  fullName: WeihanLi.Extensions.EnumerableExtension.Flatten<T>(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T)))
  nameWithType: EnumerableExtension.Flatten<T>(IEnumerable<IEnumerable<T>>)
  nameWithType.vb: EnumerableExtension.Flatten(Of T)(IEnumerable(Of IEnumerable(Of T)))
- uid: WeihanLi.Extensions.EnumerableExtension.ForEach*
  name: ForEach
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.ForEach
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEach
  nameWithType: EnumerableExtension.ForEach
- uid: WeihanLi.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  name: ForEach<T>(IEnumerable<T>, Action<T, int>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T, Integer))
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, int>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, Integer))
  nameWithType: EnumerableExtension.ForEach<T>(IEnumerable<T>, Action<T, int>)
  nameWithType.vb: EnumerableExtension.ForEach(Of T)(IEnumerable(Of T), Action(Of T, Integer))
- uid: WeihanLi.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name: ForEach<T>(IEnumerable<T>, Action<T>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T))
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  nameWithType: EnumerableExtension.ForEach<T>(IEnumerable<T>, Action<T>)
  nameWithType.vb: EnumerableExtension.ForEach(Of T)(IEnumerable(Of T), Action(Of T))
- uid: WeihanLi.Extensions.EnumerableExtension.ForEachAsync*
  name: ForEachAsync
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.ForEachAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEachAsync
  nameWithType: EnumerableExtension.ForEachAsync
- uid: WeihanLi.Extensions.EnumerableExtension.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  name: ForEachAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  name.vb: ForEachAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEachAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, int, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ForEachAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Integer, System.Threading.Tasks.Task))
  nameWithType: EnumerableExtension.ForEachAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  nameWithType.vb: EnumerableExtension.ForEachAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
- uid: WeihanLi.Extensions.EnumerableExtension.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  name: ForEachAsync<T>(IEnumerable<T>, Func<T, Task>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  name.vb: ForEachAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
  fullName: WeihanLi.Extensions.EnumerableExtension.ForEachAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ForEachAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task))
  nameWithType: EnumerableExtension.ForEachAsync<T>(IEnumerable<T>, Func<T, Task>)
  nameWithType.vb: EnumerableExtension.ForEachAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
- uid: WeihanLi.Extensions.EnumerableExtension.GetCombinations*
  name: GetCombinations
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.GetCombinations
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.GetCombinations
  nameWithType: EnumerableExtension.GetCombinations
- uid: WeihanLi.Extensions.EnumerableExtension.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)
  name: GetCombinations<T>(IEnumerable<T>, int, bool)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)
  name.vb: GetCombinations(Of T)(IEnumerable(Of T), Integer, Boolean)
  fullName: WeihanLi.Extensions.EnumerableExtension.GetCombinations<T>(System.Collections.Generic.IEnumerable<T>, int, bool)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.GetCombinations(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer, Boolean)
  nameWithType: EnumerableExtension.GetCombinations<T>(IEnumerable<T>, int, bool)
  nameWithType.vb: EnumerableExtension.GetCombinations(Of T)(IEnumerable(Of T), Integer, Boolean)
- uid: WeihanLi.Extensions.EnumerableExtension.GetPermutations*
  name: GetPermutations
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.GetPermutations
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.GetPermutations
  nameWithType: EnumerableExtension.GetPermutations
- uid: WeihanLi.Extensions.EnumerableExtension.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IComparer{``0})
  name: GetPermutations<T>(IEnumerable<T>, bool, IComparer<T>?)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IComparer{``0})
  name.vb: GetPermutations(Of T)(IEnumerable(Of T), Boolean, IComparer(Of T))
  fullName: WeihanLi.Extensions.EnumerableExtension.GetPermutations<T>(System.Collections.Generic.IEnumerable<T>, bool, System.Collections.Generic.IComparer<T>?)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.GetPermutations(Of T)(System.Collections.Generic.IEnumerable(Of T), Boolean, System.Collections.Generic.IComparer(Of T))
  nameWithType: EnumerableExtension.GetPermutations<T>(IEnumerable<T>, bool, IComparer<T>?)
  nameWithType.vb: EnumerableExtension.GetPermutations(Of T)(IEnumerable(Of T), Boolean, IComparer(Of T))
- uid: WeihanLi.Extensions.EnumerableExtension.GroupByEquality*
  name: GroupByEquality
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.GroupByEquality
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.GroupByEquality
  nameWithType: EnumerableExtension.GroupByEquality
- uid: WeihanLi.Extensions.EnumerableExtension.GroupByEquality``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Action{``1,``0},System.Action{``0,``1})
  name: GroupByEquality<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, Action<TKey, T>?, Action<T, TKey>?)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.GroupByEquality``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Action{``1,``0},System.Action{``0,``1})
  name.vb: GroupByEquality(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey), Action(Of TKey, T), Action(Of T, TKey))
  fullName: WeihanLi.Extensions.EnumerableExtension.GroupByEquality<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>, System.Action<TKey, T>?, System.Action<T, TKey>?)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.GroupByEquality(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey), System.Action(Of TKey, T), System.Action(Of T, TKey))
  nameWithType: EnumerableExtension.GroupByEquality<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, Action<TKey, T>?, Action<T, TKey>?)
  nameWithType.vb: EnumerableExtension.GroupByEquality(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), IEqualityComparer(Of TKey), Action(Of TKey, T), Action(Of T, TKey))
- uid: WeihanLi.Extensions.EnumerableExtension.GroupByEquality``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Boolean},System.Action{``1,``0},System.Action{``0,``1})
  name: GroupByEquality<T, TKey>(IEnumerable<T>, Func<T, TKey>, Func<TKey, TKey, bool>, Action<TKey, T>?, Action<T, TKey>?)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.GroupByEquality``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Boolean},System.Action{``1,``0},System.Action{``0,``1})
  name.vb: GroupByEquality(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of TKey, TKey, Boolean), Action(Of TKey, T), Action(Of T, TKey))
  fullName: WeihanLi.Extensions.EnumerableExtension.GroupByEquality<T, TKey>(System.Collections.Generic.IEnumerable<T>, System.Func<T, TKey>, System.Func<TKey, TKey, bool>, System.Action<TKey, T>?, System.Action<T, TKey>?)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.GroupByEquality(Of T, TKey)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, TKey), System.Func(Of TKey, TKey, Boolean), System.Action(Of TKey, T), System.Action(Of T, TKey))
  nameWithType: EnumerableExtension.GroupByEquality<T, TKey>(IEnumerable<T>, Func<T, TKey>, Func<TKey, TKey, bool>, Action<TKey, T>?, Action<T, TKey>?)
  nameWithType.vb: EnumerableExtension.GroupByEquality(Of T, TKey)(IEnumerable(Of T), Func(Of T, TKey), Func(Of TKey, TKey, Boolean), Action(Of TKey, T), Action(Of T, TKey))
- uid: WeihanLi.Extensions.EnumerableExtension.HasValue*
  name: HasValue
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.HasValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.HasValue
  nameWithType: EnumerableExtension.HasValue
- uid: WeihanLi.Extensions.EnumerableExtension.HasValue``1(System.Collections.Generic.IEnumerable{``0})
  name: HasValue<T>(IEnumerable<T>?)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.HasValue``1(System.Collections.Generic.IEnumerable{``0})
  name.vb: HasValue(Of T)(IEnumerable(Of T))
  fullName: WeihanLi.Extensions.EnumerableExtension.HasValue<T>(System.Collections.Generic.IEnumerable<T>?)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.HasValue(Of T)(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: EnumerableExtension.HasValue<T>(IEnumerable<T>?)
  nameWithType.vb: EnumerableExtension.HasValue(Of T)(IEnumerable(Of T))
- uid: WeihanLi.Extensions.EnumerableExtension.LeftJoin*
  name: LeftJoin
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.LeftJoin
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.LeftJoin
  nameWithType: EnumerableExtension.LeftJoin
- uid: WeihanLi.Extensions.EnumerableExtension.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  name: LeftJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner?, TResult>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  name.vb: LeftJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  fullName: WeihanLi.Extensions.EnumerableExtension.LeftJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner?, TResult>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.LeftJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  nameWithType: EnumerableExtension.LeftJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner?, TResult>)
  nameWithType.vb: EnumerableExtension.LeftJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: WeihanLi.Extensions.EnumerableExtension.Prepend*
  name: Prepend
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.Prepend
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.Prepend
  nameWithType: EnumerableExtension.Prepend
- uid: WeihanLi.Extensions.EnumerableExtension.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Prepend<TSource>(IEnumerable<TSource>, TSource)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  name.vb: Prepend(Of TSource)(IEnumerable(Of TSource), TSource)
  fullName: WeihanLi.Extensions.EnumerableExtension.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  nameWithType: EnumerableExtension.Prepend<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: EnumerableExtension.Prepend(Of TSource)(IEnumerable(Of TSource), TSource)
- uid: WeihanLi.Extensions.EnumerableExtension.Split*
  name: Split
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.Split
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.Split
  nameWithType: EnumerableExtension.Split
- uid: WeihanLi.Extensions.EnumerableExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Split<T>(IEnumerable<T>, int)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name.vb: Split(Of T)(IEnumerable(Of T), Integer)
  fullName: WeihanLi.Extensions.EnumerableExtension.Split<T>(System.Collections.Generic.IEnumerable<T>, int)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.Split(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  nameWithType: EnumerableExtension.Split<T>(IEnumerable<T>, int)
  nameWithType.vb: EnumerableExtension.Split(Of T)(IEnumerable(Of T), Integer)
- uid: WeihanLi.Extensions.EnumerableExtension.StringJoin*
  name: StringJoin
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.StringJoin
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.StringJoin
  nameWithType: EnumerableExtension.StringJoin
- uid: WeihanLi.Extensions.EnumerableExtension.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name: StringJoin<T>(IEnumerable<T>, string)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)
  name.vb: StringJoin(Of T)(IEnumerable(Of T), String)
  fullName: WeihanLi.Extensions.EnumerableExtension.StringJoin<T>(System.Collections.Generic.IEnumerable<T>, string)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.StringJoin(Of T)(System.Collections.Generic.IEnumerable(Of T), String)
  nameWithType: EnumerableExtension.StringJoin<T>(IEnumerable<T>, string)
  nameWithType.vb: EnumerableExtension.StringJoin(Of T)(IEnumerable(Of T), String)
- uid: WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal*
  name: ToListResultWithTotal
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal
  nameWithType: EnumerableExtension.ToListResultWithTotal
- uid: WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ToListResultWithTotal<T>(IEnumerable<T>, int)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name.vb: ToListResultWithTotal(Of T)(IEnumerable(Of T), Integer)
  fullName: WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal<T>(System.Collections.Generic.IEnumerable<T>, int)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ToListResultWithTotal(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer)
  nameWithType: EnumerableExtension.ToListResultWithTotal<T>(IEnumerable<T>, int)
  nameWithType.vb: EnumerableExtension.ToListResultWithTotal(Of T)(IEnumerable(Of T), Integer)
- uid: WeihanLi.Extensions.EnumerableExtension.ToPagedList*
  name: ToPagedList
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.ToPagedList
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.ToPagedList
  nameWithType: EnumerableExtension.ToPagedList
- uid: WeihanLi.Extensions.EnumerableExtension.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)
  name: ToPagedList<T>(IEnumerable<T>, int, int, int)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)
  name.vb: ToPagedList(Of T)(IEnumerable(Of T), Integer, Integer, Integer)
  fullName: WeihanLi.Extensions.EnumerableExtension.ToPagedList<T>(System.Collections.Generic.IEnumerable<T>, int, int, int)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ToPagedList(Of T)(System.Collections.Generic.IEnumerable(Of T), Integer, Integer, Integer)
  nameWithType: EnumerableExtension.ToPagedList<T>(IEnumerable<T>, int, int, int)
  nameWithType.vb: EnumerableExtension.ToPagedList(Of T)(IEnumerable(Of T), Integer, Integer, Integer)
- uid: WeihanLi.Extensions.EnumerableExtension.ToPagedList``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Int32)
  name: ToPagedList<T>(IReadOnlyList<T>, int, int, int)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.ToPagedList``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Int32)
  name.vb: ToPagedList(Of T)(IReadOnlyList(Of T), Integer, Integer, Integer)
  fullName: WeihanLi.Extensions.EnumerableExtension.ToPagedList<T>(System.Collections.Generic.IReadOnlyList<T>, int, int, int)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.ToPagedList(Of T)(System.Collections.Generic.IReadOnlyList(Of T), Integer, Integer, Integer)
  nameWithType: EnumerableExtension.ToPagedList<T>(IReadOnlyList<T>, int, int, int)
  nameWithType.vb: EnumerableExtension.ToPagedList(Of T)(IReadOnlyList(Of T), Integer, Integer, Integer)
- uid: WeihanLi.Extensions.EnumerableExtension.WhereIf*
  name: WhereIf
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.WhereIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.WhereIf
  nameWithType: EnumerableExtension.WhereIf
- uid: WeihanLi.Extensions.EnumerableExtension.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: WhereIf<T>(IEnumerable<T>, Func<T, bool>, bool)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
  fullName: WeihanLi.Extensions.EnumerableExtension.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>, bool)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Boolean), Boolean)
  nameWithType: EnumerableExtension.WhereIf<T>(IEnumerable<T>, Func<T, bool>, bool)
  nameWithType.vb: EnumerableExtension.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Boolean)
- uid: WeihanLi.Extensions.EnumerableExtension.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Boolean})
  name: WhereIf<T>(IEnumerable<T>, Func<T, bool>, Func<bool>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Boolean})
  name.vb: WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of Boolean))
  fullName: WeihanLi.Extensions.EnumerableExtension.WhereIf<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, bool>, System.Func<bool>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.WhereIf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Boolean), System.Func(Of Boolean))
  nameWithType: EnumerableExtension.WhereIf<T>(IEnumerable<T>, Func<T, bool>, Func<bool>)
  nameWithType.vb: EnumerableExtension.WhereIf(Of T)(IEnumerable(Of T), Func(Of T, Boolean), Func(Of Boolean))
- uid: WeihanLi.Extensions.EnumerableExtension.WhereNotNull*
  name: WhereNotNull
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: Overload:WeihanLi.Extensions.EnumerableExtension.WhereNotNull
  isSpec: "True"
  fullName: WeihanLi.Extensions.EnumerableExtension.WhereNotNull
  nameWithType: EnumerableExtension.WhereNotNull
- uid: WeihanLi.Extensions.EnumerableExtension.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})
  name: WhereNotNull<T>(IEnumerable<T?>)
  href: api/WeihanLi.Extensions.EnumerableExtension.yml
  commentId: M:WeihanLi.Extensions.EnumerableExtension.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})
  name.vb: WhereNotNull(Of T)(IEnumerable(Of T))
  fullName: WeihanLi.Extensions.EnumerableExtension.WhereNotNull<T>(System.Collections.Generic.IEnumerable<T?>)
  fullName.vb: WeihanLi.Extensions.EnumerableExtension.WhereNotNull(Of T)(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: EnumerableExtension.WhereNotNull<T>(IEnumerable<T?>)
  nameWithType.vb: EnumerableExtension.WhereNotNull(Of T)(IEnumerable(Of T))
- uid: WeihanLi.Extensions.ExceptionExtension
  name: ExceptionExtension
  href: api/WeihanLi.Extensions.ExceptionExtension.yml
  commentId: T:WeihanLi.Extensions.ExceptionExtension
  fullName: WeihanLi.Extensions.ExceptionExtension
  nameWithType: ExceptionExtension
- uid: WeihanLi.Extensions.ExceptionExtension.IsFatal(System.Exception)
  name: IsFatal(Exception)
  href: api/WeihanLi.Extensions.ExceptionExtension.yml
  commentId: M:WeihanLi.Extensions.ExceptionExtension.IsFatal(System.Exception)
  fullName: WeihanLi.Extensions.ExceptionExtension.IsFatal(System.Exception)
  nameWithType: ExceptionExtension.IsFatal(Exception)
- uid: WeihanLi.Extensions.ExceptionExtension.IsFatal*
  name: IsFatal
  href: api/WeihanLi.Extensions.ExceptionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExceptionExtension.IsFatal
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExceptionExtension.IsFatal
  nameWithType: ExceptionExtension.IsFatal
- uid: WeihanLi.Extensions.ExceptionExtension.Unwrap(System.Exception,System.Int32)
  name: Unwrap(Exception, int)
  href: api/WeihanLi.Extensions.ExceptionExtension.yml
  commentId: M:WeihanLi.Extensions.ExceptionExtension.Unwrap(System.Exception,System.Int32)
  name.vb: Unwrap(Exception, Integer)
  fullName: WeihanLi.Extensions.ExceptionExtension.Unwrap(System.Exception, int)
  fullName.vb: WeihanLi.Extensions.ExceptionExtension.Unwrap(System.Exception, Integer)
  nameWithType: ExceptionExtension.Unwrap(Exception, int)
  nameWithType.vb: ExceptionExtension.Unwrap(Exception, Integer)
- uid: WeihanLi.Extensions.ExceptionExtension.Unwrap*
  name: Unwrap
  href: api/WeihanLi.Extensions.ExceptionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExceptionExtension.Unwrap
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExceptionExtension.Unwrap
  nameWithType: ExceptionExtension.Unwrap
- uid: WeihanLi.Extensions.ExpressionExtension
  name: ExpressionExtension
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: T:WeihanLi.Extensions.ExpressionExtension
  fullName: WeihanLi.Extensions.ExpressionExtension
  nameWithType: ExpressionExtension
- uid: WeihanLi.Extensions.ExpressionExtension.And*
  name: And
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.And
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.And
  nameWithType: ExpressionExtension.And
- uid: WeihanLi.Extensions.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: WeihanLi.Extensions.ExpressionExtension.And<T>(System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.And(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  nameWithType: ExpressionExtension.And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  nameWithType.vb: ExpressionExtension.And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: WeihanLi.Extensions.ExpressionExtension.AndIf*
  name: AndIf
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.AndIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.AndIf
  nameWithType: ExpressionExtension.AndIf
- uid: WeihanLi.Extensions.ExpressionExtension.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  name: AndIf<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>, bool)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.AndIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  name.vb: AndIf(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)), Boolean)
  fullName: WeihanLi.Extensions.ExpressionExtension.AndIf<T>(System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.AndIf(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  nameWithType: ExpressionExtension.AndIf<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>, bool)
  nameWithType.vb: ExpressionExtension.AndIf(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)), Boolean)
- uid: WeihanLi.Extensions.ExpressionExtension.GetMemberInfo*
  name: GetMemberInfo
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.GetMemberInfo
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMemberInfo
  nameWithType: ExpressionExtension.GetMemberInfo
- uid: WeihanLi.Extensions.ExpressionExtension.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GetMemberInfo<TEntity, TMember>(Expression<Func<TEntity, TMember>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name.vb: GetMemberInfo(Of TEntity, TMember)(Expression(Of Func(Of TEntity, TMember)))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMemberInfo<TEntity, TMember>(System.Linq.Expressions.Expression<System.Func<TEntity, TMember>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetMemberInfo(Of TEntity, TMember)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TMember)))
  nameWithType: ExpressionExtension.GetMemberInfo<TEntity, TMember>(Expression<Func<TEntity, TMember>>)
  nameWithType.vb: ExpressionExtension.GetMemberInfo(Of TEntity, TMember)(Expression(Of Func(Of TEntity, TMember)))
- uid: WeihanLi.Extensions.ExpressionExtension.GetMemberName*
  name: GetMemberName
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.GetMemberName
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMemberName
  nameWithType: ExpressionExtension.GetMemberName
- uid: WeihanLi.Extensions.ExpressionExtension.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GetMemberName<TEntity, TMember>(Expression<Func<TEntity, TMember>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name.vb: GetMemberName(Of TEntity, TMember)(Expression(Of Func(Of TEntity, TMember)))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMemberName<TEntity, TMember>(System.Linq.Expressions.Expression<System.Func<TEntity, TMember>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetMemberName(Of TEntity, TMember)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TMember)))
  nameWithType: ExpressionExtension.GetMemberName<TEntity, TMember>(Expression<Func<TEntity, TMember>>)
  nameWithType.vb: ExpressionExtension.GetMemberName(Of TEntity, TMember)(Expression(Of Func(Of TEntity, TMember)))
- uid: WeihanLi.Extensions.ExpressionExtension.GetMethod*
  name: GetMethod
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.GetMethod
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMethod
  nameWithType: ExpressionExtension.GetMethod
- uid: WeihanLi.Extensions.ExpressionExtension.GetMethod``1(System.Linq.Expressions.Expression{``0})
  name: GetMethod<T>(Expression<T>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetMethod``1(System.Linq.Expressions.Expression{``0})
  name.vb: GetMethod(Of T)(Expression(Of T))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMethod<T>(System.Linq.Expressions.Expression<T>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetMethod(Of T)(System.Linq.Expressions.Expression(Of T))
  nameWithType: ExpressionExtension.GetMethod<T>(Expression<T>)
  nameWithType.vb: ExpressionExtension.GetMethod(Of T)(Expression(Of T))
- uid: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression*
  name: GetMethodExpression
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.GetMethodExpression
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression
  nameWithType: ExpressionExtension.GetMethodExpression
- uid: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression``1(System.Linq.Expressions.Expression{System.Action{``0}})
  name: GetMethodExpression<T>(Expression<Action<T>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetMethodExpression``1(System.Linq.Expressions.Expression{System.Action{``0}})
  name.vb: GetMethodExpression(Of T)(Expression(Of Action(Of T)))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression<T>(System.Linq.Expressions.Expression<System.Action<T>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression(Of T)(System.Linq.Expressions.Expression(Of System.Action(Of T)))
  nameWithType: ExpressionExtension.GetMethodExpression<T>(Expression<Action<T>>)
  nameWithType.vb: ExpressionExtension.GetMethodExpression(Of T)(Expression(Of Action(Of T)))
- uid: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: GetMethodExpression<T>(Expression<Func<T, object>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetMethodExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name.vb: GetMethodExpression(Of T)(Expression(Of Func(Of T, Object)))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression<T>(System.Linq.Expressions.Expression<System.Func<T, object>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetMethodExpression(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Object)))
  nameWithType: ExpressionExtension.GetMethodExpression<T>(Expression<Func<T, object>>)
  nameWithType.vb: ExpressionExtension.GetMethodExpression(Of T)(Expression(Of Func(Of T, Object)))
- uid: WeihanLi.Extensions.ExpressionExtension.GetProperty*
  name: GetProperty
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.GetProperty
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.GetProperty
  nameWithType: ExpressionExtension.GetProperty
- uid: WeihanLi.Extensions.ExpressionExtension.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GetProperty<TEntity, TProperty>(Expression<Func<TEntity, TProperty>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name.vb: GetProperty(Of TEntity, TProperty)(Expression(Of Func(Of TEntity, TProperty)))
  fullName: WeihanLi.Extensions.ExpressionExtension.GetProperty<TEntity, TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.GetProperty(Of TEntity, TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)))
  nameWithType: ExpressionExtension.GetProperty<TEntity, TProperty>(Expression<Func<TEntity, TProperty>>)
  nameWithType.vb: ExpressionExtension.GetProperty(Of TEntity, TProperty)(Expression(Of Func(Of TEntity, TProperty)))
- uid: WeihanLi.Extensions.ExpressionExtension.Or*
  name: Or
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ExpressionExtension.Or
  isSpec: "True"
  fullName: WeihanLi.Extensions.ExpressionExtension.Or
  nameWithType: ExpressionExtension.Or
- uid: WeihanLi.Extensions.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  href: api/WeihanLi.Extensions.ExpressionExtension.yml
  commentId: M:WeihanLi.Extensions.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: WeihanLi.Extensions.ExpressionExtension.Or<T>(System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  fullName.vb: WeihanLi.Extensions.ExpressionExtension.Or(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  nameWithType: ExpressionExtension.Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>)
  nameWithType.vb: ExpressionExtension.Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: WeihanLi.Extensions.FuncExtension
  name: FuncExtension
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: T:WeihanLi.Extensions.FuncExtension
  fullName: WeihanLi.Extensions.FuncExtension
  nameWithType: FuncExtension
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation(System.Func{System.Threading.Tasks.Task})
  name: WrapCancellation(Func<Task>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapCancellation(System.Func{System.Threading.Tasks.Task})
  name.vb: WrapCancellation(Func(Of Task))
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation(System.Func<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapCancellation(System.Func(Of System.Threading.Tasks.Task))
  nameWithType: FuncExtension.WrapCancellation(Func<Task>)
  nameWithType.vb: FuncExtension.WrapCancellation(Func(Of Task))
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation*
  name: WrapCancellation
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: Overload:WeihanLi.Extensions.FuncExtension.WrapCancellation
  isSpec: "True"
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation
  nameWithType: FuncExtension.WrapCancellation
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation``1(System.Func{``0,System.Threading.Tasks.Task})
  name: WrapCancellation<T>(Func<T, Task>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapCancellation``1(System.Func{``0,System.Threading.Tasks.Task})
  name.vb: WrapCancellation(Of T)(Func(Of T, Task))
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation<T>(System.Func<T, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapCancellation(Of T)(System.Func(Of T, System.Threading.Tasks.Task))
  nameWithType: FuncExtension.WrapCancellation<T>(Func<T, Task>)
  nameWithType.vb: FuncExtension.WrapCancellation(Of T)(Func(Of T, Task))
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation``2(System.Func{``0,``1,System.Threading.Tasks.Task})
  name: WrapCancellation<T1, T2>(Func<T1, T2, Task>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapCancellation``2(System.Func{``0,``1,System.Threading.Tasks.Task})
  name.vb: WrapCancellation(Of T1, T2)(Func(Of T1, T2, Task))
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation<T1, T2>(System.Func<T1, T2, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapCancellation(Of T1, T2)(System.Func(Of T1, T2, System.Threading.Tasks.Task))
  nameWithType: FuncExtension.WrapCancellation<T1, T2>(Func<T1, T2, Task>)
  nameWithType.vb: FuncExtension.WrapCancellation(Of T1, T2)(Func(Of T1, T2, Task))
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task})
  name: WrapCancellation<T1, T2, T3>(Func<T1, T2, T3, Task>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapCancellation``3(System.Func{``0,``1,``2,System.Threading.Tasks.Task})
  name.vb: WrapCancellation(Of T1, T2, T3)(Func(Of T1, T2, T3, Task))
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation<T1, T2, T3>(System.Func<T1, T2, T3, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapCancellation(Of T1, T2, T3)(System.Func(Of T1, T2, T3, System.Threading.Tasks.Task))
  nameWithType: FuncExtension.WrapCancellation<T1, T2, T3>(Func<T1, T2, T3, Task>)
  nameWithType.vb: FuncExtension.WrapCancellation(Of T1, T2, T3)(Func(Of T1, T2, T3, Task))
- uid: WeihanLi.Extensions.FuncExtension.WrapCancellation``4(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task})
  name: WrapCancellation<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapCancellation``4(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task})
  name.vb: WrapCancellation(Of T1, T2, T3, T4)(Func(Of T1, T2, T3, T4, Task))
  fullName: WeihanLi.Extensions.FuncExtension.WrapCancellation<T1, T2, T3, T4>(System.Func<T1, T2, T3, T4, System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapCancellation(Of T1, T2, T3, T4)(System.Func(Of T1, T2, T3, T4, System.Threading.Tasks.Task))
  nameWithType: FuncExtension.WrapCancellation<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task>)
  nameWithType.vb: FuncExtension.WrapCancellation(Of T1, T2, T3, T4)(Func(Of T1, T2, T3, T4, Task))
- uid: WeihanLi.Extensions.FuncExtension.WrapTask(System.Action)
  name: WrapTask(Action)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapTask(System.Action)
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask(System.Action)
  nameWithType: FuncExtension.WrapTask(Action)
- uid: WeihanLi.Extensions.FuncExtension.WrapTask*
  name: WrapTask
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: Overload:WeihanLi.Extensions.FuncExtension.WrapTask
  isSpec: "True"
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask
  nameWithType: FuncExtension.WrapTask
- uid: WeihanLi.Extensions.FuncExtension.WrapTask``1(System.Action{``0})
  name: WrapTask<T>(Action<T>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapTask``1(System.Action{``0})
  name.vb: WrapTask(Of T)(Action(Of T))
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask<T>(System.Action<T>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapTask(Of T)(System.Action(Of T))
  nameWithType: FuncExtension.WrapTask<T>(Action<T>)
  nameWithType.vb: FuncExtension.WrapTask(Of T)(Action(Of T))
- uid: WeihanLi.Extensions.FuncExtension.WrapTask``2(System.Action{``0,``1})
  name: WrapTask<T1, T2>(Action<T1, T2>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapTask``2(System.Action{``0,``1})
  name.vb: WrapTask(Of T1, T2)(Action(Of T1, T2))
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask<T1, T2>(System.Action<T1, T2>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapTask(Of T1, T2)(System.Action(Of T1, T2))
  nameWithType: FuncExtension.WrapTask<T1, T2>(Action<T1, T2>)
  nameWithType.vb: FuncExtension.WrapTask(Of T1, T2)(Action(Of T1, T2))
- uid: WeihanLi.Extensions.FuncExtension.WrapTask``3(System.Action{``0,``1,``2})
  name: WrapTask<T1, T2, T3>(Action<T1, T2, T3>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapTask``3(System.Action{``0,``1,``2})
  name.vb: WrapTask(Of T1, T2, T3)(Action(Of T1, T2, T3))
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask<T1, T2, T3>(System.Action<T1, T2, T3>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapTask(Of T1, T2, T3)(System.Action(Of T1, T2, T3))
  nameWithType: FuncExtension.WrapTask<T1, T2, T3>(Action<T1, T2, T3>)
  nameWithType.vb: FuncExtension.WrapTask(Of T1, T2, T3)(Action(Of T1, T2, T3))
- uid: WeihanLi.Extensions.FuncExtension.WrapTask``4(System.Action{``0,``1,``2,``3})
  name: WrapTask<T1, T2, T3, T4>(Action<T1, T2, T3, T4>)
  href: api/WeihanLi.Extensions.FuncExtension.yml
  commentId: M:WeihanLi.Extensions.FuncExtension.WrapTask``4(System.Action{``0,``1,``2,``3})
  name.vb: WrapTask(Of T1, T2, T3, T4)(Action(Of T1, T2, T3, T4))
  fullName: WeihanLi.Extensions.FuncExtension.WrapTask<T1, T2, T3, T4>(System.Action<T1, T2, T3, T4>)
  fullName.vb: WeihanLi.Extensions.FuncExtension.WrapTask(Of T1, T2, T3, T4)(System.Action(Of T1, T2, T3, T4))
  nameWithType: FuncExtension.WrapTask<T1, T2, T3, T4>(Action<T1, T2, T3, T4>)
  nameWithType.vb: FuncExtension.WrapTask(Of T1, T2, T3, T4)(Action(Of T1, T2, T3, T4))
- uid: WeihanLi.Extensions.HttpClientExtension
  name: HttpClientExtension
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: T:WeihanLi.Extensions.HttpClientExtension
  fullName: WeihanLi.Extensions.HttpClientExtension
  nameWithType: HttpClientExtension
- uid: WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync*
  name: HttpJsonAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync
  nameWithType: HttpClientExtension.HttpJsonAsync
- uid: WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync``2(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name: HttpJsonAsync<TRequest, TResponse>(HttpClient, HttpMethod, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync``2(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name.vb: HttpJsonAsync(Of TRequest, TResponse)(HttpClient, HttpMethod, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync<TRequest, TResponse>(System.Net.Http.HttpClient, System.Net.Http.HttpMethod, string, TRequest, System.Action<System.Net.Http.HttpRequestMessage>?, System.Action<System.Net.Http.HttpResponseMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.HttpJsonAsync(Of TRequest, TResponse)(System.Net.Http.HttpClient, System.Net.Http.HttpMethod, String, TRequest, System.Action(Of System.Net.Http.HttpRequestMessage), System.Action(Of System.Net.Http.HttpResponseMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.HttpJsonAsync<TRequest, TResponse>(HttpClient, HttpMethod, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.HttpJsonAsync(Of TRequest, TResponse)(HttpClient, HttpMethod, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync*
  name: HttpJsonRequestAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync
  nameWithType: HttpClientExtension.HttpJsonRequestAsync
- uid: WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync``1(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name: HttpJsonRequestAsync<TRequest>(HttpClient, HttpMethod, string, TRequest, Action<HttpRequestMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync``1(System.Net.Http.HttpClient,System.Net.Http.HttpMethod,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name.vb: HttpJsonRequestAsync(Of TRequest)(HttpClient, HttpMethod, String, TRequest, Action(Of HttpRequestMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync<TRequest>(System.Net.Http.HttpClient, System.Net.Http.HttpMethod, string, TRequest, System.Action<System.Net.Http.HttpRequestMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.HttpJsonRequestAsync(Of TRequest)(System.Net.Http.HttpClient, System.Net.Http.HttpMethod, String, TRequest, System.Action(Of System.Net.Http.HttpRequestMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.HttpJsonRequestAsync<TRequest>(HttpClient, HttpMethod, string, TRequest, Action<HttpRequestMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.HttpJsonRequestAsync(Of TRequest)(HttpClient, HttpMethod, String, TRequest, Action(Of HttpRequestMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PostAsFormAsync(HttpClient, string, IEnumerable<KeyValuePair<string, string>>)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PostAsFormAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync(System.Net.Http.HttpClient, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync(System.Net.Http.HttpClient, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PostAsFormAsync(HttpClient, string, IEnumerable<KeyValuePair<string, string>>)
  nameWithType.vb: HttpClientExtension.PostAsFormAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync*
  name: PostAsFormAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PostAsFormAsync
  nameWithType: HttpClientExtension.PostAsFormAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PostFileAsync(HttpClient, string, ICollection<string>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PostFileAsync(HttpClient, String, ICollection(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, string, System.Collections.Generic.ICollection<string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, String, System.Collections.Generic.ICollection(Of String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PostFileAsync(HttpClient, string, ICollection<string>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientExtension.PostFileAsync(HttpClient, String, ICollection(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.IO.Stream}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PostFileAsync(HttpClient, string, IEnumerable<KeyValuePair<string, Stream>>?, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.IO.Stream}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PostFileAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, Stream)), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.IO.Stream>>?, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, System.IO.Stream)), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PostFileAsync(HttpClient, string, IEnumerable<KeyValuePair<string, Stream>>?, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientExtension.PostFileAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, Stream)), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.IO.Stream,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PostFileAsync(HttpClient, string, Stream?, string, string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.IO.Stream,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PostFileAsync(HttpClient, String, Stream, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, string, System.IO.Stream?, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, String, System.IO.Stream, String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PostFileAsync(HttpClient, string, Stream?, string, string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientExtension.PostFileAsync(HttpClient, String, Stream, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PostFileAsync(HttpClient, string, string, string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PostFileAsync(HttpClient, String, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostFileAsync(System.Net.Http.HttpClient, String, String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PostFileAsync(HttpClient, string, string, string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpClientExtension.PostFileAsync(HttpClient, String, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PostFileAsync*
  name: PostFileAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PostFileAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PostFileAsync
  nameWithType: HttpClientExtension.PostFileAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PostJsonAsync*
  name: PostJsonAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PostJsonAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PostJsonAsync
  nameWithType: HttpClientExtension.PostJsonAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PostJsonAsync``2(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name: PostJsonAsync<TRequest, TResponse>(HttpClient, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostJsonAsync``2(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name.vb: PostJsonAsync(Of TRequest, TResponse)(HttpClient, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.PostJsonAsync<TRequest, TResponse>(System.Net.Http.HttpClient, string, TRequest, System.Action<System.Net.Http.HttpRequestMessage>?, System.Action<System.Net.Http.HttpResponseMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostJsonAsync(Of TRequest, TResponse)(System.Net.Http.HttpClient, String, TRequest, System.Action(Of System.Net.Http.HttpRequestMessage), System.Action(Of System.Net.Http.HttpResponseMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.PostJsonAsync<TRequest, TResponse>(HttpClient, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.PostJsonAsync(Of TRequest, TResponse)(HttpClient, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync*
  name: PostJsonRequestAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync
  nameWithType: HttpClientExtension.PostJsonRequestAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name: PostJsonRequestAsync<T>(HttpClient, string, T, Action<HttpRequestMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name.vb: PostJsonRequestAsync(Of T)(HttpClient, String, T, Action(Of HttpRequestMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync<T>(System.Net.Http.HttpClient, string, T, System.Action<System.Net.Http.HttpRequestMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PostJsonRequestAsync(Of T)(System.Net.Http.HttpClient, String, T, System.Action(Of System.Net.Http.HttpRequestMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.PostJsonRequestAsync<T>(HttpClient, string, T, Action<HttpRequestMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.PostJsonRequestAsync(Of T)(HttpClient, String, T, Action(Of HttpRequestMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: PutAsFormAsync(HttpClient, string, IEnumerable<KeyValuePair<string, string>>)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: PutAsFormAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync(System.Net.Http.HttpClient, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync(System.Net.Http.HttpClient, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpClientExtension.PutAsFormAsync(HttpClient, string, IEnumerable<KeyValuePair<string, string>>)
  nameWithType.vb: HttpClientExtension.PutAsFormAsync(HttpClient, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync*
  name: PutAsFormAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PutAsFormAsync
  nameWithType: HttpClientExtension.PutAsFormAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PutJsonAsync*
  name: PutJsonAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PutJsonAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PutJsonAsync
  nameWithType: HttpClientExtension.PutJsonAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PutJsonAsync``2(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name: PutJsonAsync<TRequest, TResponse>(HttpClient, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PutJsonAsync``2(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name.vb: PutJsonAsync(Of TRequest, TResponse)(HttpClient, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.PutJsonAsync<TRequest, TResponse>(System.Net.Http.HttpClient, string, TRequest, System.Action<System.Net.Http.HttpRequestMessage>?, System.Action<System.Net.Http.HttpResponseMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PutJsonAsync(Of TRequest, TResponse)(System.Net.Http.HttpClient, String, TRequest, System.Action(Of System.Net.Http.HttpRequestMessage), System.Action(Of System.Net.Http.HttpResponseMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.PutJsonAsync<TRequest, TResponse>(HttpClient, string, TRequest, Action<HttpRequestMessage>?, Action<HttpResponseMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.PutJsonAsync(Of TRequest, TResponse)(HttpClient, String, TRequest, Action(Of HttpRequestMessage), Action(Of HttpResponseMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync*
  name: PutJsonRequestAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync
  nameWithType: HttpClientExtension.PutJsonRequestAsync
- uid: WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name: PutJsonRequestAsync<T>(HttpClient, string, T, Action<HttpRequestMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Action{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)
  name.vb: PutJsonRequestAsync(Of T)(HttpClient, String, T, Action(Of HttpRequestMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync<T>(System.Net.Http.HttpClient, string, T, System.Action<System.Net.Http.HttpRequestMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.PutJsonRequestAsync(Of T)(System.Net.Http.HttpClient, String, T, System.Action(Of System.Net.Http.HttpRequestMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.PutJsonRequestAsync<T>(HttpClient, string, T, Action<HttpRequestMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.PutJsonRequestAsync(Of T)(HttpClient, String, T, Action(Of HttpRequestMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync*
  name: ReadJsonResponseAsync
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync
  nameWithType: HttpClientExtension.ReadJsonResponseAsync
- uid: WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync``1(System.Net.Http.HttpResponseMessage,System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name: ReadJsonResponseAsync<TResponse>(HttpResponseMessage, Action<HttpResponseMessage>?, CancellationToken)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync``1(System.Net.Http.HttpResponseMessage,System.Action{System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)
  name.vb: ReadJsonResponseAsync(Of TResponse)(HttpResponseMessage, Action(Of HttpResponseMessage), CancellationToken)
  fullName: WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync<TResponse>(System.Net.Http.HttpResponseMessage, System.Action<System.Net.Http.HttpResponseMessage>?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.ReadJsonResponseAsync(Of TResponse)(System.Net.Http.HttpResponseMessage, System.Action(Of System.Net.Http.HttpResponseMessage), System.Threading.CancellationToken)
  nameWithType: HttpClientExtension.ReadJsonResponseAsync<TResponse>(HttpResponseMessage, Action<HttpResponseMessage>?, CancellationToken)
  nameWithType.vb: HttpClientExtension.ReadJsonResponseAsync(Of TResponse)(HttpResponseMessage, Action(Of HttpResponseMessage), CancellationToken)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpClient,System.String,System.String)
  name: SetBasicAuthentication(HttpClient, string, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpClient,System.String,System.String)
  name.vb: SetBasicAuthentication(HttpClient, String, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpClient, string, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpClient, String, String)
  nameWithType: HttpClientExtension.SetBasicAuthentication(HttpClient, string, string)
  nameWithType.vb: HttpClientExtension.SetBasicAuthentication(HttpClient, String, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name: SetBasicAuthentication(HttpRequestMessage, string, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name.vb: SetBasicAuthentication(HttpRequestMessage, String, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpRequestMessage, string, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication(System.Net.Http.HttpRequestMessage, String, String)
  nameWithType: HttpClientExtension.SetBasicAuthentication(HttpRequestMessage, string, string)
  nameWithType.vb: HttpClientExtension.SetBasicAuthentication(HttpRequestMessage, String, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication*
  name: SetBasicAuthentication
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthentication
  nameWithType: HttpClientExtension.SetBasicAuthentication
- uid: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name: SetBasicAuthenticationOAuth(HttpRequestMessage, string, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name.vb: SetBasicAuthenticationOAuth(HttpRequestMessage, String, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth(System.Net.Http.HttpRequestMessage, string, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth(System.Net.Http.HttpRequestMessage, String, String)
  nameWithType: HttpClientExtension.SetBasicAuthenticationOAuth(HttpRequestMessage, string, string)
  nameWithType.vb: HttpClientExtension.SetBasicAuthenticationOAuth(HttpRequestMessage, String, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth*
  name: SetBasicAuthenticationOAuth
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBasicAuthenticationOAuth
  nameWithType: HttpClientExtension.SetBasicAuthenticationOAuth
- uid: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpClient,System.String)
  name: SetBearerToken(HttpClient, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpClient,System.String)
  name.vb: SetBearerToken(HttpClient, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpClient, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpClient, String)
  nameWithType: HttpClientExtension.SetBearerToken(HttpClient, string)
  nameWithType.vb: HttpClientExtension.SetBearerToken(HttpClient, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpRequestMessage,System.String)
  name: SetBearerToken(HttpRequestMessage, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpRequestMessage,System.String)
  name.vb: SetBearerToken(HttpRequestMessage, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpRequestMessage, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetBearerToken(System.Net.Http.HttpRequestMessage, String)
  nameWithType: HttpClientExtension.SetBearerToken(HttpRequestMessage, string)
  nameWithType.vb: HttpClientExtension.SetBearerToken(HttpRequestMessage, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetBearerToken*
  name: SetBearerToken
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.SetBearerToken
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.SetBearerToken
  nameWithType: HttpClientExtension.SetBearerToken
- uid: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpClient,System.String,System.String)
  name: SetToken(HttpClient, string, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpClient,System.String,System.String)
  name.vb: SetToken(HttpClient, String, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpClient, string, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpClient, String, String)
  nameWithType: HttpClientExtension.SetToken(HttpClient, string, string)
  nameWithType.vb: HttpClientExtension.SetToken(HttpClient, String, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name: SetToken(HttpRequestMessage, string, string)
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: M:WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpRequestMessage,System.String,System.String)
  name.vb: SetToken(HttpRequestMessage, String, String)
  fullName: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpRequestMessage, string, string)
  fullName.vb: WeihanLi.Extensions.HttpClientExtension.SetToken(System.Net.Http.HttpRequestMessage, String, String)
  nameWithType: HttpClientExtension.SetToken(HttpRequestMessage, string, string)
  nameWithType.vb: HttpClientExtension.SetToken(HttpRequestMessage, String, String)
- uid: WeihanLi.Extensions.HttpClientExtension.SetToken*
  name: SetToken
  href: api/WeihanLi.Extensions.HttpClientExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpClientExtension.SetToken
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpClientExtension.SetToken
  nameWithType: HttpClientExtension.SetToken
- uid: WeihanLi.Extensions.HttpRequesterExtension
  name: HttpRequesterExtension
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: T:WeihanLi.Extensions.HttpRequesterExtension
  fullName: WeihanLi.Extensions.HttpRequesterExtension
  nameWithType: HttpRequesterExtension
- uid: WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest(WeihanLi.Common.Http.IHttpRequester)
  name: AjaxRequest(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest(WeihanLi.Common.Http.IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.AjaxRequest(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest*
  name: AjaxRequest
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.AjaxRequest
  nameWithType: HttpRequesterExtension.AjaxRequest
- uid: WeihanLi.Extensions.HttpRequesterExtension.Execute(WeihanLi.Common.Http.IHttpRequester)
  name: Execute(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.Execute(WeihanLi.Common.Http.IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.Execute(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.Execute(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.Execute*
  name: Execute
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.Execute
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.Execute
  nameWithType: HttpRequesterExtension.Execute
- uid: WeihanLi.Extensions.HttpRequesterExtension.Execute``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name: Execute<T>(IHttpRequester, T?)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.Execute``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name.vb: Execute(Of T)(IHttpRequester, T)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.Execute<T>(WeihanLi.Common.Http.IHttpRequester, T?)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.Execute(Of T)(WeihanLi.Common.Http.IHttpRequester, T)
  nameWithType: HttpRequesterExtension.Execute<T>(IHttpRequester, T?)
  nameWithType.vb: HttpRequesterExtension.Execute(Of T)(IHttpRequester, T)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync(WeihanLi.Common.Http.IHttpRequester)
  name: ExecuteAsync(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync(WeihanLi.Common.Http.IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.ExecuteAsync(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync
  nameWithType: HttpRequesterExtension.ExecuteAsync
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name: ExecuteAsync<T>(IHttpRequester, T?)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name.vb: ExecuteAsync(Of T)(IHttpRequester, T)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync<T>(WeihanLi.Common.Http.IHttpRequester, T?)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.ExecuteAsync(Of T)(WeihanLi.Common.Http.IHttpRequester, T)
  nameWithType: HttpRequesterExtension.ExecuteAsync<T>(IHttpRequester, T?)
  nameWithType.vb: HttpRequesterExtension.ExecuteAsync(Of T)(IHttpRequester, T)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson*
  name: ExecuteForJson
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson
  nameWithType: HttpRequesterExtension.ExecuteForJson
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson``1(WeihanLi.Common.Http.IHttpRequester)
  name: ExecuteForJson<TEntity>(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson``1(WeihanLi.Common.Http.IHttpRequester)
  name.vb: ExecuteForJson(Of TEntity)(IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson<TEntity>(WeihanLi.Common.Http.IHttpRequester)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJson(Of TEntity)(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.ExecuteForJson<TEntity>(IHttpRequester)
  nameWithType.vb: HttpRequesterExtension.ExecuteForJson(Of TEntity)(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync*
  name: ExecuteForJsonAsync
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync
  nameWithType: HttpRequesterExtension.ExecuteForJsonAsync
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync``1(WeihanLi.Common.Http.IHttpRequester)
  name: ExecuteForJsonAsync<TEntity>(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync``1(WeihanLi.Common.Http.IHttpRequester)
  name.vb: ExecuteForJsonAsync(Of TEntity)(IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync<TEntity>(WeihanLi.Common.Http.IHttpRequester)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForJsonAsync(Of TEntity)(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.ExecuteForJsonAsync<TEntity>(IHttpRequester)
  nameWithType.vb: HttpRequesterExtension.ExecuteForJsonAsync(Of TEntity)(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml*
  name: ExecuteForXml
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml
  nameWithType: HttpRequesterExtension.ExecuteForXml
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml``1(WeihanLi.Common.Http.IHttpRequester)
  name: ExecuteForXml<TEntity>(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml``1(WeihanLi.Common.Http.IHttpRequester)
  name.vb: ExecuteForXml(Of TEntity)(IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml<TEntity>(WeihanLi.Common.Http.IHttpRequester)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXml(Of TEntity)(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.ExecuteForXml<TEntity>(IHttpRequester)
  nameWithType.vb: HttpRequesterExtension.ExecuteForXml(Of TEntity)(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync*
  name: ExecuteForXmlAsync
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync
  nameWithType: HttpRequesterExtension.ExecuteForXmlAsync
- uid: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync``1(WeihanLi.Common.Http.IHttpRequester)
  name: ExecuteForXmlAsync<TEntity>(IHttpRequester)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync``1(WeihanLi.Common.Http.IHttpRequester)
  name.vb: ExecuteForXmlAsync(Of TEntity)(IHttpRequester)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync<TEntity>(WeihanLi.Common.Http.IHttpRequester)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.ExecuteForXmlAsync(Of TEntity)(WeihanLi.Common.Http.IHttpRequester)
  nameWithType: HttpRequesterExtension.ExecuteForXmlAsync<TEntity>(IHttpRequester)
  nameWithType.vb: HttpRequesterExtension.ExecuteForXmlAsync(Of TEntity)(IHttpRequester)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.Net.Cookie)
  name: WithCookie(IHttpRequester, Cookie)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.Net.Cookie)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester, System.Net.Cookie)
  nameWithType: HttpRequesterExtension.WithCookie(IHttpRequester, Cookie)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.Net.CookieCollection)
  name: WithCookie(IHttpRequester, CookieCollection)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.Net.CookieCollection)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester, System.Net.CookieCollection)
  nameWithType: HttpRequesterExtension.WithCookie(IHttpRequester, CookieCollection)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.String,System.String)
  name: WithCookie(IHttpRequester, string, string)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester,System.String,System.String)
  name.vb: WithCookie(IHttpRequester, String, String)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester, string, string)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithCookie(WeihanLi.Common.Http.IHttpRequester, String, String)
  nameWithType: HttpRequesterExtension.WithCookie(IHttpRequester, string, string)
  nameWithType.vb: HttpRequesterExtension.WithCookie(IHttpRequester, String, String)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithCookie*
  name: WithCookie
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithCookie
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithCookie
  nameWithType: HttpRequesterExtension.WithCookie
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFile(WeihanLi.Common.Http.IHttpRequester,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFile(IHttpRequester, string, string, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithFile(WeihanLi.Common.Http.IHttpRequester,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFile(IHttpRequester, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFile(WeihanLi.Common.Http.IHttpRequester, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithFile(WeihanLi.Common.Http.IHttpRequester, String, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpRequesterExtension.WithFile(IHttpRequester, string, string, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpRequesterExtension.WithFile(IHttpRequester, String, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFile*
  name: WithFile
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithFile
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFile
  nameWithType: HttpRequesterExtension.WithFile
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFiles(WeihanLi.Common.Http.IHttpRequester,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFiles(IHttpRequester, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithFiles(WeihanLi.Common.Http.IHttpRequester,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFiles(IHttpRequester, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFiles(WeihanLi.Common.Http.IHttpRequester, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>?)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithFiles(WeihanLi.Common.Http.IHttpRequester, System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpRequesterExtension.WithFiles(IHttpRequester, IEnumerable<string>, IEnumerable<KeyValuePair<string, string>>?)
  nameWithType.vb: HttpRequesterExtension.WithFiles(IHttpRequester, IEnumerable(Of String), IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFiles*
  name: WithFiles
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithFiles
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFiles
  nameWithType: HttpRequesterExtension.WithFiles
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFormParams(WeihanLi.Common.Http.IHttpRequester,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithFormParams(IHttpRequester, IEnumerable<KeyValuePair<string, string>>)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithFormParams(WeihanLi.Common.Http.IHttpRequester,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithFormParams(IHttpRequester, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFormParams(WeihanLi.Common.Http.IHttpRequester, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithFormParams(WeihanLi.Common.Http.IHttpRequester, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpRequesterExtension.WithFormParams(IHttpRequester, IEnumerable<KeyValuePair<string, string>>)
  nameWithType.vb: HttpRequesterExtension.WithFormParams(IHttpRequester, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithFormParams*
  name: WithFormParams
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithFormParams
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithFormParams
  nameWithType: HttpRequesterExtension.WithFormParams
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter*
  name: WithJsonParameter
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter
  nameWithType: HttpRequesterExtension.WithJsonParameter
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name: WithJsonParameter<TEntity>(IHttpRequester, TEntity)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name.vb: WithJsonParameter(Of TEntity)(IHttpRequester, TEntity)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter<TEntity>(WeihanLi.Common.Http.IHttpRequester, TEntity)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithJsonParameter(Of TEntity)(WeihanLi.Common.Http.IHttpRequester, TEntity)
  nameWithType: HttpRequesterExtension.WithJsonParameter<TEntity>(IHttpRequester, TEntity)
  nameWithType.vb: HttpRequesterExtension.WithJsonParameter(Of TEntity)(IHttpRequester, TEntity)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester,System.String,System.String,System.String)
  name: WithProxy(IHttpRequester, string, string, string)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester,System.String,System.String,System.String)
  name.vb: WithProxy(IHttpRequester, String, String, String)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester, string, string, string)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester, String, String, String)
  nameWithType: HttpRequesterExtension.WithProxy(IHttpRequester, string, string, string)
  nameWithType.vb: HttpRequesterExtension.WithProxy(IHttpRequester, String, String, String)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester,System.String)
  name: WithProxy(IHttpRequester, string)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester,System.String)
  name.vb: WithProxy(IHttpRequester, String)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester, string)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithProxy(WeihanLi.Common.Http.IHttpRequester, String)
  nameWithType: HttpRequesterExtension.WithProxy(IHttpRequester, string)
  nameWithType.vb: HttpRequesterExtension.WithProxy(IHttpRequester, String)
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithProxy*
  name: WithProxy
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithProxy
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithProxy
  nameWithType: HttpRequesterExtension.WithProxy
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithUrl(WeihanLi.Common.Http.IHttpRequester,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name: WithUrl(IHttpRequester, string, IEnumerable<KeyValuePair<string, string>>)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithUrl(WeihanLi.Common.Http.IHttpRequester,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  name.vb: WithUrl(IHttpRequester, String, IEnumerable(Of KeyValuePair(Of String, String)))
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithUrl(WeihanLi.Common.Http.IHttpRequester, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithUrl(WeihanLi.Common.Http.IHttpRequester, String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of String, String)))
  nameWithType: HttpRequesterExtension.WithUrl(IHttpRequester, string, IEnumerable<KeyValuePair<string, string>>)
  nameWithType.vb: HttpRequesterExtension.WithUrl(IHttpRequester, String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithUrl*
  name: WithUrl
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithUrl
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithUrl
  nameWithType: HttpRequesterExtension.WithUrl
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter*
  name: WithXmlParameter
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: Overload:WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter
  isSpec: "True"
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter
  nameWithType: HttpRequesterExtension.WithXmlParameter
- uid: WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name: WithXmlParameter<TEntity>(IHttpRequester, TEntity)
  href: api/WeihanLi.Extensions.HttpRequesterExtension.yml
  commentId: M:WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter``1(WeihanLi.Common.Http.IHttpRequester,``0)
  name.vb: WithXmlParameter(Of TEntity)(IHttpRequester, TEntity)
  fullName: WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter<TEntity>(WeihanLi.Common.Http.IHttpRequester, TEntity)
  fullName.vb: WeihanLi.Extensions.HttpRequesterExtension.WithXmlParameter(Of TEntity)(WeihanLi.Common.Http.IHttpRequester, TEntity)
  nameWithType: HttpRequesterExtension.WithXmlParameter<TEntity>(IHttpRequester, TEntity)
  nameWithType.vb: HttpRequesterExtension.WithXmlParameter(Of TEntity)(IHttpRequester, TEntity)
- uid: WeihanLi.Extensions.ILGeneratorExtensions
  name: ILGeneratorExtensions
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: T:WeihanLi.Extensions.ILGeneratorExtensions
  fullName: WeihanLi.Extensions.ILGeneratorExtensions
  nameWithType: ILGeneratorExtensions
- uid: WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)
  name: Call(ILGenerator, ConstructorInfo)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator, System.Reflection.ConstructorInfo)
  nameWithType: ILGeneratorExtensions.Call(ILGenerator, ConstructorInfo)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)
  name: Call(ILGenerator, MethodInfo)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)
  nameWithType: ILGeneratorExtensions.Call(ILGenerator, MethodInfo)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.Call*
  name: Call
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.Call
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.Call
  nameWithType: ILGeneratorExtensions.Call
- uid: WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue(System.Reflection.Emit.ILGenerator,System.Type)
  name: DeclareReturnValue(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.DeclareReturnValue(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue*
  name: DeclareReturnValue
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.DeclareReturnValue
  nameWithType: ILGeneratorExtensions.DeclareReturnValue
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean(System.Reflection.Emit.ILGenerator,System.Boolean)
  name: EmitBoolean(ILGenerator, bool)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean(System.Reflection.Emit.ILGenerator,System.Boolean)
  name.vb: EmitBoolean(ILGenerator, Boolean)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean(System.Reflection.Emit.ILGenerator, bool)
  fullName.vb: WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean(System.Reflection.Emit.ILGenerator, Boolean)
  nameWithType: ILGeneratorExtensions.EmitBoolean(ILGenerator, bool)
  nameWithType.vb: ILGeneratorExtensions.EmitBoolean(ILGenerator, Boolean)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean*
  name: EmitBoolean
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitBoolean
  nameWithType: ILGeneratorExtensions.EmitBoolean
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType(System.Reflection.Emit.ILGenerator,System.Type,System.Type)
  name: EmitCastToType(ILGenerator, Type, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType(System.Reflection.Emit.ILGenerator,System.Type,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType(System.Reflection.Emit.ILGenerator, System.Type, System.Type)
  nameWithType: ILGeneratorExtensions.EmitCastToType(ILGenerator, Type, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType*
  name: EmitCastToType
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitCastToType
  nameWithType: ILGeneratorExtensions.EmitCastToType
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitConvertFromObject(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitConvertFromObject(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject*
  name: EmitConvertFromObject
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertFromObject
  nameWithType: ILGeneratorExtensions.EmitConvertFromObject
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitConvertToObject(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitConvertToObject(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject*
  name: EmitConvertToObject
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToObject
  nameWithType: ILGeneratorExtensions.EmitConvertToObject
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType(System.Reflection.Emit.ILGenerator,System.Type,System.Type,System.Boolean)
  name: EmitConvertToType(ILGenerator, Type, Type, bool)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType(System.Reflection.Emit.ILGenerator,System.Type,System.Type,System.Boolean)
  name.vb: EmitConvertToType(ILGenerator, Type, Type, Boolean)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType(System.Reflection.Emit.ILGenerator, System.Type, System.Type, bool)
  fullName.vb: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType(System.Reflection.Emit.ILGenerator, System.Type, System.Type, Boolean)
  nameWithType: ILGeneratorExtensions.EmitConvertToType(ILGenerator, Type, Type, bool)
  nameWithType.vb: ILGeneratorExtensions.EmitConvertToType(ILGenerator, Type, Type, Boolean)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType*
  name: EmitConvertToType
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitConvertToType
  nameWithType: ILGeneratorExtensions.EmitConvertToType
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitDefaultValue(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitDefaultValue(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue*
  name: EmitDefaultValue
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitDefaultValue
  nameWithType: ILGeneratorExtensions.EmitDefaultValue
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitGetValue(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitGetValue(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue*
  name: EmitGetValue
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValue
  nameWithType: ILGeneratorExtensions.EmitGetValue
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitGetValueOrDefault(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitGetValueOrDefault(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault*
  name: EmitGetValueOrDefault
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitGetValueOrDefault
  nameWithType: ILGeneratorExtensions.EmitGetValueOrDefault
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue(System.Reflection.Emit.ILGenerator,System.Type)
  name: EmitHasValue(ILGenerator, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue(System.Reflection.Emit.ILGenerator,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue(System.Reflection.Emit.ILGenerator, System.Type)
  nameWithType: ILGeneratorExtensions.EmitHasValue(ILGenerator, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue*
  name: EmitHasValue
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitHasValue
  nameWithType: ILGeneratorExtensions.EmitHasValue
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg(System.Reflection.Emit.ILGenerator,System.Int32)
  name: EmitLoadArg(ILGenerator, int)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg(System.Reflection.Emit.ILGenerator,System.Int32)
  name.vb: EmitLoadArg(ILGenerator, Integer)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg(System.Reflection.Emit.ILGenerator, int)
  fullName.vb: WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg(System.Reflection.Emit.ILGenerator, Integer)
  nameWithType: ILGeneratorExtensions.EmitLoadArg(ILGenerator, int)
  nameWithType.vb: ILGeneratorExtensions.EmitLoadArg(ILGenerator, Integer)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg*
  name: EmitLoadArg
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitLoadArg
  nameWithType: ILGeneratorExtensions.EmitLoadArg
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type)
  name: EmitMethod(ILGenerator, MethodInfo, Type)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo, System.Type)
  nameWithType: ILGeneratorExtensions.EmitMethod(ILGenerator, MethodInfo, Type)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)
  name: EmitMethod(ILGenerator, MethodInfo)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)
  nameWithType: ILGeneratorExtensions.EmitMethod(ILGenerator, MethodInfo)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod*
  name: EmitMethod
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitMethod
  nameWithType: ILGeneratorExtensions.EmitMethod
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitNull(System.Reflection.Emit.ILGenerator)
  name: EmitNull(ILGenerator)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitNull(System.Reflection.Emit.ILGenerator)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitNull(System.Reflection.Emit.ILGenerator)
  nameWithType: ILGeneratorExtensions.EmitNull(ILGenerator)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitNull*
  name: EmitNull
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitNull
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitNull
  nameWithType: ILGeneratorExtensions.EmitNull
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitString(System.Reflection.Emit.ILGenerator,System.String)
  name: EmitString(ILGenerator, string)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitString(System.Reflection.Emit.ILGenerator,System.String)
  name.vb: EmitString(ILGenerator, String)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitString(System.Reflection.Emit.ILGenerator, string)
  fullName.vb: WeihanLi.Extensions.ILGeneratorExtensions.EmitString(System.Reflection.Emit.ILGenerator, String)
  nameWithType: ILGeneratorExtensions.EmitString(ILGenerator, string)
  nameWithType.vb: ILGeneratorExtensions.EmitString(ILGenerator, String)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitString*
  name: EmitString
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitString
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitString
  nameWithType: ILGeneratorExtensions.EmitString
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitThis(System.Reflection.Emit.ILGenerator)
  name: EmitThis(ILGenerator)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.EmitThis(System.Reflection.Emit.ILGenerator)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitThis(System.Reflection.Emit.ILGenerator)
  nameWithType: ILGeneratorExtensions.EmitThis(ILGenerator)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.EmitThis*
  name: EmitThis
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.EmitThis
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.EmitThis
  nameWithType: ILGeneratorExtensions.EmitThis
- uid: WeihanLi.Extensions.ILGeneratorExtensions.GetMethodFromHandle
  name: GetMethodFromHandle
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: F:WeihanLi.Extensions.ILGeneratorExtensions.GetMethodFromHandle
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.GetMethodFromHandle
  nameWithType: ILGeneratorExtensions.GetMethodFromHandle
- uid: WeihanLi.Extensions.ILGeneratorExtensions.LoadObj(System.Reflection.Emit.ILGenerator,System.Object)
  name: LoadObj(ILGenerator, object?)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.LoadObj(System.Reflection.Emit.ILGenerator,System.Object)
  name.vb: LoadObj(ILGenerator, Object)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.LoadObj(System.Reflection.Emit.ILGenerator, object?)
  fullName.vb: WeihanLi.Extensions.ILGeneratorExtensions.LoadObj(System.Reflection.Emit.ILGenerator, Object)
  nameWithType: ILGeneratorExtensions.LoadObj(ILGenerator, object?)
  nameWithType.vb: ILGeneratorExtensions.LoadObj(ILGenerator, Object)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.LoadObj*
  name: LoadObj
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.LoadObj
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.LoadObj
  nameWithType: ILGeneratorExtensions.LoadObj
- uid: WeihanLi.Extensions.ILGeneratorExtensions.New(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)
  name: New(ILGenerator, ConstructorInfo)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.New(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.New(System.Reflection.Emit.ILGenerator, System.Reflection.ConstructorInfo)
  nameWithType: ILGeneratorExtensions.New(ILGenerator, ConstructorInfo)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.New*
  name: New
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.New
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.New
  nameWithType: ILGeneratorExtensions.New
- uid: WeihanLi.Extensions.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder)
  name: Return(ILGenerator, MethodInfo, LocalBuilder)
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: M:WeihanLi.Extensions.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.Emit.LocalBuilder)
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo, System.Reflection.Emit.LocalBuilder)
  nameWithType: ILGeneratorExtensions.Return(ILGenerator, MethodInfo, LocalBuilder)
- uid: WeihanLi.Extensions.ILGeneratorExtensions.Return*
  name: Return
  href: api/WeihanLi.Extensions.ILGeneratorExtensions.yml
  commentId: Overload:WeihanLi.Extensions.ILGeneratorExtensions.Return
  isSpec: "True"
  fullName: WeihanLi.Extensions.ILGeneratorExtensions.Return
  nameWithType: ILGeneratorExtensions.Return
- uid: WeihanLi.Extensions.IOExtension
  name: IOExtension
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: T:WeihanLi.Extensions.IOExtension
  fullName: WeihanLi.Extensions.IOExtension
  nameWithType: IOExtension
- uid: WeihanLi.Extensions.IOExtension.Append(System.IO.Stream,System.IO.Stream)
  name: Append(Stream, Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.Append(System.IO.Stream,System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.Append(System.IO.Stream, System.IO.Stream)
  nameWithType: IOExtension.Append(Stream, Stream)
- uid: WeihanLi.Extensions.IOExtension.Append*
  name: Append
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.Append
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.Append
  nameWithType: IOExtension.Append
- uid: WeihanLi.Extensions.IOExtension.AppendAsync(System.IO.Stream,System.IO.Stream)
  name: AppendAsync(Stream, Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.AppendAsync(System.IO.Stream,System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.AppendAsync(System.IO.Stream, System.IO.Stream)
  nameWithType: IOExtension.AppendAsync(Stream, Stream)
- uid: WeihanLi.Extensions.IOExtension.AppendAsync*
  name: AppendAsync
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.AppendAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.AppendAsync
  nameWithType: IOExtension.AppendAsync
- uid: WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream,System.Text.Encoding)
  name: ReadToEnd(Stream, Encoding)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream,System.Text.Encoding)
  fullName: WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream, System.Text.Encoding)
  nameWithType: IOExtension.ReadToEnd(Stream, Encoding)
- uid: WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream)
  name: ReadToEnd(Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.ReadToEnd(System.IO.Stream)
  nameWithType: IOExtension.ReadToEnd(Stream)
- uid: WeihanLi.Extensions.IOExtension.ReadToEnd*
  name: ReadToEnd
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.ReadToEnd
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.ReadToEnd
  nameWithType: IOExtension.ReadToEnd
- uid: WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream,System.Text.Encoding)
  name: ReadToEndAsync(Stream, Encoding)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream,System.Text.Encoding)
  fullName: WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream, System.Text.Encoding)
  nameWithType: IOExtension.ReadToEndAsync(Stream, Encoding)
- uid: WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream)
  name: ReadToEndAsync(Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.ReadToEndAsync(System.IO.Stream)
  nameWithType: IOExtension.ReadToEndAsync(Stream)
- uid: WeihanLi.Extensions.IOExtension.ReadToEndAsync*
  name: ReadToEndAsync
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.ReadToEndAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.ReadToEndAsync
  nameWithType: IOExtension.ReadToEndAsync
- uid: WeihanLi.Extensions.IOExtension.ToByteArray(System.IO.Stream)
  name: ToByteArray(Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ToByteArray(System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.ToByteArray(System.IO.Stream)
  nameWithType: IOExtension.ToByteArray(Stream)
- uid: WeihanLi.Extensions.IOExtension.ToByteArray*
  name: ToByteArray
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.ToByteArray
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.ToByteArray
  nameWithType: IOExtension.ToByteArray
- uid: WeihanLi.Extensions.IOExtension.ToByteArrayAsync(System.IO.Stream)
  name: ToByteArrayAsync(Stream)
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.ToByteArrayAsync(System.IO.Stream)
  fullName: WeihanLi.Extensions.IOExtension.ToByteArrayAsync(System.IO.Stream)
  nameWithType: IOExtension.ToByteArrayAsync(Stream)
- uid: WeihanLi.Extensions.IOExtension.ToByteArrayAsync*
  name: ToByteArrayAsync
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.ToByteArrayAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.ToByteArrayAsync
  nameWithType: IOExtension.ToByteArrayAsync
- uid: WeihanLi.Extensions.IOExtension.Write(System.IO.Stream,System.Byte[])
  name: Write(Stream, byte[])
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.Write(System.IO.Stream,System.Byte[])
  name.vb: Write(Stream, Byte())
  fullName: WeihanLi.Extensions.IOExtension.Write(System.IO.Stream, byte[])
  fullName.vb: WeihanLi.Extensions.IOExtension.Write(System.IO.Stream, Byte())
  nameWithType: IOExtension.Write(Stream, byte[])
  nameWithType.vb: IOExtension.Write(Stream, Byte())
- uid: WeihanLi.Extensions.IOExtension.Write*
  name: Write
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.Write
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.Write
  nameWithType: IOExtension.Write
- uid: WeihanLi.Extensions.IOExtension.WriteAsync(System.IO.Stream,System.Byte[])
  name: WriteAsync(Stream, byte[])
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: M:WeihanLi.Extensions.IOExtension.WriteAsync(System.IO.Stream,System.Byte[])
  name.vb: WriteAsync(Stream, Byte())
  fullName: WeihanLi.Extensions.IOExtension.WriteAsync(System.IO.Stream, byte[])
  fullName.vb: WeihanLi.Extensions.IOExtension.WriteAsync(System.IO.Stream, Byte())
  nameWithType: IOExtension.WriteAsync(Stream, byte[])
  nameWithType.vb: IOExtension.WriteAsync(Stream, Byte())
- uid: WeihanLi.Extensions.IOExtension.WriteAsync*
  name: WriteAsync
  href: api/WeihanLi.Extensions.IOExtension.yml
  commentId: Overload:WeihanLi.Extensions.IOExtension.WriteAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.IOExtension.WriteAsync
  nameWithType: IOExtension.WriteAsync
- uid: WeihanLi.Extensions.JsonSerializeExtension
  name: JsonSerializeExtension
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: T:WeihanLi.Extensions.JsonSerializeExtension
  fullName: WeihanLi.Extensions.JsonSerializeExtension
  nameWithType: JsonSerializeExtension
- uid: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject*
  name: JsonToObject
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: Overload:WeihanLi.Extensions.JsonSerializeExtension.JsonToObject
  isSpec: "True"
  fullName: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject
  nameWithType: JsonSerializeExtension.JsonToObject
- uid: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)
  name: JsonToObject<T>(string, JsonSerializerSettings?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.JsonToObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)
  name.vb: JsonToObject(Of T)(String, JsonSerializerSettings)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject<T>(string, Newtonsoft.Json.JsonSerializerSettings?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject(Of T)(String, Newtonsoft.Json.JsonSerializerSettings)
  nameWithType: JsonSerializeExtension.JsonToObject<T>(string, JsonSerializerSettings?)
  nameWithType.vb: JsonSerializeExtension.JsonToObject(Of T)(String, JsonSerializerSettings)
- uid: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject``1(System.String)
  name: JsonToObject<T>(string)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.JsonToObject``1(System.String)
  name.vb: JsonToObject(Of T)(String)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject<T>(string)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.JsonToObject(Of T)(String)
  nameWithType: JsonSerializeExtension.JsonToObject<T>(string)
  nameWithType.vb: JsonSerializeExtension.JsonToObject(Of T)(String)
- uid: WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith(System.Action{Newtonsoft.Json.JsonSerializerSettings})
  name: SerializerSettingsWith(Action<JsonSerializerSettings>?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith(System.Action{Newtonsoft.Json.JsonSerializerSettings})
  name.vb: SerializerSettingsWith(Action(Of JsonSerializerSettings))
  fullName: WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith(System.Action<Newtonsoft.Json.JsonSerializerSettings>?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith(System.Action(Of Newtonsoft.Json.JsonSerializerSettings))
  nameWithType: JsonSerializeExtension.SerializerSettingsWith(Action<JsonSerializerSettings>?)
  nameWithType.vb: JsonSerializeExtension.SerializerSettingsWith(Action(Of JsonSerializerSettings))
- uid: WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith*
  name: SerializerSettingsWith
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: Overload:WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith
  isSpec: "True"
  fullName: WeihanLi.Extensions.JsonSerializeExtension.SerializerSettingsWith
  nameWithType: JsonSerializeExtension.SerializerSettingsWith
- uid: WeihanLi.Extensions.JsonSerializeExtension.StringToType*
  name: StringToType
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: Overload:WeihanLi.Extensions.JsonSerializeExtension.StringToType
  isSpec: "True"
  fullName: WeihanLi.Extensions.JsonSerializeExtension.StringToType
  nameWithType: JsonSerializeExtension.StringToType
- uid: WeihanLi.Extensions.JsonSerializeExtension.StringToType``1(System.String,``0)
  name: StringToType<T>(string, T)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.StringToType``1(System.String,``0)
  name.vb: StringToType(Of T)(String, T)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.StringToType<T>(string, T)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.StringToType(Of T)(String, T)
  nameWithType: JsonSerializeExtension.StringToType<T>(string, T)
  nameWithType.vb: JsonSerializeExtension.StringToType(Of T)(String, T)
- uid: WeihanLi.Extensions.JsonSerializeExtension.StringToType``1(System.String)
  name: StringToType<T>(string)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.StringToType``1(System.String)
  name.vb: StringToType(Of T)(String)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.StringToType<T>(string)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.StringToType(Of T)(String)
  nameWithType: JsonSerializeExtension.StringToType<T>(string)
  nameWithType.vb: JsonSerializeExtension.StringToType(Of T)(String)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name: ToJson(object, JsonSerializerSettings?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  name.vb: ToJson(Object, JsonSerializerSettings)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJson(object, Newtonsoft.Json.JsonSerializerSettings?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.ToJson(Object, Newtonsoft.Json.JsonSerializerSettings)
  nameWithType: JsonSerializeExtension.ToJson(object, JsonSerializerSettings?)
  nameWithType.vb: JsonSerializeExtension.ToJson(Object, JsonSerializerSettings)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)
  name: ToJson(object?, bool, JsonSerializerSettings?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)
  name.vb: ToJson(Object, Boolean, JsonSerializerSettings)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJson(object?, bool, Newtonsoft.Json.JsonSerializerSettings?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.ToJson(Object, Boolean, Newtonsoft.Json.JsonSerializerSettings)
  nameWithType: JsonSerializeExtension.ToJson(object?, bool, JsonSerializerSettings?)
  nameWithType.vb: JsonSerializeExtension.ToJson(Object, Boolean, JsonSerializerSettings)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,System.Boolean)
  name: ToJson(object?, bool)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object,System.Boolean)
  name.vb: ToJson(Object, Boolean)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJson(object?, bool)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.ToJson(Object, Boolean)
  nameWithType: JsonSerializeExtension.ToJson(object?, bool)
  nameWithType.vb: JsonSerializeExtension.ToJson(Object, Boolean)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object)
  name: ToJson(object?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.ToJson(System.Object)
  name.vb: ToJson(Object)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJson(object?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.ToJson(Object)
  nameWithType: JsonSerializeExtension.ToJson(object?)
  nameWithType.vb: JsonSerializeExtension.ToJson(Object)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJson*
  name: ToJson
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: Overload:WeihanLi.Extensions.JsonSerializeExtension.ToJson
  isSpec: "True"
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJson
  nameWithType: JsonSerializeExtension.ToJson
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString(System.Object)
  name: ToJsonOrString(object?)
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: M:WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString(System.Object)
  name.vb: ToJsonOrString(Object)
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString(object?)
  fullName.vb: WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString(Object)
  nameWithType: JsonSerializeExtension.ToJsonOrString(object?)
  nameWithType.vb: JsonSerializeExtension.ToJsonOrString(Object)
- uid: WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString*
  name: ToJsonOrString
  href: api/WeihanLi.Extensions.JsonSerializeExtension.yml
  commentId: Overload:WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString
  isSpec: "True"
  fullName: WeihanLi.Extensions.JsonSerializeExtension.ToJsonOrString
  nameWithType: JsonSerializeExtension.ToJsonOrString
- uid: WeihanLi.Extensions.NetExtension
  name: NetExtension
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: T:WeihanLi.Extensions.NetExtension
  fullName: WeihanLi.Extensions.NetExtension
  nameWithType: NetExtension
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytes(System.Net.WebRequest)
  name: GetResponseBytes(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseBytes(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytes(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseBytes(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytes*
  name: GetResponseBytes
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseBytes
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytes
  nameWithType: NetExtension.GetResponseBytes
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesAsync(System.Net.WebRequest)
  name: GetResponseBytesAsync(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseBytesAsync(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesAsync(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseBytesAsync(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesAsync*
  name: GetResponseBytesAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesAsync
  nameWithType: NetExtension.GetResponseBytesAsync
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesSafe(System.Net.WebRequest)
  name: GetResponseBytesSafe(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseBytesSafe(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesSafe(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseBytesSafe(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesSafe*
  name: GetResponseBytesSafe
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseBytesSafe
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesSafe
  nameWithType: NetExtension.GetResponseBytesSafe
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync(System.Net.WebRequest)
  name: GetResponseBytesSafeAsync(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseBytesSafeAsync(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync*
  name: GetResponseBytesSafeAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseBytesSafeAsync
  nameWithType: NetExtension.GetResponseBytesSafeAsync
- uid: WeihanLi.Extensions.NetExtension.GetResponseSafe(System.Net.WebRequest)
  name: GetResponseSafe(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseSafe(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseSafe(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseSafe(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseSafe*
  name: GetResponseSafe
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseSafe
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseSafe
  nameWithType: NetExtension.GetResponseSafe
- uid: WeihanLi.Extensions.NetExtension.GetResponseSafeAsync(System.Net.WebRequest)
  name: GetResponseSafeAsync(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseSafeAsync(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseSafeAsync(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseSafeAsync(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseSafeAsync*
  name: GetResponseSafeAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseSafeAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseSafeAsync
  nameWithType: NetExtension.GetResponseSafeAsync
- uid: WeihanLi.Extensions.NetExtension.GetResponseString(System.Net.WebRequest)
  name: GetResponseString(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseString(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseString(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseString(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseString*
  name: GetResponseString
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseString
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseString
  nameWithType: NetExtension.GetResponseString
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringAsync(System.Net.WebRequest)
  name: GetResponseStringAsync(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseStringAsync(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringAsync(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseStringAsync(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringAsync*
  name: GetResponseStringAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseStringAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringAsync
  nameWithType: NetExtension.GetResponseStringAsync
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringSafe(System.Net.WebRequest)
  name: GetResponseStringSafe(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseStringSafe(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringSafe(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseStringSafe(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringSafe*
  name: GetResponseStringSafe
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseStringSafe
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringSafe
  nameWithType: NetExtension.GetResponseStringSafe
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync(System.Net.WebRequest)
  name: GetResponseStringSafeAsync(WebRequest)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync(System.Net.WebRequest)
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync(System.Net.WebRequest)
  nameWithType: NetExtension.GetResponseStringSafeAsync(WebRequest)
- uid: WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync*
  name: GetResponseStringSafeAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.GetResponseStringSafeAsync
  nameWithType: NetExtension.GetResponseStringSafeAsync
- uid: WeihanLi.Extensions.NetExtension.ReadAllBytes(System.Net.WebResponse)
  name: ReadAllBytes(WebResponse)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.ReadAllBytes(System.Net.WebResponse)
  fullName: WeihanLi.Extensions.NetExtension.ReadAllBytes(System.Net.WebResponse)
  nameWithType: NetExtension.ReadAllBytes(WebResponse)
- uid: WeihanLi.Extensions.NetExtension.ReadAllBytes*
  name: ReadAllBytes
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.ReadAllBytes
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.ReadAllBytes
  nameWithType: NetExtension.ReadAllBytes
- uid: WeihanLi.Extensions.NetExtension.ReadAllBytesAsync(System.Net.WebResponse)
  name: ReadAllBytesAsync(WebResponse)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.ReadAllBytesAsync(System.Net.WebResponse)
  fullName: WeihanLi.Extensions.NetExtension.ReadAllBytesAsync(System.Net.WebResponse)
  nameWithType: NetExtension.ReadAllBytesAsync(WebResponse)
- uid: WeihanLi.Extensions.NetExtension.ReadAllBytesAsync*
  name: ReadAllBytesAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.ReadAllBytesAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.ReadAllBytesAsync
  nameWithType: NetExtension.ReadAllBytesAsync
- uid: WeihanLi.Extensions.NetExtension.ReadToEnd(System.Net.WebResponse)
  name: ReadToEnd(WebResponse)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.ReadToEnd(System.Net.WebResponse)
  fullName: WeihanLi.Extensions.NetExtension.ReadToEnd(System.Net.WebResponse)
  nameWithType: NetExtension.ReadToEnd(WebResponse)
- uid: WeihanLi.Extensions.NetExtension.ReadToEnd*
  name: ReadToEnd
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.ReadToEnd
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.ReadToEnd
  nameWithType: NetExtension.ReadToEnd
- uid: WeihanLi.Extensions.NetExtension.ReadToEndAsync(System.Net.WebResponse)
  name: ReadToEndAsync(WebResponse)
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: M:WeihanLi.Extensions.NetExtension.ReadToEndAsync(System.Net.WebResponse)
  fullName: WeihanLi.Extensions.NetExtension.ReadToEndAsync(System.Net.WebResponse)
  nameWithType: NetExtension.ReadToEndAsync(WebResponse)
- uid: WeihanLi.Extensions.NetExtension.ReadToEndAsync*
  name: ReadToEndAsync
  href: api/WeihanLi.Extensions.NetExtension.yml
  commentId: Overload:WeihanLi.Extensions.NetExtension.ReadToEndAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.NetExtension.ReadToEndAsync
  nameWithType: NetExtension.ReadToEndAsync
- uid: WeihanLi.Extensions.ProcessExtension
  name: ProcessExtension
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: T:WeihanLi.Extensions.ProcessExtension
  fullName: WeihanLi.Extensions.ProcessExtension
  nameWithType: ProcessExtension
- uid: WeihanLi.Extensions.ProcessExtension.Execute(System.Diagnostics.ProcessStartInfo)
  name: Execute(ProcessStartInfo)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.Execute(System.Diagnostics.ProcessStartInfo)
  fullName: WeihanLi.Extensions.ProcessExtension.Execute(System.Diagnostics.ProcessStartInfo)
  nameWithType: ProcessExtension.Execute(ProcessStartInfo)
- uid: WeihanLi.Extensions.ProcessExtension.Execute*
  name: Execute
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.Execute
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.Execute
  nameWithType: ProcessExtension.Execute
- uid: WeihanLi.Extensions.ProcessExtension.ExecuteAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  name: ExecuteAsync(ProcessStartInfo, CancellationToken)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.ExecuteAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.ProcessExtension.ExecuteAsync(System.Diagnostics.ProcessStartInfo, System.Threading.CancellationToken)
  nameWithType: ProcessExtension.ExecuteAsync(ProcessStartInfo, CancellationToken)
- uid: WeihanLi.Extensions.ProcessExtension.ExecuteAsync*
  name: ExecuteAsync
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.ExecuteAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.ExecuteAsync
  nameWithType: ProcessExtension.ExecuteAsync
- uid: WeihanLi.Extensions.ProcessExtension.GetExitCode(System.Diagnostics.ProcessStartInfo,System.IO.TextWriter,System.IO.TextWriter)
  name: GetExitCode(ProcessStartInfo, TextWriter?, TextWriter?)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.GetExitCode(System.Diagnostics.ProcessStartInfo,System.IO.TextWriter,System.IO.TextWriter)
  name.vb: GetExitCode(ProcessStartInfo, TextWriter, TextWriter)
  fullName: WeihanLi.Extensions.ProcessExtension.GetExitCode(System.Diagnostics.ProcessStartInfo, System.IO.TextWriter?, System.IO.TextWriter?)
  fullName.vb: WeihanLi.Extensions.ProcessExtension.GetExitCode(System.Diagnostics.ProcessStartInfo, System.IO.TextWriter, System.IO.TextWriter)
  nameWithType: ProcessExtension.GetExitCode(ProcessStartInfo, TextWriter?, TextWriter?)
  nameWithType.vb: ProcessExtension.GetExitCode(ProcessStartInfo, TextWriter, TextWriter)
- uid: WeihanLi.Extensions.ProcessExtension.GetExitCode*
  name: GetExitCode
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.GetExitCode
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.GetExitCode
  nameWithType: ProcessExtension.GetExitCode
- uid: WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync(System.Diagnostics.ProcessStartInfo,System.IO.TextWriter,System.IO.TextWriter,System.Threading.CancellationToken)
  name: GetExitCodeAsync(ProcessStartInfo, TextWriter?, TextWriter?, CancellationToken)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync(System.Diagnostics.ProcessStartInfo,System.IO.TextWriter,System.IO.TextWriter,System.Threading.CancellationToken)
  name.vb: GetExitCodeAsync(ProcessStartInfo, TextWriter, TextWriter, CancellationToken)
  fullName: WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync(System.Diagnostics.ProcessStartInfo, System.IO.TextWriter?, System.IO.TextWriter?, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync(System.Diagnostics.ProcessStartInfo, System.IO.TextWriter, System.IO.TextWriter, System.Threading.CancellationToken)
  nameWithType: ProcessExtension.GetExitCodeAsync(ProcessStartInfo, TextWriter?, TextWriter?, CancellationToken)
  nameWithType.vb: ProcessExtension.GetExitCodeAsync(ProcessStartInfo, TextWriter, TextWriter, CancellationToken)
- uid: WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync*
  name: GetExitCodeAsync
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.GetExitCodeAsync
  nameWithType: ProcessExtension.GetExitCodeAsync
- uid: WeihanLi.Extensions.ProcessExtension.GetResult(System.Diagnostics.ProcessStartInfo)
  name: GetResult(ProcessStartInfo)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.GetResult(System.Diagnostics.ProcessStartInfo)
  fullName: WeihanLi.Extensions.ProcessExtension.GetResult(System.Diagnostics.ProcessStartInfo)
  nameWithType: ProcessExtension.GetResult(ProcessStartInfo)
- uid: WeihanLi.Extensions.ProcessExtension.GetResult*
  name: GetResult
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.GetResult
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.GetResult
  nameWithType: ProcessExtension.GetResult
- uid: WeihanLi.Extensions.ProcessExtension.GetResultAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  name: GetResultAsync(ProcessStartInfo, CancellationToken)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.GetResultAsync(System.Diagnostics.ProcessStartInfo,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.ProcessExtension.GetResultAsync(System.Diagnostics.ProcessStartInfo, System.Threading.CancellationToken)
  nameWithType: ProcessExtension.GetResultAsync(ProcessStartInfo, CancellationToken)
- uid: WeihanLi.Extensions.ProcessExtension.GetResultAsync*
  name: GetResultAsync
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.GetResultAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.GetResultAsync
  nameWithType: ProcessExtension.GetResultAsync
- uid: WeihanLi.Extensions.ProcessExtension.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)
  name: WaitForExitAsync(Process, CancellationToken)
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: M:WeihanLi.Extensions.ProcessExtension.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.ProcessExtension.WaitForExitAsync(System.Diagnostics.Process, System.Threading.CancellationToken)
  nameWithType: ProcessExtension.WaitForExitAsync(Process, CancellationToken)
- uid: WeihanLi.Extensions.ProcessExtension.WaitForExitAsync*
  name: WaitForExitAsync
  href: api/WeihanLi.Extensions.ProcessExtension.yml
  commentId: Overload:WeihanLi.Extensions.ProcessExtension.WaitForExitAsync
  isSpec: "True"
  fullName: WeihanLi.Extensions.ProcessExtension.WaitForExitAsync
  nameWithType: ProcessExtension.WaitForExitAsync
- uid: WeihanLi.Extensions.QueryableExtension
  name: QueryableExtension
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: T:WeihanLi.Extensions.QueryableExtension
  fullName: WeihanLi.Extensions.QueryableExtension
  nameWithType: QueryableExtension
- uid: WeihanLi.Extensions.QueryableExtension.OrderBy*
  name: OrderBy
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: Overload:WeihanLi.Extensions.QueryableExtension.OrderBy
  isSpec: "True"
  fullName: WeihanLi.Extensions.QueryableExtension.OrderBy
  nameWithType: QueryableExtension.OrderBy
- uid: WeihanLi.Extensions.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)
  name: OrderBy<T>(IQueryable<T>, string, bool)
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: M:WeihanLi.Extensions.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)
  name.vb: OrderBy(Of T)(IQueryable(Of T), String, Boolean)
  fullName: WeihanLi.Extensions.QueryableExtension.OrderBy<T>(System.Linq.IQueryable<T>, string, bool)
  fullName.vb: WeihanLi.Extensions.QueryableExtension.OrderBy(Of T)(System.Linq.IQueryable(Of T), String, Boolean)
  nameWithType: QueryableExtension.OrderBy<T>(IQueryable<T>, string, bool)
  nameWithType.vb: QueryableExtension.OrderBy(Of T)(IQueryable(Of T), String, Boolean)
- uid: WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal*
  name: ToListResultWithTotal
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: Overload:WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal
  isSpec: "True"
  fullName: WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal
  nameWithType: QueryableExtension.ToListResultWithTotal
- uid: WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  name: ToListResultWithTotal<T>(IQueryable<T>, int, int)
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: M:WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  name.vb: ToListResultWithTotal(Of T)(IQueryable(Of T), Integer, Integer)
  fullName: WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal<T>(System.Linq.IQueryable<T>, int, int)
  fullName.vb: WeihanLi.Extensions.QueryableExtension.ToListResultWithTotal(Of T)(System.Linq.IQueryable(Of T), Integer, Integer)
  nameWithType: QueryableExtension.ToListResultWithTotal<T>(IQueryable<T>, int, int)
  nameWithType.vb: QueryableExtension.ToListResultWithTotal(Of T)(IQueryable(Of T), Integer, Integer)
- uid: WeihanLi.Extensions.QueryableExtension.ToPagedList*
  name: ToPagedList
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: Overload:WeihanLi.Extensions.QueryableExtension.ToPagedList
  isSpec: "True"
  fullName: WeihanLi.Extensions.QueryableExtension.ToPagedList
  nameWithType: QueryableExtension.ToPagedList
- uid: WeihanLi.Extensions.QueryableExtension.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  name: ToPagedList<T>(IQueryable<T>, int, int)
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: M:WeihanLi.Extensions.QueryableExtension.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)
  name.vb: ToPagedList(Of T)(IQueryable(Of T), Integer, Integer)
  fullName: WeihanLi.Extensions.QueryableExtension.ToPagedList<T>(System.Linq.IQueryable<T>, int, int)
  fullName.vb: WeihanLi.Extensions.QueryableExtension.ToPagedList(Of T)(System.Linq.IQueryable(Of T), Integer, Integer)
  nameWithType: QueryableExtension.ToPagedList<T>(IQueryable<T>, int, int)
  nameWithType.vb: QueryableExtension.ToPagedList(Of T)(IQueryable(Of T), Integer, Integer)
- uid: WeihanLi.Extensions.QueryableExtension.WhereIf*
  name: WhereIf
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: Overload:WeihanLi.Extensions.QueryableExtension.WhereIf
  isSpec: "True"
  fullName: WeihanLi.Extensions.QueryableExtension.WhereIf
  nameWithType: QueryableExtension.WhereIf
- uid: WeihanLi.Extensions.QueryableExtension.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  name: WhereIf<T>(IQueryable<T>, Expression<Func<T, bool>>, bool)
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: M:WeihanLi.Extensions.QueryableExtension.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)
  name.vb: WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Boolean)
  fullName: WeihanLi.Extensions.QueryableExtension.WhereIf<T>(System.Linq.IQueryable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, bool)
  fullName.vb: WeihanLi.Extensions.QueryableExtension.WhereIf(Of T)(System.Linq.IQueryable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), Boolean)
  nameWithType: QueryableExtension.WhereIf<T>(IQueryable<T>, Expression<Func<T, bool>>, bool)
  nameWithType.vb: QueryableExtension.WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Boolean)
- uid: WeihanLi.Extensions.QueryableExtension.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Boolean})
  name: WhereIf<T>(IQueryable<T>, Expression<Func<T, bool>>, Func<bool>)
  href: api/WeihanLi.Extensions.QueryableExtension.yml
  commentId: M:WeihanLi.Extensions.QueryableExtension.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Boolean})
  name.vb: WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of Boolean))
  fullName: WeihanLi.Extensions.QueryableExtension.WhereIf<T>(System.Linq.IQueryable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<bool>)
  fullName.vb: WeihanLi.Extensions.QueryableExtension.WhereIf(Of T)(System.Linq.IQueryable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of Boolean))
  nameWithType: QueryableExtension.WhereIf<T>(IQueryable<T>, Expression<Func<T, bool>>, Func<bool>)
  nameWithType.vb: QueryableExtension.WhereIf(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of Boolean))
- uid: WeihanLi.Extensions.ReflectionExtension
  name: ReflectionExtension
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: T:WeihanLi.Extensions.ReflectionExtension
  fullName: WeihanLi.Extensions.ReflectionExtension
  nameWithType: ReflectionExtension
- uid: WeihanLi.Extensions.ReflectionExtension.GetBaseMethod(System.Reflection.MethodInfo)
  name: GetBaseMethod(MethodInfo?)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetBaseMethod(System.Reflection.MethodInfo)
  name.vb: GetBaseMethod(MethodInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetBaseMethod(System.Reflection.MethodInfo?)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetBaseMethod(System.Reflection.MethodInfo)
  nameWithType: ReflectionExtension.GetBaseMethod(MethodInfo?)
  nameWithType.vb: ReflectionExtension.GetBaseMethod(MethodInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetBaseMethod*
  name: GetBaseMethod
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetBaseMethod
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetBaseMethod
  nameWithType: ReflectionExtension.GetBaseMethod
- uid: WeihanLi.Extensions.ReflectionExtension.GetColumnName(System.Reflection.PropertyInfo)
  name: GetColumnName(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetColumnName(System.Reflection.PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetColumnName(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.GetColumnName(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetColumnName*
  name: GetColumnName
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetColumnName
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetColumnName
  nameWithType: ReflectionExtension.GetColumnName
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  name: GetCustomAttribute(Assembly, Type, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  name.vb: GetCustomAttribute(Assembly, Type, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly, System.Type, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly, System.Type, Boolean)
  nameWithType: ReflectionExtension.GetCustomAttribute(Assembly, Type, bool)
  nameWithType.vb: ReflectionExtension.GetCustomAttribute(Assembly, Type, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  name: GetCustomAttribute(Assembly, Type)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute(System.Reflection.Assembly, System.Type)
  nameWithType: ReflectionExtension.GetCustomAttribute(Assembly, Type)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute*
  name: GetCustomAttribute
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttribute
  nameWithType: ReflectionExtension.GetCustomAttribute
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  name: GetCustomAttributes(Assembly, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  name.vb: GetCustomAttributes(Assembly, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly, Boolean)
  nameWithType: ReflectionExtension.GetCustomAttributes(Assembly, bool)
  nameWithType.vb: ReflectionExtension.GetCustomAttributes(Assembly, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  name: GetCustomAttributes(Assembly, Type, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  name.vb: GetCustomAttributes(Assembly, Type, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly, System.Type, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly, System.Type, Boolean)
  nameWithType: ReflectionExtension.GetCustomAttributes(Assembly, Type, bool)
  nameWithType.vb: ReflectionExtension.GetCustomAttributes(Assembly, Type, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  name: GetCustomAttributes(Assembly, Type)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly, System.Type)
  nameWithType: ReflectionExtension.GetCustomAttributes(Assembly, Type)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly)
  name: GetCustomAttributes(Assembly)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes(System.Reflection.Assembly)
  nameWithType: ReflectionExtension.GetCustomAttributes(Assembly)
- uid: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes*
  name: GetCustomAttributes
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetCustomAttributes
  nameWithType: ReflectionExtension.GetCustomAttributes
- uid: WeihanLi.Extensions.ReflectionExtension.GetDescription(System.Reflection.MemberInfo)
  name: GetDescription(MemberInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetDescription(System.Reflection.MemberInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetDescription(System.Reflection.MemberInfo)
  nameWithType: ReflectionExtension.GetDescription(MemberInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetDescription*
  name: GetDescription
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetDescription
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetDescription
  nameWithType: ReflectionExtension.GetDescription
- uid: WeihanLi.Extensions.ReflectionExtension.GetDisplayName(System.Reflection.MemberInfo)
  name: GetDisplayName(MemberInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetDisplayName(System.Reflection.MemberInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetDisplayName(System.Reflection.MemberInfo)
  nameWithType: ReflectionExtension.GetDisplayName(MemberInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetDisplayName*
  name: GetDisplayName
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetDisplayName
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetDisplayName
  nameWithType: ReflectionExtension.GetDisplayName
- uid: WeihanLi.Extensions.ReflectionExtension.GetField*
  name: GetField
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetField
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetField
  nameWithType: ReflectionExtension.GetField
- uid: WeihanLi.Extensions.ReflectionExtension.GetField``1(``0,System.String,System.Reflection.BindingFlags)
  name: GetField<T>(T, string, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetField``1(``0,System.String,System.Reflection.BindingFlags)
  name.vb: GetField(Of T)(T, String, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetField<T>(T, string, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetField(Of T)(T, String, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetField<T>(T, string, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetField(Of T)(T, String, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetField``1(``0,System.String)
  name: GetField<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetField``1(``0,System.String)
  name.vb: GetField(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetField<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetField(Of T)(T, String)
  nameWithType: ReflectionExtension.GetField<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetField(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetFields(System.Object,System.Reflection.BindingFlags)
  name: GetFields(object, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetFields(System.Object,System.Reflection.BindingFlags)
  name.vb: GetFields(Object, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetFields(object, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetFields(Object, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetFields(object, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetFields(Object, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetFields(System.Object)
  name: GetFields(object)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetFields(System.Object)
  name.vb: GetFields(Object)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetFields(object)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetFields(Object)
  nameWithType: ReflectionExtension.GetFields(object)
  nameWithType.vb: ReflectionExtension.GetFields(Object)
- uid: WeihanLi.Extensions.ReflectionExtension.GetFields*
  name: GetFields
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetFields
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetFields
  nameWithType: ReflectionExtension.GetFields
- uid: WeihanLi.Extensions.ReflectionExtension.GetFieldValue*
  name: GetFieldValue
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetFieldValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetFieldValue
  nameWithType: ReflectionExtension.GetFieldValue
- uid: WeihanLi.Extensions.ReflectionExtension.GetFieldValue``1(``0,System.String)
  name: GetFieldValue<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetFieldValue``1(``0,System.String)
  name.vb: GetFieldValue(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetFieldValue<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetFieldValue(Of T)(T, String)
  nameWithType: ReflectionExtension.GetFieldValue<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetFieldValue(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethod*
  name: GetMethod
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetMethod
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethod
  nameWithType: ReflectionExtension.GetMethod
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethod``1(``0,System.String,System.Reflection.BindingFlags)
  name: GetMethod<T>(T, string, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetMethod``1(``0,System.String,System.Reflection.BindingFlags)
  name.vb: GetMethod(Of T)(T, String, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethod<T>(T, string, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetMethod(Of T)(T, String, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetMethod<T>(T, string, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetMethod(Of T)(T, String, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethod``1(``0,System.String)
  name: GetMethod<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetMethod``1(``0,System.String)
  name.vb: GetMethod(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethod<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetMethod(Of T)(T, String)
  nameWithType: ReflectionExtension.GetMethod<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetMethod(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature(System.Type,System.Reflection.MethodInfo)
  name: GetMethodBySignature(Type, MethodInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature(System.Type,System.Reflection.MethodInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature(System.Type, System.Reflection.MethodInfo)
  nameWithType: ReflectionExtension.GetMethodBySignature(Type, MethodInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature*
  name: GetMethodBySignature
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethodBySignature
  nameWithType: ReflectionExtension.GetMethodBySignature
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethods*
  name: GetMethods
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetMethods
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethods
  nameWithType: ReflectionExtension.GetMethods
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethods``1(``0,System.Reflection.BindingFlags)
  name: GetMethods<T>(T, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetMethods``1(``0,System.Reflection.BindingFlags)
  name.vb: GetMethods(Of T)(T, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethods<T>(T, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetMethods(Of T)(T, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetMethods<T>(T, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetMethods(Of T)(T, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetMethods``1(``0)
  name: GetMethods<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetMethods``1(``0)
  name.vb: GetMethods(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetMethods<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetMethods(Of T)(T)
  nameWithType: ReflectionExtension.GetMethods<T>(T)
  nameWithType.vb: ReflectionExtension.GetMethods(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperties(System.Object,System.Reflection.BindingFlags)
  name: GetProperties(object, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetProperties(System.Object,System.Reflection.BindingFlags)
  name.vb: GetProperties(Object, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperties(object, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetProperties(Object, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetProperties(object, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetProperties(Object, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperties(System.Object)
  name: GetProperties(object)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetProperties(System.Object)
  name.vb: GetProperties(Object)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperties(object)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetProperties(Object)
  nameWithType: ReflectionExtension.GetProperties(object)
  nameWithType.vb: ReflectionExtension.GetProperties(Object)
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperties*
  name: GetProperties
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetProperties
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperties
  nameWithType: ReflectionExtension.GetProperties
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperty*
  name: GetProperty
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetProperty
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperty
  nameWithType: ReflectionExtension.GetProperty
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperty``1(``0,System.String,System.Reflection.BindingFlags)
  name: GetProperty<T>(T, string, BindingFlags)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetProperty``1(``0,System.String,System.Reflection.BindingFlags)
  name.vb: GetProperty(Of T)(T, String, BindingFlags)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperty<T>(T, string, System.Reflection.BindingFlags)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetProperty(Of T)(T, String, System.Reflection.BindingFlags)
  nameWithType: ReflectionExtension.GetProperty<T>(T, string, BindingFlags)
  nameWithType.vb: ReflectionExtension.GetProperty(Of T)(T, String, BindingFlags)
- uid: WeihanLi.Extensions.ReflectionExtension.GetProperty``1(``0,System.String)
  name: GetProperty<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetProperty``1(``0,System.String)
  name.vb: GetProperty(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetProperty<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetProperty(Of T)(T, String)
  nameWithType: ReflectionExtension.GetProperty<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetProperty(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField*
  name: GetPropertyOrField
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField
  nameWithType: ReflectionExtension.GetPropertyOrField
- uid: WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField``1(``0,System.String)
  name: GetPropertyOrField<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField``1(``0,System.String)
  name.vb: GetPropertyOrField(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetPropertyOrField(Of T)(T, String)
  nameWithType: ReflectionExtension.GetPropertyOrField<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetPropertyOrField(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetPropertyValue*
  name: GetPropertyValue
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetPropertyValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetPropertyValue
  nameWithType: ReflectionExtension.GetPropertyValue
- uid: WeihanLi.Extensions.ReflectionExtension.GetPropertyValue``1(``0,System.String)
  name: GetPropertyValue<T>(T, string)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetPropertyValue``1(``0,System.String)
  name.vb: GetPropertyValue(Of T)(T, String)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetPropertyValue<T>(T, string)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetPropertyValue(Of T)(T, String)
  nameWithType: ReflectionExtension.GetPropertyValue<T>(T, string)
  nameWithType.vb: ReflectionExtension.GetPropertyValue(Of T)(T, String)
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueGetter(System.Reflection.PropertyInfo)
  name: GetValueGetter(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetValueGetter(System.Reflection.PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueGetter(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.GetValueGetter(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueGetter*
  name: GetValueGetter
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetValueGetter
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueGetter
  nameWithType: ReflectionExtension.GetValueGetter
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueGetter``1(System.Reflection.PropertyInfo)
  name: GetValueGetter<T>(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetValueGetter``1(System.Reflection.PropertyInfo)
  name.vb: GetValueGetter(Of T)(PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueGetter<T>(System.Reflection.PropertyInfo)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetValueGetter(Of T)(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.GetValueGetter<T>(PropertyInfo)
  nameWithType.vb: ReflectionExtension.GetValueGetter(Of T)(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueSetter(System.Reflection.PropertyInfo)
  name: GetValueSetter(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetValueSetter(System.Reflection.PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueSetter(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.GetValueSetter(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueSetter*
  name: GetValueSetter
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.GetValueSetter
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueSetter
  nameWithType: ReflectionExtension.GetValueSetter
- uid: WeihanLi.Extensions.ReflectionExtension.GetValueSetter``1(System.Reflection.PropertyInfo)
  name: GetValueSetter<T>(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.GetValueSetter``1(System.Reflection.PropertyInfo)
  name.vb: GetValueSetter(Of T)(PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.GetValueSetter<T>(System.Reflection.PropertyInfo)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.GetValueSetter(Of T)(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.GetValueSetter<T>(PropertyInfo)
  nameWithType.vb: ReflectionExtension.GetValueSetter(Of T)(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor*
  name: HasEmptyConstructor
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor
  nameWithType: ReflectionExtension.HasEmptyConstructor
- uid: WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor``1(``0)
  name: HasEmptyConstructor<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor``1(``0)
  name.vb: HasEmptyConstructor(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.HasEmptyConstructor(Of T)(T)
  nameWithType: ReflectionExtension.HasEmptyConstructor<T>(T)
  nameWithType.vb: ReflectionExtension.HasEmptyConstructor(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.IsArray*
  name: IsArray
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsArray
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsArray
  nameWithType: ReflectionExtension.IsArray
- uid: WeihanLi.Extensions.ReflectionExtension.IsArray``1(``0)
  name: IsArray<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsArray``1(``0)
  name.vb: IsArray(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsArray<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsArray(Of T)(T)
  nameWithType: ReflectionExtension.IsArray<T>(T)
  nameWithType.vb: ReflectionExtension.IsArray(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined(System.Object,System.Type,System.Boolean)
  name: IsAttributeDefined(object, Type, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined(System.Object,System.Type,System.Boolean)
  name.vb: IsAttributeDefined(Object, Type, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined(object, System.Type, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined(Object, System.Type, Boolean)
  nameWithType: ReflectionExtension.IsAttributeDefined(object, Type, bool)
  nameWithType.vb: ReflectionExtension.IsAttributeDefined(Object, Type, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined*
  name: IsAttributeDefined
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined
  nameWithType: ReflectionExtension.IsAttributeDefined
- uid: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined``1(System.Object,System.Boolean)
  name: IsAttributeDefined<T>(object, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined``1(System.Object,System.Boolean)
  name.vb: IsAttributeDefined(Of T)(Object, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined<T>(object, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsAttributeDefined(Of T)(Object, Boolean)
  nameWithType: ReflectionExtension.IsAttributeDefined<T>(object, bool)
  nameWithType.vb: ReflectionExtension.IsAttributeDefined(Of T)(Object, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  name: IsDefined(Assembly, Type, bool)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  name.vb: IsDefined(Assembly, Type, Boolean)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly, System.Type, bool)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly, System.Type, Boolean)
  nameWithType: ReflectionExtension.IsDefined(Assembly, Type, bool)
  nameWithType.vb: ReflectionExtension.IsDefined(Assembly, Type, Boolean)
- uid: WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly,System.Type)
  name: IsDefined(Assembly, Type)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly,System.Type)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsDefined(System.Reflection.Assembly, System.Type)
  nameWithType: ReflectionExtension.IsDefined(Assembly, Type)
- uid: WeihanLi.Extensions.ReflectionExtension.IsDefined*
  name: IsDefined
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsDefined
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsDefined
  nameWithType: ReflectionExtension.IsDefined
- uid: WeihanLi.Extensions.ReflectionExtension.IsEnum*
  name: IsEnum
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsEnum
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsEnum
  nameWithType: ReflectionExtension.IsEnum
- uid: WeihanLi.Extensions.ReflectionExtension.IsEnum``1(``0)
  name: IsEnum<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsEnum``1(``0)
  name.vb: IsEnum(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsEnum<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsEnum(Of T)(T)
  nameWithType: ReflectionExtension.IsEnum<T>(T)
  nameWithType.vb: ReflectionExtension.IsEnum(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.IsSubclassOf*
  name: IsSubclassOf
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsSubclassOf
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsSubclassOf
  nameWithType: ReflectionExtension.IsSubclassOf
- uid: WeihanLi.Extensions.ReflectionExtension.IsSubclassOf``1(``0,System.Type)
  name: IsSubclassOf<T>(T, Type)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsSubclassOf``1(``0,System.Type)
  name.vb: IsSubclassOf(Of T)(T, Type)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsSubclassOf<T>(T, System.Type)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsSubclassOf(Of T)(T, System.Type)
  nameWithType: ReflectionExtension.IsSubclassOf<T>(T, Type)
  nameWithType.vb: ReflectionExtension.IsSubclassOf(Of T)(T, Type)
- uid: WeihanLi.Extensions.ReflectionExtension.IsValueTuple*
  name: IsValueTuple
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsValueTuple
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsValueTuple
  nameWithType: ReflectionExtension.IsValueTuple
- uid: WeihanLi.Extensions.ReflectionExtension.IsValueTuple``1(``0)
  name: IsValueTuple<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsValueTuple``1(``0)
  name.vb: IsValueTuple(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsValueTuple<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsValueTuple(Of T)(T)
  nameWithType: ReflectionExtension.IsValueTuple<T>(T)
  nameWithType.vb: ReflectionExtension.IsValueTuple(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.IsValueType*
  name: IsValueType
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsValueType
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsValueType
  nameWithType: ReflectionExtension.IsValueType
- uid: WeihanLi.Extensions.ReflectionExtension.IsValueType``1(``0)
  name: IsValueType<T>(T)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsValueType``1(``0)
  name.vb: IsValueType(Of T)(T)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsValueType<T>(T)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.IsValueType(Of T)(T)
  nameWithType: ReflectionExtension.IsValueType<T>(T)
  nameWithType.vb: ReflectionExtension.IsValueType(Of T)(T)
- uid: WeihanLi.Extensions.ReflectionExtension.IsVisible(System.Reflection.MethodBase)
  name: IsVisible(MethodBase)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsVisible(System.Reflection.MethodBase)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsVisible(System.Reflection.MethodBase)
  nameWithType: ReflectionExtension.IsVisible(MethodBase)
- uid: WeihanLi.Extensions.ReflectionExtension.IsVisible*
  name: IsVisible
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsVisible
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsVisible
  nameWithType: ReflectionExtension.IsVisible
- uid: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.MethodInfo)
  name: IsVisibleAndVirtual(MethodInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.MethodInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.MethodInfo)
  nameWithType: ReflectionExtension.IsVisibleAndVirtual(MethodInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.PropertyInfo)
  name: IsVisibleAndVirtual(PropertyInfo)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.PropertyInfo)
  fullName: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual(System.Reflection.PropertyInfo)
  nameWithType: ReflectionExtension.IsVisibleAndVirtual(PropertyInfo)
- uid: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual*
  name: IsVisibleAndVirtual
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.IsVisibleAndVirtual
  nameWithType: ReflectionExtension.IsVisibleAndVirtual
- uid: WeihanLi.Extensions.ReflectionExtension.SetFieldValue*
  name: SetFieldValue
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.SetFieldValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.SetFieldValue
  nameWithType: ReflectionExtension.SetFieldValue
- uid: WeihanLi.Extensions.ReflectionExtension.SetFieldValue``1(``0,System.String,System.Object)
  name: SetFieldValue<T>(T, string, object?)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.SetFieldValue``1(``0,System.String,System.Object)
  name.vb: SetFieldValue(Of T)(T, String, Object)
  fullName: WeihanLi.Extensions.ReflectionExtension.SetFieldValue<T>(T, string, object?)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.SetFieldValue(Of T)(T, String, Object)
  nameWithType: ReflectionExtension.SetFieldValue<T>(T, string, object?)
  nameWithType.vb: ReflectionExtension.SetFieldValue(Of T)(T, String, Object)
- uid: WeihanLi.Extensions.ReflectionExtension.SetPropertyValue*
  name: SetPropertyValue
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: Overload:WeihanLi.Extensions.ReflectionExtension.SetPropertyValue
  isSpec: "True"
  fullName: WeihanLi.Extensions.ReflectionExtension.SetPropertyValue
  nameWithType: ReflectionExtension.SetPropertyValue
- uid: WeihanLi.Extensions.ReflectionExtension.SetPropertyValue``1(``0,System.String,System.Object)
  name: SetPropertyValue<T>(T, string, object?)
  href: api/WeihanLi.Extensions.ReflectionExtension.yml
  commentId: M:WeihanLi.Extensions.ReflectionExtension.SetPropertyValue``1(``0,System.String,System.Object)
  name.vb: SetPropertyValue(Of T)(T, String, Object)
  fullName: WeihanLi.Extensions.ReflectionExtension.SetPropertyValue<T>(T, string, object?)
  fullName.vb: WeihanLi.Extensions.ReflectionExtension.SetPropertyValue(Of T)(T, String, Object)
  nameWithType: ReflectionExtension.SetPropertyValue<T>(T, string, object?)
  nameWithType.vb: ReflectionExtension.SetPropertyValue(Of T)(T, String, Object)
- uid: WeihanLi.Extensions.StringExtension
  name: StringExtension
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: T:WeihanLi.Extensions.StringExtension
  fullName: WeihanLi.Extensions.StringExtension
  nameWithType: StringExtension
- uid: WeihanLi.Extensions.StringExtension.Base64Decode(System.String,System.Text.Encoding)
  name: Base64Decode(string, Encoding)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64Decode(System.String,System.Text.Encoding)
  name.vb: Base64Decode(String, Encoding)
  fullName: WeihanLi.Extensions.StringExtension.Base64Decode(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64Decode(String, System.Text.Encoding)
  nameWithType: StringExtension.Base64Decode(string, Encoding)
  nameWithType.vb: StringExtension.Base64Decode(String, Encoding)
- uid: WeihanLi.Extensions.StringExtension.Base64Decode(System.String)
  name: Base64Decode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64Decode(System.String)
  name.vb: Base64Decode(String)
  fullName: WeihanLi.Extensions.StringExtension.Base64Decode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64Decode(String)
  nameWithType: StringExtension.Base64Decode(string)
  nameWithType.vb: StringExtension.Base64Decode(String)
- uid: WeihanLi.Extensions.StringExtension.Base64Decode*
  name: Base64Decode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.Base64Decode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.Base64Decode
  nameWithType: StringExtension.Base64Decode
- uid: WeihanLi.Extensions.StringExtension.Base64Encode(System.String,System.Text.Encoding)
  name: Base64Encode(string, Encoding)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64Encode(System.String,System.Text.Encoding)
  name.vb: Base64Encode(String, Encoding)
  fullName: WeihanLi.Extensions.StringExtension.Base64Encode(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64Encode(String, System.Text.Encoding)
  nameWithType: StringExtension.Base64Encode(string, Encoding)
  nameWithType.vb: StringExtension.Base64Encode(String, Encoding)
- uid: WeihanLi.Extensions.StringExtension.Base64Encode(System.String)
  name: Base64Encode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64Encode(System.String)
  name.vb: Base64Encode(String)
  fullName: WeihanLi.Extensions.StringExtension.Base64Encode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64Encode(String)
  nameWithType: StringExtension.Base64Encode(string)
  nameWithType.vb: StringExtension.Base64Encode(String)
- uid: WeihanLi.Extensions.StringExtension.Base64Encode*
  name: Base64Encode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.Base64Encode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.Base64Encode
  nameWithType: StringExtension.Base64Encode
- uid: WeihanLi.Extensions.StringExtension.Base64UrlDecode(System.String)
  name: Base64UrlDecode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64UrlDecode(System.String)
  name.vb: Base64UrlDecode(String)
  fullName: WeihanLi.Extensions.StringExtension.Base64UrlDecode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64UrlDecode(String)
  nameWithType: StringExtension.Base64UrlDecode(string)
  nameWithType.vb: StringExtension.Base64UrlDecode(String)
- uid: WeihanLi.Extensions.StringExtension.Base64UrlDecode*
  name: Base64UrlDecode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.Base64UrlDecode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.Base64UrlDecode
  nameWithType: StringExtension.Base64UrlDecode
- uid: WeihanLi.Extensions.StringExtension.Base64UrlEncode(System.String)
  name: Base64UrlEncode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.Base64UrlEncode(System.String)
  name.vb: Base64UrlEncode(String)
  fullName: WeihanLi.Extensions.StringExtension.Base64UrlEncode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.Base64UrlEncode(String)
  nameWithType: StringExtension.Base64UrlEncode(string)
  nameWithType.vb: StringExtension.Base64UrlEncode(String)
- uid: WeihanLi.Extensions.StringExtension.Base64UrlEncode*
  name: Base64UrlEncode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.Base64UrlEncode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.Base64UrlEncode
  nameWithType: StringExtension.Base64UrlEncode
- uid: WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault(System.String,System.String)
  name: GetNotEmptyValueOrDefault(string?, string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault(System.String,System.String)
  name.vb: GetNotEmptyValueOrDefault(String, String)
  fullName: WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault(string?, string)
  fullName.vb: WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault(String, String)
  nameWithType: StringExtension.GetNotEmptyValueOrDefault(string?, string)
  nameWithType.vb: StringExtension.GetNotEmptyValueOrDefault(String, String)
- uid: WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault*
  name: GetNotEmptyValueOrDefault
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.GetNotEmptyValueOrDefault
  nameWithType: StringExtension.GetNotEmptyValueOrDefault
- uid: WeihanLi.Extensions.StringExtension.GetTypeByTypeName(System.String)
  name: GetTypeByTypeName(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.GetTypeByTypeName(System.String)
  name.vb: GetTypeByTypeName(String)
  fullName: WeihanLi.Extensions.StringExtension.GetTypeByTypeName(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.GetTypeByTypeName(String)
  nameWithType: StringExtension.GetTypeByTypeName(string)
  nameWithType.vb: StringExtension.GetTypeByTypeName(String)
- uid: WeihanLi.Extensions.StringExtension.GetTypeByTypeName*
  name: GetTypeByTypeName
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.GetTypeByTypeName
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.GetTypeByTypeName
  nameWithType: StringExtension.GetTypeByTypeName
- uid: WeihanLi.Extensions.StringExtension.GetValueOrDefault(System.String,System.Func{System.String})
  name: GetValueOrDefault(string?, Func<string>)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.GetValueOrDefault(System.String,System.Func{System.String})
  name.vb: GetValueOrDefault(String, Func(Of String))
  fullName: WeihanLi.Extensions.StringExtension.GetValueOrDefault(string?, System.Func<string>)
  fullName.vb: WeihanLi.Extensions.StringExtension.GetValueOrDefault(String, System.Func(Of String))
  nameWithType: StringExtension.GetValueOrDefault(string?, Func<string>)
  nameWithType.vb: StringExtension.GetValueOrDefault(String, Func(Of String))
- uid: WeihanLi.Extensions.StringExtension.GetValueOrDefault(System.String,System.String)
  name: GetValueOrDefault(string?, string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.GetValueOrDefault(System.String,System.String)
  name.vb: GetValueOrDefault(String, String)
  fullName: WeihanLi.Extensions.StringExtension.GetValueOrDefault(string?, string)
  fullName.vb: WeihanLi.Extensions.StringExtension.GetValueOrDefault(String, String)
  nameWithType: StringExtension.GetValueOrDefault(string?, string)
  nameWithType.vb: StringExtension.GetValueOrDefault(String, String)
- uid: WeihanLi.Extensions.StringExtension.GetValueOrDefault*
  name: GetValueOrDefault
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.GetValueOrDefault
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.GetValueOrDefault
  nameWithType: StringExtension.GetValueOrDefault
- uid: WeihanLi.Extensions.StringExtension.HtmlDecode(System.String)
  name: HtmlDecode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.HtmlDecode(System.String)
  name.vb: HtmlDecode(String)
  fullName: WeihanLi.Extensions.StringExtension.HtmlDecode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.HtmlDecode(String)
  nameWithType: StringExtension.HtmlDecode(string)
  nameWithType.vb: StringExtension.HtmlDecode(String)
- uid: WeihanLi.Extensions.StringExtension.HtmlDecode*
  name: HtmlDecode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.HtmlDecode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.HtmlDecode
  nameWithType: StringExtension.HtmlDecode
- uid: WeihanLi.Extensions.StringExtension.HtmlEncode(System.String)
  name: HtmlEncode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.HtmlEncode(System.String)
  name.vb: HtmlEncode(String)
  fullName: WeihanLi.Extensions.StringExtension.HtmlEncode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.HtmlEncode(String)
  nameWithType: StringExtension.HtmlEncode(string)
  nameWithType.vb: StringExtension.HtmlEncode(String)
- uid: WeihanLi.Extensions.StringExtension.HtmlEncode*
  name: HtmlEncode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.HtmlEncode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.HtmlEncode
  nameWithType: StringExtension.HtmlEncode
- uid: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(System.String,System.Boolean)
  name: JavaScriptStringEncode(string, bool)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(System.String,System.Boolean)
  name.vb: JavaScriptStringEncode(String, Boolean)
  fullName: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(string, bool)
  fullName.vb: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(String, Boolean)
  nameWithType: StringExtension.JavaScriptStringEncode(string, bool)
  nameWithType.vb: StringExtension.JavaScriptStringEncode(String, Boolean)
- uid: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(System.String)
  name: JavaScriptStringEncode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(System.String)
  name.vb: JavaScriptStringEncode(String)
  fullName: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode(String)
  nameWithType: StringExtension.JavaScriptStringEncode(string)
  nameWithType.vb: StringExtension.JavaScriptStringEncode(String)
- uid: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode*
  name: JavaScriptStringEncode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.JavaScriptStringEncode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.JavaScriptStringEncode
  nameWithType: StringExtension.JavaScriptStringEncode
- uid: WeihanLi.Extensions.StringExtension.ParseQueryString(System.String,System.Text.Encoding)
  name: ParseQueryString(string, Encoding)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.ParseQueryString(System.String,System.Text.Encoding)
  name.vb: ParseQueryString(String, Encoding)
  fullName: WeihanLi.Extensions.StringExtension.ParseQueryString(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.StringExtension.ParseQueryString(String, System.Text.Encoding)
  nameWithType: StringExtension.ParseQueryString(string, Encoding)
  nameWithType.vb: StringExtension.ParseQueryString(String, Encoding)
- uid: WeihanLi.Extensions.StringExtension.ParseQueryString(System.String)
  name: ParseQueryString(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.ParseQueryString(System.String)
  name.vb: ParseQueryString(String)
  fullName: WeihanLi.Extensions.StringExtension.ParseQueryString(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.ParseQueryString(String)
  nameWithType: StringExtension.ParseQueryString(string)
  nameWithType.vb: StringExtension.ParseQueryString(String)
- uid: WeihanLi.Extensions.StringExtension.ParseQueryString*
  name: ParseQueryString
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.ParseQueryString
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.ParseQueryString
  nameWithType: StringExtension.ParseQueryString
- uid: WeihanLi.Extensions.StringExtension.SplitArray*
  name: SplitArray
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.SplitArray
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.SplitArray
  nameWithType: StringExtension.SplitArray
- uid: WeihanLi.Extensions.StringExtension.SplitArray``1(System.String,System.Char[],System.StringSplitOptions)
  name: SplitArray<T>(string?, char[], StringSplitOptions)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.SplitArray``1(System.String,System.Char[],System.StringSplitOptions)
  name.vb: SplitArray(Of T)(String, Char(), StringSplitOptions)
  fullName: WeihanLi.Extensions.StringExtension.SplitArray<T>(string?, char[], System.StringSplitOptions)
  fullName.vb: WeihanLi.Extensions.StringExtension.SplitArray(Of T)(String, Char(), System.StringSplitOptions)
  nameWithType: StringExtension.SplitArray<T>(string?, char[], StringSplitOptions)
  nameWithType.vb: StringExtension.SplitArray(Of T)(String, Char(), StringSplitOptions)
- uid: WeihanLi.Extensions.StringExtension.SplitArray``1(System.String,System.StringSplitOptions)
  name: SplitArray<T>(string?, StringSplitOptions)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.SplitArray``1(System.String,System.StringSplitOptions)
  name.vb: SplitArray(Of T)(String, StringSplitOptions)
  fullName: WeihanLi.Extensions.StringExtension.SplitArray<T>(string?, System.StringSplitOptions)
  fullName.vb: WeihanLi.Extensions.StringExtension.SplitArray(Of T)(String, System.StringSplitOptions)
  nameWithType: StringExtension.SplitArray<T>(string?, StringSplitOptions)
  nameWithType.vb: StringExtension.SplitArray(Of T)(String, StringSplitOptions)
- uid: WeihanLi.Extensions.StringExtension.TrimStart(System.String,System.String)
  name: TrimStart(string?, string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.TrimStart(System.String,System.String)
  name.vb: TrimStart(String, String)
  fullName: WeihanLi.Extensions.StringExtension.TrimStart(string?, string)
  fullName.vb: WeihanLi.Extensions.StringExtension.TrimStart(String, String)
  nameWithType: StringExtension.TrimStart(string?, string)
  nameWithType.vb: StringExtension.TrimStart(String, String)
- uid: WeihanLi.Extensions.StringExtension.TrimStart*
  name: TrimStart
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.TrimStart
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.TrimStart
  nameWithType: StringExtension.TrimStart
- uid: WeihanLi.Extensions.StringExtension.UrlDecode(System.String,System.Text.Encoding)
  name: UrlDecode(string, Encoding)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.UrlDecode(System.String,System.Text.Encoding)
  name.vb: UrlDecode(String, Encoding)
  fullName: WeihanLi.Extensions.StringExtension.UrlDecode(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.StringExtension.UrlDecode(String, System.Text.Encoding)
  nameWithType: StringExtension.UrlDecode(string, Encoding)
  nameWithType.vb: StringExtension.UrlDecode(String, Encoding)
- uid: WeihanLi.Extensions.StringExtension.UrlDecode(System.String)
  name: UrlDecode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.UrlDecode(System.String)
  name.vb: UrlDecode(String)
  fullName: WeihanLi.Extensions.StringExtension.UrlDecode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.UrlDecode(String)
  nameWithType: StringExtension.UrlDecode(string)
  nameWithType.vb: StringExtension.UrlDecode(String)
- uid: WeihanLi.Extensions.StringExtension.UrlDecode*
  name: UrlDecode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.UrlDecode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.UrlDecode
  nameWithType: StringExtension.UrlDecode
- uid: WeihanLi.Extensions.StringExtension.UrlEncode(System.String,System.Text.Encoding)
  name: UrlEncode(string, Encoding)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.UrlEncode(System.String,System.Text.Encoding)
  name.vb: UrlEncode(String, Encoding)
  fullName: WeihanLi.Extensions.StringExtension.UrlEncode(string, System.Text.Encoding)
  fullName.vb: WeihanLi.Extensions.StringExtension.UrlEncode(String, System.Text.Encoding)
  nameWithType: StringExtension.UrlEncode(string, Encoding)
  nameWithType.vb: StringExtension.UrlEncode(String, Encoding)
- uid: WeihanLi.Extensions.StringExtension.UrlEncode(System.String)
  name: UrlEncode(string)
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: M:WeihanLi.Extensions.StringExtension.UrlEncode(System.String)
  name.vb: UrlEncode(String)
  fullName: WeihanLi.Extensions.StringExtension.UrlEncode(string)
  fullName.vb: WeihanLi.Extensions.StringExtension.UrlEncode(String)
  nameWithType: StringExtension.UrlEncode(string)
  nameWithType.vb: StringExtension.UrlEncode(String)
- uid: WeihanLi.Extensions.StringExtension.UrlEncode*
  name: UrlEncode
  href: api/WeihanLi.Extensions.StringExtension.yml
  commentId: Overload:WeihanLi.Extensions.StringExtension.UrlEncode
  isSpec: "True"
  fullName: WeihanLi.Extensions.StringExtension.UrlEncode
  nameWithType: StringExtension.UrlEncode
- uid: WeihanLi.Extensions.TaskExtension
  name: TaskExtension
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: T:WeihanLi.Extensions.TaskExtension
  fullName: WeihanLi.Extensions.TaskExtension
  nameWithType: TaskExtension
- uid: WeihanLi.Extensions.TaskExtension.AsTask(System.Threading.CancellationToken)
  name: AsTask(CancellationToken)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.AsTask(System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.TaskExtension.AsTask(System.Threading.CancellationToken)
  nameWithType: TaskExtension.AsTask(CancellationToken)
- uid: WeihanLi.Extensions.TaskExtension.AsTask*
  name: AsTask
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.AsTask
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.AsTask
  nameWithType: TaskExtension.AsTask
- uid: WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler,System.Action,System.Threading.CancellationToken)
  name: Run(TaskScheduler, Action, CancellationToken)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler,System.Action,System.Threading.CancellationToken)
  fullName: WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler, System.Action, System.Threading.CancellationToken)
  nameWithType: TaskExtension.Run(TaskScheduler, Action, CancellationToken)
- uid: WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  name: Run(TaskScheduler, Func<Task>, CancellationToken)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  name.vb: Run(TaskScheduler, Func(Of Task), CancellationToken)
  fullName: WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler, System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.TaskExtension.Run(System.Threading.Tasks.TaskScheduler, System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  nameWithType: TaskExtension.Run(TaskScheduler, Func<Task>, CancellationToken)
  nameWithType.vb: TaskExtension.Run(TaskScheduler, Func(Of Task), CancellationToken)
- uid: WeihanLi.Extensions.TaskExtension.Run*
  name: Run
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.Run
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.Run
  nameWithType: TaskExtension.Run
- uid: WeihanLi.Extensions.TaskExtension.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{``0},System.Threading.CancellationToken)
  name: Run<T>(TaskScheduler, Func<T>, CancellationToken)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{``0},System.Threading.CancellationToken)
  name.vb: Run(Of T)(TaskScheduler, Func(Of T), CancellationToken)
  fullName: WeihanLi.Extensions.TaskExtension.Run<T>(System.Threading.Tasks.TaskScheduler, System.Func<T>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.TaskExtension.Run(Of T)(System.Threading.Tasks.TaskScheduler, System.Func(Of T), System.Threading.CancellationToken)
  nameWithType: TaskExtension.Run<T>(TaskScheduler, Func<T>, CancellationToken)
  nameWithType.vb: TaskExtension.Run(Of T)(TaskScheduler, Func(Of T), CancellationToken)
- uid: WeihanLi.Extensions.TaskExtension.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: Run<T>(TaskScheduler, Func<Task<T>>, CancellationToken)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.Run``1(System.Threading.Tasks.TaskScheduler,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name.vb: Run(Of T)(TaskScheduler, Func(Of Task(Of T)), CancellationToken)
  fullName: WeihanLi.Extensions.TaskExtension.Run<T>(System.Threading.Tasks.TaskScheduler, System.Func<System.Threading.Tasks.Task<T>>, System.Threading.CancellationToken)
  fullName.vb: WeihanLi.Extensions.TaskExtension.Run(Of T)(System.Threading.Tasks.TaskScheduler, System.Func(Of System.Threading.Tasks.Task(Of T)), System.Threading.CancellationToken)
  nameWithType: TaskExtension.Run<T>(TaskScheduler, Func<Task<T>>, CancellationToken)
  nameWithType.vb: TaskExtension.Run(Of T)(TaskScheduler, Func(Of Task(Of T)), CancellationToken)
- uid: WeihanLi.Extensions.TaskExtension.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.String,System.Int32)
  name: TimeoutAfter(Task, TimeSpan, string?, int)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.String,System.Int32)
  name.vb: TimeoutAfter(Task, TimeSpan, String, Integer)
  fullName: WeihanLi.Extensions.TaskExtension.TimeoutAfter(System.Threading.Tasks.Task, System.TimeSpan, string?, int)
  fullName.vb: WeihanLi.Extensions.TaskExtension.TimeoutAfter(System.Threading.Tasks.Task, System.TimeSpan, String, Integer)
  nameWithType: TaskExtension.TimeoutAfter(Task, TimeSpan, string?, int)
  nameWithType.vb: TaskExtension.TimeoutAfter(Task, TimeSpan, String, Integer)
- uid: WeihanLi.Extensions.TaskExtension.TimeoutAfter*
  name: TimeoutAfter
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.TimeoutAfter
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.TimeoutAfter
  nameWithType: TaskExtension.TimeoutAfter
- uid: WeihanLi.Extensions.TaskExtension.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String,System.Int32)
  name: TimeoutAfter<T>(Task<T>, TimeSpan, string?, int)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.String,System.Int32)
  name.vb: TimeoutAfter(Of T)(Task(Of T), TimeSpan, String, Integer)
  fullName: WeihanLi.Extensions.TaskExtension.TimeoutAfter<T>(System.Threading.Tasks.Task<T>, System.TimeSpan, string?, int)
  fullName.vb: WeihanLi.Extensions.TaskExtension.TimeoutAfter(Of T)(System.Threading.Tasks.Task(Of T), System.TimeSpan, String, Integer)
  nameWithType: TaskExtension.TimeoutAfter<T>(Task<T>, TimeSpan, string?, int)
  nameWithType.vb: TaskExtension.TimeoutAfter(Of T)(Task(Of T), TimeSpan, String, Integer)
- uid: WeihanLi.Extensions.TaskExtension.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  name: WhenAll(IEnumerable<Task>)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  name.vb: WhenAll(IEnumerable(Of Task))
  fullName: WeihanLi.Extensions.TaskExtension.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.TaskExtension.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  nameWithType: TaskExtension.WhenAll(IEnumerable<Task>)
  nameWithType.vb: TaskExtension.WhenAll(IEnumerable(Of Task))
- uid: WeihanLi.Extensions.TaskExtension.WhenAll*
  name: WhenAll
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.WhenAll
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.WhenAll
  nameWithType: TaskExtension.WhenAll
- uid: WeihanLi.Extensions.TaskExtension.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))
  fullName: WeihanLi.Extensions.TaskExtension.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  fullName.vb: WeihanLi.Extensions.TaskExtension.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  nameWithType: TaskExtension.WhenAll<TResult>(IEnumerable<Task<TResult>>)
  nameWithType.vb: TaskExtension.WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))
- uid: WeihanLi.Extensions.TaskExtension.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  name: WhenAny(IEnumerable<Task>)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  name.vb: WhenAny(IEnumerable(Of Task))
  fullName: WeihanLi.Extensions.TaskExtension.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  fullName.vb: WeihanLi.Extensions.TaskExtension.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  nameWithType: TaskExtension.WhenAny(IEnumerable<Task>)
  nameWithType.vb: TaskExtension.WhenAny(IEnumerable(Of Task))
- uid: WeihanLi.Extensions.TaskExtension.WhenAny*
  name: WhenAny
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.WhenAny
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.WhenAny
  nameWithType: TaskExtension.WhenAny
- uid: WeihanLi.Extensions.TaskExtension.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))
  fullName: WeihanLi.Extensions.TaskExtension.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  fullName.vb: WeihanLi.Extensions.TaskExtension.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  nameWithType: TaskExtension.WhenAny<TResult>(IEnumerable<Task<TResult>>)
  nameWithType.vb: TaskExtension.WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))
- uid: WeihanLi.Extensions.TaskExtension.WrapTask*
  name: WrapTask
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: Overload:WeihanLi.Extensions.TaskExtension.WrapTask
  isSpec: "True"
  fullName: WeihanLi.Extensions.TaskExtension.WrapTask
  nameWithType: TaskExtension.WrapTask
- uid: WeihanLi.Extensions.TaskExtension.WrapTask``1(``0)
  name: WrapTask<T>(T)
  href: api/WeihanLi.Extensions.TaskExtension.yml
  commentId: M:WeihanLi.Extensions.TaskExtension.WrapTask``1(``0)
  name.vb: WrapTask(Of T)(T)
  fullName: WeihanLi.Extensions.TaskExtension.WrapTask<T>(T)
  fullName.vb: WeihanLi.Extensions.TaskExtension.WrapTask(Of T)(T)
  nameWithType: TaskExtension.WrapTask<T>(T)
  nameWithType.vb: TaskExtension.WrapTask(Of T)(T)
- uid: WeihanLi.Extensions.TypeExtension
  name: TypeExtension
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: T:WeihanLi.Extensions.TypeExtension
  fullName: WeihanLi.Extensions.TypeExtension
  nameWithType: TypeExtension
- uid: WeihanLi.Extensions.TypeExtension.GetConstructor(System.Type,System.Type[])
  name: GetConstructor(Type, params Type[]?)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetConstructor(System.Type,System.Type[])
  name.vb: GetConstructor(Type, ParamArray Type())
  fullName: WeihanLi.Extensions.TypeExtension.GetConstructor(System.Type, params System.Type[]?)
  fullName.vb: WeihanLi.Extensions.TypeExtension.GetConstructor(System.Type, ParamArray System.Type())
  nameWithType: TypeExtension.GetConstructor(Type, params Type[]?)
  nameWithType.vb: TypeExtension.GetConstructor(Type, ParamArray Type())
- uid: WeihanLi.Extensions.TypeExtension.GetConstructor*
  name: GetConstructor
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetConstructor
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetConstructor
  nameWithType: TypeExtension.GetConstructor
- uid: WeihanLi.Extensions.TypeExtension.GetDescription(System.Type)
  name: GetDescription(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetDescription(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.GetDescription(System.Type)
  nameWithType: TypeExtension.GetDescription(Type)
- uid: WeihanLi.Extensions.TypeExtension.GetDescription*
  name: GetDescription
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetDescription
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetDescription
  nameWithType: TypeExtension.GetDescription
- uid: WeihanLi.Extensions.TypeExtension.GetEmptyConstructor(System.Type)
  name: GetEmptyConstructor(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetEmptyConstructor(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.GetEmptyConstructor(System.Type)
  nameWithType: TypeExtension.GetEmptyConstructor(Type)
- uid: WeihanLi.Extensions.TypeExtension.GetEmptyConstructor*
  name: GetEmptyConstructor
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetEmptyConstructor
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetEmptyConstructor
  nameWithType: TypeExtension.GetEmptyConstructor
- uid: WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces(System.Type)
  name: GetImplementedInterfaces(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces(System.Type)
  nameWithType: TypeExtension.GetImplementedInterfaces(Type)
- uid: WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces*
  name: GetImplementedInterfaces
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetImplementedInterfaces
  nameWithType: TypeExtension.GetImplementedInterfaces
- uid: WeihanLi.Extensions.TypeExtension.GetMatchingConstructor(System.Type,System.Type[])
  name: GetMatchingConstructor(Type, Type[]?)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetMatchingConstructor(System.Type,System.Type[])
  name.vb: GetMatchingConstructor(Type, Type())
  fullName: WeihanLi.Extensions.TypeExtension.GetMatchingConstructor(System.Type, System.Type[]?)
  fullName.vb: WeihanLi.Extensions.TypeExtension.GetMatchingConstructor(System.Type, System.Type())
  nameWithType: TypeExtension.GetMatchingConstructor(Type, Type[]?)
  nameWithType.vb: TypeExtension.GetMatchingConstructor(Type, Type())
- uid: WeihanLi.Extensions.TypeExtension.GetMatchingConstructor*
  name: GetMatchingConstructor
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetMatchingConstructor
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetMatchingConstructor
  nameWithType: TypeExtension.GetMatchingConstructor
- uid: WeihanLi.Extensions.TypeExtension.GetTypeCode(System.Type)
  name: GetTypeCode(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.GetTypeCode(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.GetTypeCode(System.Type)
  nameWithType: TypeExtension.GetTypeCode(Type)
- uid: WeihanLi.Extensions.TypeExtension.GetTypeCode*
  name: GetTypeCode
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.GetTypeCode
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.GetTypeCode
  nameWithType: TypeExtension.GetTypeCode
- uid: WeihanLi.Extensions.TypeExtension.HasNamespace(System.Type)
  name: HasNamespace(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.HasNamespace(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.HasNamespace(System.Type)
  nameWithType: TypeExtension.HasNamespace(Type)
- uid: WeihanLi.Extensions.TypeExtension.HasNamespace*
  name: HasNamespace
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.HasNamespace
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.HasNamespace
  nameWithType: TypeExtension.HasNamespace
- uid: WeihanLi.Extensions.TypeExtension.IsAssignableTo*
  name: IsAssignableTo
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.IsAssignableTo
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.IsAssignableTo
  nameWithType: TypeExtension.IsAssignableTo
- uid: WeihanLi.Extensions.TypeExtension.IsAssignableTo``1(System.Type)
  name: IsAssignableTo<T>(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsAssignableTo``1(System.Type)
  name.vb: IsAssignableTo(Of T)(Type)
  fullName: WeihanLi.Extensions.TypeExtension.IsAssignableTo<T>(System.Type)
  fullName.vb: WeihanLi.Extensions.TypeExtension.IsAssignableTo(Of T)(System.Type)
  nameWithType: TypeExtension.IsAssignableTo<T>(Type)
  nameWithType.vb: TypeExtension.IsAssignableTo(Of T)(Type)
- uid: WeihanLi.Extensions.TypeExtension.IsBasicType(System.Type)
  name: IsBasicType(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsBasicType(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.IsBasicType(System.Type)
  nameWithType: TypeExtension.IsBasicType(Type)
- uid: WeihanLi.Extensions.TypeExtension.IsBasicType*
  name: IsBasicType
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.IsBasicType
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.IsBasicType
  nameWithType: TypeExtension.IsBasicType
- uid: WeihanLi.Extensions.TypeExtension.IsBasicType``1
  name: IsBasicType<T>()
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsBasicType``1
  name.vb: IsBasicType(Of T)()
  fullName: WeihanLi.Extensions.TypeExtension.IsBasicType<T>()
  fullName.vb: WeihanLi.Extensions.TypeExtension.IsBasicType(Of T)()
  nameWithType: TypeExtension.IsBasicType<T>()
  nameWithType.vb: TypeExtension.IsBasicType(Of T)()
- uid: WeihanLi.Extensions.TypeExtension.IsBasicType``1(``0)
  name: IsBasicType<T>(T)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsBasicType``1(``0)
  name.vb: IsBasicType(Of T)(T)
  fullName: WeihanLi.Extensions.TypeExtension.IsBasicType<T>(T)
  fullName.vb: WeihanLi.Extensions.TypeExtension.IsBasicType(Of T)(T)
  nameWithType: TypeExtension.IsBasicType<T>(T)
  nameWithType.vb: TypeExtension.IsBasicType(Of T)(T)
- uid: WeihanLi.Extensions.TypeExtension.IsPrimitiveType(System.Type)
  name: IsPrimitiveType(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsPrimitiveType(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.IsPrimitiveType(System.Type)
  nameWithType: TypeExtension.IsPrimitiveType(Type)
- uid: WeihanLi.Extensions.TypeExtension.IsPrimitiveType*
  name: IsPrimitiveType
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.IsPrimitiveType
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.IsPrimitiveType
  nameWithType: TypeExtension.IsPrimitiveType
- uid: WeihanLi.Extensions.TypeExtension.IsPrimitiveType``1
  name: IsPrimitiveType<T>()
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsPrimitiveType``1
  name.vb: IsPrimitiveType(Of T)()
  fullName: WeihanLi.Extensions.TypeExtension.IsPrimitiveType<T>()
  fullName.vb: WeihanLi.Extensions.TypeExtension.IsPrimitiveType(Of T)()
  nameWithType: TypeExtension.IsPrimitiveType<T>()
  nameWithType.vb: TypeExtension.IsPrimitiveType(Of T)()
- uid: WeihanLi.Extensions.TypeExtension.IsValueTuple(System.Type)
  name: IsValueTuple(Type)
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: M:WeihanLi.Extensions.TypeExtension.IsValueTuple(System.Type)
  fullName: WeihanLi.Extensions.TypeExtension.IsValueTuple(System.Type)
  nameWithType: TypeExtension.IsValueTuple(Type)
- uid: WeihanLi.Extensions.TypeExtension.IsValueTuple*
  name: IsValueTuple
  href: api/WeihanLi.Extensions.TypeExtension.yml
  commentId: Overload:WeihanLi.Extensions.TypeExtension.IsValueTuple
  isSpec: "True"
  fullName: WeihanLi.Extensions.TypeExtension.IsValueTuple
  nameWithType: TypeExtension.IsValueTuple
